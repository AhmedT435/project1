
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000029fe  00002a92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080007a  0080007a  00002aac  2**0
                  ALLOC
  3 .stab         00002b2c  00000000  00000000  00002aac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001291  00000000  00000000  000055d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006869  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000069a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008762  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000964d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a3fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a7e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000afb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c4 12 	jmp	0x2588	; 0x2588 <__vector_7>
      20:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__vector_8>
      24:	0c 94 91 12 	jmp	0x2522	; 0x2522 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 bd 0a 	call	0x157a	; 0x157a <main>
      8a:	0c 94 fd 14 	jmp	0x29fa	; 0x29fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e2 14 	jmp	0x29c4	; 0x29c4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ee 14 	jmp	0x29dc	; 0x29dc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 d6 14 	jmp	0x29ac	; 0x29ac <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 f2 14 	jmp	0x29e4	; 0x29e4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Buzzer_init>:
 *  Created on: Mar 16, 2024
 *      Author: Kimo Store
 */
#include "buzzer.h"
#include "gpio.h"
void Buzzer_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN ,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 7f 07 	call	0xefe	; 0xefe <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	40 e0       	ldi	r20, 0x00	; 0
     b5e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <Buzzer_on>:
void Buzzer_on(void){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <Buzzer_off>:
void Buzzer_off(void){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	60 e0       	ldi	r22, 0x00	; 0
     b8c:	40 e0       	ldi	r20, 0x00	; 0
     b8e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
}
     b92:	cf 91       	pop	r28
     b94:	df 91       	pop	r29
     b96:	08 95       	ret

00000b98 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"


uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     b98:	df 93       	push	r29
     b9a:	cf 93       	push	r28
     b9c:	00 d0       	rcall	.+0      	; 0xb9e <EEPROM_writeByte+0x6>
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <EEPROM_writeByte+0x8>
     ba0:	cd b7       	in	r28, 0x3d	; 61
     ba2:	de b7       	in	r29, 0x3e	; 62
     ba4:	9a 83       	std	Y+2, r25	; 0x02
     ba6:	89 83       	std	Y+1, r24	; 0x01
     ba8:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     baa:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     bae:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     bb2:	88 30       	cpi	r24, 0x08	; 8
     bb4:	11 f0       	breq	.+4      	; 0xbba <EEPROM_writeByte+0x22>
        return ERROR;
     bb6:	1c 82       	std	Y+4, r1	; 0x04
     bb8:	28 c0       	rjmp	.+80     	; 0xc0a <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	9a 81       	ldd	r25, Y+2	; 0x02
     bbe:	80 70       	andi	r24, 0x00	; 0
     bc0:	97 70       	andi	r25, 0x07	; 7
     bc2:	88 0f       	add	r24, r24
     bc4:	89 2f       	mov	r24, r25
     bc6:	88 1f       	adc	r24, r24
     bc8:	99 0b       	sbc	r25, r25
     bca:	91 95       	neg	r25
     bcc:	80 6a       	ori	r24, 0xA0	; 160
     bce:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     bd2:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     bd6:	88 31       	cpi	r24, 0x18	; 24
     bd8:	11 f0       	breq	.+4      	; 0xbde <EEPROM_writeByte+0x46>
        return ERROR; 
     bda:	1c 82       	std	Y+4, r1	; 0x04
     bdc:	16 c0       	rjmp	.+44     	; 0xc0a <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     be4:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     be8:	88 32       	cpi	r24, 0x28	; 40
     bea:	11 f0       	breq	.+4      	; 0xbf0 <EEPROM_writeByte+0x58>
        return ERROR;
     bec:	1c 82       	std	Y+4, r1	; 0x04
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     bf6:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     bfa:	88 32       	cpi	r24, 0x28	; 40
     bfc:	11 f0       	breq	.+4      	; 0xc02 <EEPROM_writeByte+0x6a>
        return ERROR;
     bfe:	1c 82       	std	Y+4, r1	; 0x04
     c00:	04 c0       	rjmp	.+8      	; 0xc0a <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     c02:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <TWI_stop>
	
    return SUCCESS;
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	8c 83       	std	Y+4, r24	; 0x04
     c0a:	8c 81       	ldd	r24, Y+4	; 0x04
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	cf 91       	pop	r28
     c16:	df 91       	pop	r29
     c18:	08 95       	ret

00000c1a <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     c1a:	df 93       	push	r29
     c1c:	cf 93       	push	r28
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <EEPROM_readByte+0x6>
     c20:	00 d0       	rcall	.+0      	; 0xc22 <EEPROM_readByte+0x8>
     c22:	0f 92       	push	r0
     c24:	cd b7       	in	r28, 0x3d	; 61
     c26:	de b7       	in	r29, 0x3e	; 62
     c28:	9a 83       	std	Y+2, r25	; 0x02
     c2a:	89 83       	std	Y+1, r24	; 0x01
     c2c:	7c 83       	std	Y+4, r23	; 0x04
     c2e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c30:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     c34:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     c38:	88 30       	cpi	r24, 0x08	; 8
     c3a:	11 f0       	breq	.+4      	; 0xc40 <EEPROM_readByte+0x26>
        return ERROR;
     c3c:	1d 82       	std	Y+5, r1	; 0x05
     c3e:	44 c0       	rjmp	.+136    	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	9a 81       	ldd	r25, Y+2	; 0x02
     c44:	80 70       	andi	r24, 0x00	; 0
     c46:	97 70       	andi	r25, 0x07	; 7
     c48:	88 0f       	add	r24, r24
     c4a:	89 2f       	mov	r24, r25
     c4c:	88 1f       	adc	r24, r24
     c4e:	99 0b       	sbc	r25, r25
     c50:	91 95       	neg	r25
     c52:	80 6a       	ori	r24, 0xA0	; 160
     c54:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     c58:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     c5c:	88 31       	cpi	r24, 0x18	; 24
     c5e:	11 f0       	breq	.+4      	; 0xc64 <EEPROM_readByte+0x4a>
        return ERROR;
     c60:	1d 82       	std	Y+5, r1	; 0x05
     c62:	32 c0       	rjmp	.+100    	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     c64:	89 81       	ldd	r24, Y+1	; 0x01
     c66:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     c6a:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     c6e:	88 32       	cpi	r24, 0x28	; 40
     c70:	11 f0       	breq	.+4      	; 0xc76 <EEPROM_readByte+0x5c>
        return ERROR;
     c72:	1d 82       	std	Y+5, r1	; 0x05
     c74:	29 c0       	rjmp	.+82     	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     c76:	0e 94 4a 13 	call	0x2694	; 0x2694 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     c7a:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     c7e:	80 31       	cpi	r24, 0x10	; 16
     c80:	11 f0       	breq	.+4      	; 0xc86 <EEPROM_readByte+0x6c>
        return ERROR;
     c82:	1d 82       	std	Y+5, r1	; 0x05
     c84:	21 c0       	rjmp	.+66     	; 0xcc8 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	80 70       	andi	r24, 0x00	; 0
     c8c:	97 70       	andi	r25, 0x07	; 7
     c8e:	88 0f       	add	r24, r24
     c90:	89 2f       	mov	r24, r25
     c92:	88 1f       	adc	r24, r24
     c94:	99 0b       	sbc	r25, r25
     c96:	91 95       	neg	r25
     c98:	81 6a       	ori	r24, 0xA1	; 161
     c9a:	0e 94 65 13 	call	0x26ca	; 0x26ca <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     c9e:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     ca2:	80 34       	cpi	r24, 0x40	; 64
     ca4:	11 f0       	breq	.+4      	; 0xcaa <EEPROM_readByte+0x90>
        return ERROR;
     ca6:	1d 82       	std	Y+5, r1	; 0x05
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     caa:	0e 94 8f 13 	call	0x271e	; 0x271e <TWI_readByteWithNACK>
     cae:	eb 81       	ldd	r30, Y+3	; 0x03
     cb0:	fc 81       	ldd	r31, Y+4	; 0x04
     cb2:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     cb4:	0e 94 a2 13 	call	0x2744	; 0x2744 <TWI_getStatus>
     cb8:	88 35       	cpi	r24, 0x58	; 88
     cba:	11 f0       	breq	.+4      	; 0xcc0 <EEPROM_readByte+0xa6>
        return ERROR;
     cbc:	1d 82       	std	Y+5, r1	; 0x05
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     cc0:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <TWI_stop>

    return SUCCESS;
     cc4:	81 e0       	ldi	r24, 0x01	; 1
     cc6:	8d 83       	std	Y+5, r24	; 0x05
     cc8:	8d 81       	ldd	r24, Y+5	; 0x05
}
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <compare_Pass>:
uint8 i;
uint8 key_check[PASS_SIZE];
uint8 val = 1;
uint8 pass_flag = 1;

uint8 compare_Pass(void){
     cda:	0f 93       	push	r16
     cdc:	1f 93       	push	r17
     cde:	df 93       	push	r29
     ce0:	cf 93       	push	r28
     ce2:	cd b7       	in	r28, 0x3d	; 61
     ce4:	de b7       	in	r29, 0x3e	; 62
     ce6:	2f 97       	sbiw	r28, 0x0f	; 15
     ce8:	0f b6       	in	r0, 0x3f	; 63
     cea:	f8 94       	cli
     cec:	de bf       	out	0x3e, r29	; 62
     cee:	0f be       	out	0x3f, r0	; 63
     cf0:	cd bf       	out	0x3d, r28	; 61
	for (i = 0; i < PASS_SIZE; i++) {
     cf2:	10 92 7e 00 	sts	0x007E, r1
     cf6:	98 c0       	rjmp	.+304    	; 0xe28 <compare_Pass+0x14e>
				while (UART_recieveByte() != MC2_READY) {}
     cf8:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
     cfc:	80 31       	cpi	r24, 0x10	; 16
     cfe:	e1 f7       	brne	.-8      	; 0xcf8 <compare_Pass+0x1e>
				key_check[i] = UART_recieveByte();
     d00:	80 91 7e 00 	lds	r24, 0x007E
     d04:	08 2f       	mov	r16, r24
     d06:	10 e0       	ldi	r17, 0x00	; 0
     d08:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
     d0c:	f8 01       	movw	r30, r16
     d0e:	e1 58       	subi	r30, 0x81	; 129
     d10:	ff 4f       	sbci	r31, 0xFF	; 255
     d12:	80 83       	st	Z, r24
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
     d14:	80 91 7e 00 	lds	r24, 0x007E
     d18:	88 2f       	mov	r24, r24
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	8a 5e       	subi	r24, 0xEA	; 234
     d1e:	9c 4f       	sbci	r25, 0xFC	; 252
     d20:	ac 01       	movw	r20, r24
     d22:	80 91 7e 00 	lds	r24, 0x007E
     d26:	88 2f       	mov	r24, r24
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	fc 01       	movw	r30, r24
     d2c:	e1 58       	subi	r30, 0x81	; 129
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	20 81       	ld	r18, Z
     d32:	ca 01       	movw	r24, r20
     d34:	62 2f       	mov	r22, r18
     d36:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	a0 e2       	ldi	r26, 0x20	; 32
     d40:	b1 e4       	ldi	r27, 0x41	; 65
     d42:	8b 87       	std	Y+11, r24	; 0x0b
     d44:	9c 87       	std	Y+12, r25	; 0x0c
     d46:	ad 87       	std	Y+13, r26	; 0x0d
     d48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d4a:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4c:	7c 85       	ldd	r23, Y+12	; 0x0c
     d4e:	8d 85       	ldd	r24, Y+13	; 0x0d
     d50:	9e 85       	ldd	r25, Y+14	; 0x0e
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	30 e0       	ldi	r19, 0x00	; 0
     d56:	4a ef       	ldi	r20, 0xFA	; 250
     d58:	54 e4       	ldi	r21, 0x44	; 68
     d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	8f 83       	std	Y+7, r24	; 0x07
     d64:	98 87       	std	Y+8, r25	; 0x08
     d66:	a9 87       	std	Y+9, r26	; 0x09
     d68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d6a:	6f 81       	ldd	r22, Y+7	; 0x07
     d6c:	78 85       	ldd	r23, Y+8	; 0x08
     d6e:	89 85       	ldd	r24, Y+9	; 0x09
     d70:	9a 85       	ldd	r25, Y+10	; 0x0a
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	5f e3       	ldi	r21, 0x3F	; 63
     d7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d7e:	88 23       	and	r24, r24
     d80:	2c f4       	brge	.+10     	; 0xd8c <compare_Pass+0xb2>
		__ticks = 1;
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9e 83       	std	Y+6, r25	; 0x06
     d88:	8d 83       	std	Y+5, r24	; 0x05
     d8a:	3f c0       	rjmp	.+126    	; 0xe0a <compare_Pass+0x130>
	else if (__tmp > 65535)
     d8c:	6f 81       	ldd	r22, Y+7	; 0x07
     d8e:	78 85       	ldd	r23, Y+8	; 0x08
     d90:	89 85       	ldd	r24, Y+9	; 0x09
     d92:	9a 85       	ldd	r25, Y+10	; 0x0a
     d94:	20 e0       	ldi	r18, 0x00	; 0
     d96:	3f ef       	ldi	r19, 0xFF	; 255
     d98:	4f e7       	ldi	r20, 0x7F	; 127
     d9a:	57 e4       	ldi	r21, 0x47	; 71
     d9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     da0:	18 16       	cp	r1, r24
     da2:	4c f5       	brge	.+82     	; 0xdf6 <compare_Pass+0x11c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	20 e0       	ldi	r18, 0x00	; 0
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	51 e4       	ldi	r21, 0x41	; 65
     db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db8:	dc 01       	movw	r26, r24
     dba:	cb 01       	movw	r24, r22
     dbc:	bc 01       	movw	r22, r24
     dbe:	cd 01       	movw	r24, r26
     dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dc4:	dc 01       	movw	r26, r24
     dc6:	cb 01       	movw	r24, r22
     dc8:	9e 83       	std	Y+6, r25	; 0x06
     dca:	8d 83       	std	Y+5, r24	; 0x05
     dcc:	0f c0       	rjmp	.+30     	; 0xdec <compare_Pass+0x112>
     dce:	88 ec       	ldi	r24, 0xC8	; 200
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	9c 83       	std	Y+4, r25	; 0x04
     dd4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	9c 81       	ldd	r25, Y+4	; 0x04
     dda:	01 97       	sbiw	r24, 0x01	; 1
     ddc:	f1 f7       	brne	.-4      	; 0xdda <compare_Pass+0x100>
     dde:	9c 83       	std	Y+4, r25	; 0x04
     de0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     de2:	8d 81       	ldd	r24, Y+5	; 0x05
     de4:	9e 81       	ldd	r25, Y+6	; 0x06
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	9e 83       	std	Y+6, r25	; 0x06
     dea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dec:	8d 81       	ldd	r24, Y+5	; 0x05
     dee:	9e 81       	ldd	r25, Y+6	; 0x06
     df0:	00 97       	sbiw	r24, 0x00	; 0
     df2:	69 f7       	brne	.-38     	; 0xdce <compare_Pass+0xf4>
     df4:	14 c0       	rjmp	.+40     	; 0xe1e <compare_Pass+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     df6:	6f 81       	ldd	r22, Y+7	; 0x07
     df8:	78 85       	ldd	r23, Y+8	; 0x08
     dfa:	89 85       	ldd	r24, Y+9	; 0x09
     dfc:	9a 85       	ldd	r25, Y+10	; 0x0a
     dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	9e 83       	std	Y+6, r25	; 0x06
     e08:	8d 83       	std	Y+5, r24	; 0x05
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	9a 83       	std	Y+2, r25	; 0x02
     e10:	89 83       	std	Y+1, r24	; 0x01
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	01 97       	sbiw	r24, 0x01	; 1
     e18:	f1 f7       	brne	.-4      	; 0xe16 <compare_Pass+0x13c>
     e1a:	9a 83       	std	Y+2, r25	; 0x02
     e1c:	89 83       	std	Y+1, r24	; 0x01
uint8 key_check[PASS_SIZE];
uint8 val = 1;
uint8 pass_flag = 1;

uint8 compare_Pass(void){
	for (i = 0; i < PASS_SIZE; i++) {
     e1e:	80 91 7e 00 	lds	r24, 0x007E
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 7e 00 	sts	0x007E, r24
     e28:	80 91 7e 00 	lds	r24, 0x007E
     e2c:	85 30       	cpi	r24, 0x05	; 5
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <compare_Pass+0x158>
     e30:	63 cf       	rjmp	.-314    	; 0xcf8 <compare_Pass+0x1e>
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
     e32:	10 92 7e 00 	sts	0x007E, r1
     e36:	42 c0       	rjmp	.+132    	; 0xebc <compare_Pass+0x1e2>
				EEPROM_readByte(PASS_ADRESS + i, &key[i]);
     e38:	80 91 7e 00 	lds	r24, 0x007E
     e3c:	88 2f       	mov	r24, r24
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	8f 5e       	subi	r24, 0xEF	; 239
     e42:	9c 4f       	sbci	r25, 0xFC	; 252
     e44:	ac 01       	movw	r20, r24
     e46:	80 91 7e 00 	lds	r24, 0x007E
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 01       	movw	r18, r24
     e50:	2c 57       	subi	r18, 0x7C	; 124
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	ca 01       	movw	r24, r20
     e56:	b9 01       	movw	r22, r18
     e58:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
				EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
     e5c:	80 91 7e 00 	lds	r24, 0x007E
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	8a 5e       	subi	r24, 0xEA	; 234
     e66:	9c 4f       	sbci	r25, 0xFC	; 252
     e68:	ac 01       	movw	r20, r24
     e6a:	80 91 7e 00 	lds	r24, 0x007E
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 01       	movw	r18, r24
     e74:	21 58       	subi	r18, 0x81	; 129
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	ca 01       	movw	r24, r20
     e7a:	b9 01       	movw	r22, r18
     e7c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
				if ( key[i] == key_check[i])
     e80:	80 91 7e 00 	lds	r24, 0x007E
     e84:	88 2f       	mov	r24, r24
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	fc 01       	movw	r30, r24
     e8a:	ec 57       	subi	r30, 0x7C	; 124
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	20 81       	ld	r18, Z
     e90:	80 91 7e 00 	lds	r24, 0x007E
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	fc 01       	movw	r30, r24
     e9a:	e1 58       	subi	r30, 0x81	; 129
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	80 81       	ld	r24, Z
     ea0:	28 17       	cp	r18, r24
     ea2:	49 f4       	brne	.+18     	; 0xeb6 <compare_Pass+0x1dc>
				{

					val=1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 68 00 	sts	0x0068, r24
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
     eaa:	80 91 7e 00 	lds	r24, 0x007E
     eae:	8f 5f       	subi	r24, 0xFF	; 255
     eb0:	80 93 7e 00 	sts	0x007E, r24
     eb4:	03 c0       	rjmp	.+6      	; 0xebc <compare_Pass+0x1e2>
				{

					val=1;
				}
				else{
					val=0;
     eb6:	10 92 68 00 	sts	0x0068, r1
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <compare_Pass+0x1ec>
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
     ebc:	80 91 7e 00 	lds	r24, 0x007E
     ec0:	85 30       	cpi	r24, 0x05	; 5
     ec2:	08 f4       	brcc	.+2      	; 0xec6 <compare_Pass+0x1ec>
     ec4:	b9 cf       	rjmp	.-142    	; 0xe38 <compare_Pass+0x15e>
					val=0;
					break;
				}

			}
			while (UART_recieveByte() != MC2_READY){}
     ec6:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
     eca:	80 31       	cpi	r24, 0x10	; 16
     ecc:	e1 f7       	brne	.-8      	; 0xec6 <compare_Pass+0x1ec>
			UART_sendByte(val);
     ece:	80 91 68 00 	lds	r24, 0x0068
     ed2:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>
			if(val==1)
     ed6:	80 91 68 00 	lds	r24, 0x0068
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	19 f4       	brne	.+6      	; 0xee4 <compare_Pass+0x20a>
			{
				//while (UART_recieveByte() != MC2_READY) {}
				//pass_flag = UART_recieveByte();
				return 1;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	8f 87       	std	Y+15, r24	; 0x0f
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <compare_Pass+0x20c>
			}
			else{
				//while (UART_recieveByte() != MC2_READY) {}
				//pass_flag = UART_recieveByte();
				return 0;
     ee4:	1f 86       	std	Y+15, r1	; 0x0f
     ee6:	8f 85       	ldd	r24, Y+15	; 0x0f
			}
}
     ee8:	2f 96       	adiw	r28, 0x0f	; 15
     eea:	0f b6       	in	r0, 0x3f	; 63
     eec:	f8 94       	cli
     eee:	de bf       	out	0x3e, r29	; 62
     ef0:	0f be       	out	0x3f, r0	; 63
     ef2:	cd bf       	out	0x3d, r28	; 61
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	08 95       	ret

00000efe <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <GPIO_setupPinDirection+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <GPIO_setupPinDirection+0x8>
     f06:	0f 92       	push	r0
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	6a 83       	std	Y+2, r22	; 0x02
     f10:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	88 30       	cpi	r24, 0x08	; 8
     f16:	08 f0       	brcs	.+2      	; 0xf1a <GPIO_setupPinDirection+0x1c>
     f18:	d5 c0       	rjmp	.+426    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
     f1a:	89 81       	ldd	r24, Y+1	; 0x01
     f1c:	84 30       	cpi	r24, 0x04	; 4
     f1e:	08 f0       	brcs	.+2      	; 0xf22 <GPIO_setupPinDirection+0x24>
     f20:	d1 c0       	rjmp	.+418    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	28 2f       	mov	r18, r24
     f26:	30 e0       	ldi	r19, 0x00	; 0
     f28:	3d 83       	std	Y+5, r19	; 0x05
     f2a:	2c 83       	std	Y+4, r18	; 0x04
     f2c:	8c 81       	ldd	r24, Y+4	; 0x04
     f2e:	9d 81       	ldd	r25, Y+5	; 0x05
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	91 05       	cpc	r25, r1
     f34:	09 f4       	brne	.+2      	; 0xf38 <GPIO_setupPinDirection+0x3a>
     f36:	43 c0       	rjmp	.+134    	; 0xfbe <GPIO_setupPinDirection+0xc0>
     f38:	2c 81       	ldd	r18, Y+4	; 0x04
     f3a:	3d 81       	ldd	r19, Y+5	; 0x05
     f3c:	22 30       	cpi	r18, 0x02	; 2
     f3e:	31 05       	cpc	r19, r1
     f40:	2c f4       	brge	.+10     	; 0xf4c <GPIO_setupPinDirection+0x4e>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	00 97       	sbiw	r24, 0x00	; 0
     f48:	71 f0       	breq	.+28     	; 0xf66 <GPIO_setupPinDirection+0x68>
     f4a:	bc c0       	rjmp	.+376    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
     f4c:	2c 81       	ldd	r18, Y+4	; 0x04
     f4e:	3d 81       	ldd	r19, Y+5	; 0x05
     f50:	22 30       	cpi	r18, 0x02	; 2
     f52:	31 05       	cpc	r19, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_setupPinDirection+0x5a>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_setupPinDirection+0x118>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	9d 81       	ldd	r25, Y+5	; 0x05
     f5c:	83 30       	cpi	r24, 0x03	; 3
     f5e:	91 05       	cpc	r25, r1
     f60:	09 f4       	brne	.+2      	; 0xf64 <GPIO_setupPinDirection+0x66>
     f62:	85 c0       	rjmp	.+266    	; 0x106e <GPIO_setupPinDirection+0x170>
     f64:	af c0       	rjmp	.+350    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	81 30       	cpi	r24, 0x01	; 1
     f6a:	a1 f4       	brne	.+40     	; 0xf94 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     f6c:	aa e3       	ldi	r26, 0x3A	; 58
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ea e3       	ldi	r30, 0x3A	; 58
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <GPIO_setupPinDirection+0x8c>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <GPIO_setupPinDirection+0x88>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	98 c0       	rjmp	.+304    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     f94:	aa e3       	ldi	r26, 0x3A	; 58
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	ea e3       	ldi	r30, 0x3A	; 58
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_setupPinDirection+0xb4>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_setupPinDirection+0xb0>
     fb6:	80 95       	com	r24
     fb8:	84 23       	and	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	83 c0       	rjmp	.+262    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	a1 f4       	brne	.+40     	; 0xfec <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     fc4:	a7 e3       	ldi	r26, 0x37	; 55
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e7 e3       	ldi	r30, 0x37	; 55
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <GPIO_setupPinDirection+0xe4>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <GPIO_setupPinDirection+0xe0>
     fe6:	84 2b       	or	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	6c c0       	rjmp	.+216    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     fec:	a7 e3       	ldi	r26, 0x37	; 55
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e7 e3       	ldi	r30, 0x37	; 55
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_setupPinDirection+0x10c>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_setupPinDirection+0x108>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	57 c0       	rjmp	.+174    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	a1 f4       	brne	.+40     	; 0x1044 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    101c:	a4 e3       	ldi	r26, 0x34	; 52
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	e4 e3       	ldi	r30, 0x34	; 52
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	48 2f       	mov	r20, r24
    1028:	8a 81       	ldd	r24, Y+2	; 0x02
    102a:	28 2f       	mov	r18, r24
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	02 2e       	mov	r0, r18
    1034:	02 c0       	rjmp	.+4      	; 0x103a <GPIO_setupPinDirection+0x13c>
    1036:	88 0f       	add	r24, r24
    1038:	99 1f       	adc	r25, r25
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <GPIO_setupPinDirection+0x138>
    103e:	84 2b       	or	r24, r20
    1040:	8c 93       	st	X, r24
    1042:	40 c0       	rjmp	.+128    	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1044:	a4 e3       	ldi	r26, 0x34	; 52
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e4 e3       	ldi	r30, 0x34	; 52
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <GPIO_setupPinDirection+0x164>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <GPIO_setupPinDirection+0x160>
    1066:	80 95       	com	r24
    1068:	84 23       	and	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	2b c0       	rjmp	.+86     	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	81 30       	cpi	r24, 0x01	; 1
    1072:	a1 f4       	brne	.+40     	; 0x109c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1074:	a1 e3       	ldi	r26, 0x31	; 49
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e1 e3       	ldi	r30, 0x31	; 49
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <GPIO_setupPinDirection+0x194>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <GPIO_setupPinDirection+0x190>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	14 c0       	rjmp	.+40     	; 0x10c4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    109c:	a1 e3       	ldi	r26, 0x31	; 49
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	e1 e3       	ldi	r30, 0x31	; 49
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <GPIO_setupPinDirection+0x1bc>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <GPIO_setupPinDirection+0x1b8>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	0f 90       	pop	r0
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <GPIO_writePin+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <GPIO_writePin+0x8>
    10dc:	0f 92       	push	r0
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	6a 83       	std	Y+2, r22	; 0x02
    10e6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10e8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ea:	88 30       	cpi	r24, 0x08	; 8
    10ec:	08 f0       	brcs	.+2      	; 0x10f0 <GPIO_writePin+0x1c>
    10ee:	d5 c0       	rjmp	.+426    	; 0x129a <GPIO_writePin+0x1c6>
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <GPIO_writePin+0x24>
    10f6:	d1 c0       	rjmp	.+418    	; 0x129a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3d 83       	std	Y+5, r19	; 0x05
    1100:	2c 83       	std	Y+4, r18	; 0x04
    1102:	8c 81       	ldd	r24, Y+4	; 0x04
    1104:	9d 81       	ldd	r25, Y+5	; 0x05
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <GPIO_writePin+0x3a>
    110c:	43 c0       	rjmp	.+134    	; 0x1194 <GPIO_writePin+0xc0>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	2c f4       	brge	.+10     	; 0x1122 <GPIO_writePin+0x4e>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	71 f0       	breq	.+28     	; 0x113c <GPIO_writePin+0x68>
    1120:	bc c0       	rjmp	.+376    	; 0x129a <GPIO_writePin+0x1c6>
    1122:	2c 81       	ldd	r18, Y+4	; 0x04
    1124:	3d 81       	ldd	r19, Y+5	; 0x05
    1126:	22 30       	cpi	r18, 0x02	; 2
    1128:	31 05       	cpc	r19, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <GPIO_writePin+0x5a>
    112c:	5f c0       	rjmp	.+190    	; 0x11ec <GPIO_writePin+0x118>
    112e:	8c 81       	ldd	r24, Y+4	; 0x04
    1130:	9d 81       	ldd	r25, Y+5	; 0x05
    1132:	83 30       	cpi	r24, 0x03	; 3
    1134:	91 05       	cpc	r25, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <GPIO_writePin+0x66>
    1138:	85 c0       	rjmp	.+266    	; 0x1244 <GPIO_writePin+0x170>
    113a:	af c0       	rjmp	.+350    	; 0x129a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	81 30       	cpi	r24, 0x01	; 1
    1140:	a1 f4       	brne	.+40     	; 0x116a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1142:	ab e3       	ldi	r26, 0x3B	; 59
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	eb e3       	ldi	r30, 0x3B	; 59
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	48 2f       	mov	r20, r24
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	02 2e       	mov	r0, r18
    115a:	02 c0       	rjmp	.+4      	; 0x1160 <GPIO_writePin+0x8c>
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	0a 94       	dec	r0
    1162:	e2 f7       	brpl	.-8      	; 0x115c <GPIO_writePin+0x88>
    1164:	84 2b       	or	r24, r20
    1166:	8c 93       	st	X, r24
    1168:	98 c0       	rjmp	.+304    	; 0x129a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    116a:	ab e3       	ldi	r26, 0x3B	; 59
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb e3       	ldi	r30, 0x3B	; 59
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	48 2f       	mov	r20, r24
    1176:	8a 81       	ldd	r24, Y+2	; 0x02
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	02 2e       	mov	r0, r18
    1182:	02 c0       	rjmp	.+4      	; 0x1188 <GPIO_writePin+0xb4>
    1184:	88 0f       	add	r24, r24
    1186:	99 1f       	adc	r25, r25
    1188:	0a 94       	dec	r0
    118a:	e2 f7       	brpl	.-8      	; 0x1184 <GPIO_writePin+0xb0>
    118c:	80 95       	com	r24
    118e:	84 23       	and	r24, r20
    1190:	8c 93       	st	X, r24
    1192:	83 c0       	rjmp	.+262    	; 0x129a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1194:	8b 81       	ldd	r24, Y+3	; 0x03
    1196:	81 30       	cpi	r24, 0x01	; 1
    1198:	a1 f4       	brne	.+40     	; 0x11c2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    119a:	a8 e3       	ldi	r26, 0x38	; 56
    119c:	b0 e0       	ldi	r27, 0x00	; 0
    119e:	e8 e3       	ldi	r30, 0x38	; 56
    11a0:	f0 e0       	ldi	r31, 0x00	; 0
    11a2:	80 81       	ld	r24, Z
    11a4:	48 2f       	mov	r20, r24
    11a6:	8a 81       	ldd	r24, Y+2	; 0x02
    11a8:	28 2f       	mov	r18, r24
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	02 2e       	mov	r0, r18
    11b2:	02 c0       	rjmp	.+4      	; 0x11b8 <GPIO_writePin+0xe4>
    11b4:	88 0f       	add	r24, r24
    11b6:	99 1f       	adc	r25, r25
    11b8:	0a 94       	dec	r0
    11ba:	e2 f7       	brpl	.-8      	; 0x11b4 <GPIO_writePin+0xe0>
    11bc:	84 2b       	or	r24, r20
    11be:	8c 93       	st	X, r24
    11c0:	6c c0       	rjmp	.+216    	; 0x129a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    11c2:	a8 e3       	ldi	r26, 0x38	; 56
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	e8 e3       	ldi	r30, 0x38	; 56
    11c8:	f0 e0       	ldi	r31, 0x00	; 0
    11ca:	80 81       	ld	r24, Z
    11cc:	48 2f       	mov	r20, r24
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	28 2f       	mov	r18, r24
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	02 2e       	mov	r0, r18
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <GPIO_writePin+0x10c>
    11dc:	88 0f       	add	r24, r24
    11de:	99 1f       	adc	r25, r25
    11e0:	0a 94       	dec	r0
    11e2:	e2 f7       	brpl	.-8      	; 0x11dc <GPIO_writePin+0x108>
    11e4:	80 95       	com	r24
    11e6:	84 23       	and	r24, r20
    11e8:	8c 93       	st	X, r24
    11ea:	57 c0       	rjmp	.+174    	; 0x129a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	a1 f4       	brne	.+40     	; 0x121a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    11f2:	a5 e3       	ldi	r26, 0x35	; 53
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e5 e3       	ldi	r30, 0x35	; 53
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 2e       	mov	r0, r18
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <GPIO_writePin+0x13c>
    120c:	88 0f       	add	r24, r24
    120e:	99 1f       	adc	r25, r25
    1210:	0a 94       	dec	r0
    1212:	e2 f7       	brpl	.-8      	; 0x120c <GPIO_writePin+0x138>
    1214:	84 2b       	or	r24, r20
    1216:	8c 93       	st	X, r24
    1218:	40 c0       	rjmp	.+128    	; 0x129a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    121a:	a5 e3       	ldi	r26, 0x35	; 53
    121c:	b0 e0       	ldi	r27, 0x00	; 0
    121e:	e5 e3       	ldi	r30, 0x35	; 53
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	80 81       	ld	r24, Z
    1224:	48 2f       	mov	r20, r24
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	28 2f       	mov	r18, r24
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	02 2e       	mov	r0, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <GPIO_writePin+0x164>
    1234:	88 0f       	add	r24, r24
    1236:	99 1f       	adc	r25, r25
    1238:	0a 94       	dec	r0
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <GPIO_writePin+0x160>
    123c:	80 95       	com	r24
    123e:	84 23       	and	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	2b c0       	rjmp	.+86     	; 0x129a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1244:	8b 81       	ldd	r24, Y+3	; 0x03
    1246:	81 30       	cpi	r24, 0x01	; 1
    1248:	a1 f4       	brne	.+40     	; 0x1272 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    124a:	a2 e3       	ldi	r26, 0x32	; 50
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	e2 e3       	ldi	r30, 0x32	; 50
    1250:	f0 e0       	ldi	r31, 0x00	; 0
    1252:	80 81       	ld	r24, Z
    1254:	48 2f       	mov	r20, r24
    1256:	8a 81       	ldd	r24, Y+2	; 0x02
    1258:	28 2f       	mov	r18, r24
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	90 e0       	ldi	r25, 0x00	; 0
    1260:	02 2e       	mov	r0, r18
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <GPIO_writePin+0x194>
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	0a 94       	dec	r0
    126a:	e2 f7       	brpl	.-8      	; 0x1264 <GPIO_writePin+0x190>
    126c:	84 2b       	or	r24, r20
    126e:	8c 93       	st	X, r24
    1270:	14 c0       	rjmp	.+40     	; 0x129a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1272:	a2 e3       	ldi	r26, 0x32	; 50
    1274:	b0 e0       	ldi	r27, 0x00	; 0
    1276:	e2 e3       	ldi	r30, 0x32	; 50
    1278:	f0 e0       	ldi	r31, 0x00	; 0
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	28 2f       	mov	r18, r24
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	02 2e       	mov	r0, r18
    128a:	02 c0       	rjmp	.+4      	; 0x1290 <GPIO_writePin+0x1bc>
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	0a 94       	dec	r0
    1292:	e2 f7       	brpl	.-8      	; 0x128c <GPIO_writePin+0x1b8>
    1294:	80 95       	com	r24
    1296:	84 23       	and	r24, r20
    1298:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	cf 91       	pop	r28
    12a6:	df 91       	pop	r29
    12a8:	08 95       	ret

000012aa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12aa:	df 93       	push	r29
    12ac:	cf 93       	push	r28
    12ae:	00 d0       	rcall	.+0      	; 0x12b0 <GPIO_readPin+0x6>
    12b0:	00 d0       	rcall	.+0      	; 0x12b2 <GPIO_readPin+0x8>
    12b2:	0f 92       	push	r0
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    12bc:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	88 30       	cpi	r24, 0x08	; 8
    12c2:	08 f0       	brcs	.+2      	; 0x12c6 <GPIO_readPin+0x1c>
    12c4:	84 c0       	rjmp	.+264    	; 0x13ce <GPIO_readPin+0x124>
    12c6:	8a 81       	ldd	r24, Y+2	; 0x02
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	08 f0       	brcs	.+2      	; 0x12ce <GPIO_readPin+0x24>
    12cc:	80 c0       	rjmp	.+256    	; 0x13ce <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	28 2f       	mov	r18, r24
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	3d 83       	std	Y+5, r19	; 0x05
    12d6:	2c 83       	std	Y+4, r18	; 0x04
    12d8:	4c 81       	ldd	r20, Y+4	; 0x04
    12da:	5d 81       	ldd	r21, Y+5	; 0x05
    12dc:	41 30       	cpi	r20, 0x01	; 1
    12de:	51 05       	cpc	r21, r1
    12e0:	79 f1       	breq	.+94     	; 0x1340 <GPIO_readPin+0x96>
    12e2:	8c 81       	ldd	r24, Y+4	; 0x04
    12e4:	9d 81       	ldd	r25, Y+5	; 0x05
    12e6:	82 30       	cpi	r24, 0x02	; 2
    12e8:	91 05       	cpc	r25, r1
    12ea:	34 f4       	brge	.+12     	; 0x12f8 <GPIO_readPin+0x4e>
    12ec:	2c 81       	ldd	r18, Y+4	; 0x04
    12ee:	3d 81       	ldd	r19, Y+5	; 0x05
    12f0:	21 15       	cp	r18, r1
    12f2:	31 05       	cpc	r19, r1
    12f4:	69 f0       	breq	.+26     	; 0x1310 <GPIO_readPin+0x66>
    12f6:	6b c0       	rjmp	.+214    	; 0x13ce <GPIO_readPin+0x124>
    12f8:	4c 81       	ldd	r20, Y+4	; 0x04
    12fa:	5d 81       	ldd	r21, Y+5	; 0x05
    12fc:	42 30       	cpi	r20, 0x02	; 2
    12fe:	51 05       	cpc	r21, r1
    1300:	b9 f1       	breq	.+110    	; 0x1370 <GPIO_readPin+0xc6>
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	9d 81       	ldd	r25, Y+5	; 0x05
    1306:	83 30       	cpi	r24, 0x03	; 3
    1308:	91 05       	cpc	r25, r1
    130a:	09 f4       	brne	.+2      	; 0x130e <GPIO_readPin+0x64>
    130c:	49 c0       	rjmp	.+146    	; 0x13a0 <GPIO_readPin+0xf6>
    130e:	5f c0       	rjmp	.+190    	; 0x13ce <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1310:	e9 e3       	ldi	r30, 0x39	; 57
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	80 81       	ld	r24, Z
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	8b 81       	ldd	r24, Y+3	; 0x03
    131c:	88 2f       	mov	r24, r24
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	a9 01       	movw	r20, r18
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <GPIO_readPin+0x7e>
    1324:	55 95       	asr	r21
    1326:	47 95       	ror	r20
    1328:	8a 95       	dec	r24
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <GPIO_readPin+0x7a>
    132c:	ca 01       	movw	r24, r20
    132e:	81 70       	andi	r24, 0x01	; 1
    1330:	90 70       	andi	r25, 0x00	; 0
    1332:	88 23       	and	r24, r24
    1334:	19 f0       	breq	.+6      	; 0x133c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	49 c0       	rjmp	.+146    	; 0x13ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    133c:	19 82       	std	Y+1, r1	; 0x01
    133e:	47 c0       	rjmp	.+142    	; 0x13ce <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1340:	e6 e3       	ldi	r30, 0x36	; 54
    1342:	f0 e0       	ldi	r31, 0x00	; 0
    1344:	80 81       	ld	r24, Z
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	88 2f       	mov	r24, r24
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	a9 01       	movw	r20, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <GPIO_readPin+0xae>
    1354:	55 95       	asr	r21
    1356:	47 95       	ror	r20
    1358:	8a 95       	dec	r24
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <GPIO_readPin+0xaa>
    135c:	ca 01       	movw	r24, r20
    135e:	81 70       	andi	r24, 0x01	; 1
    1360:	90 70       	andi	r25, 0x00	; 0
    1362:	88 23       	and	r24, r24
    1364:	19 f0       	breq	.+6      	; 0x136c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	89 83       	std	Y+1, r24	; 0x01
    136a:	31 c0       	rjmp	.+98     	; 0x13ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    136c:	19 82       	std	Y+1, r1	; 0x01
    136e:	2f c0       	rjmp	.+94     	; 0x13ce <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1370:	e3 e3       	ldi	r30, 0x33	; 51
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	80 81       	ld	r24, Z
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	88 2f       	mov	r24, r24
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	a9 01       	movw	r20, r18
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <GPIO_readPin+0xde>
    1384:	55 95       	asr	r21
    1386:	47 95       	ror	r20
    1388:	8a 95       	dec	r24
    138a:	e2 f7       	brpl	.-8      	; 0x1384 <GPIO_readPin+0xda>
    138c:	ca 01       	movw	r24, r20
    138e:	81 70       	andi	r24, 0x01	; 1
    1390:	90 70       	andi	r25, 0x00	; 0
    1392:	88 23       	and	r24, r24
    1394:	19 f0       	breq	.+6      	; 0x139c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	89 83       	std	Y+1, r24	; 0x01
    139a:	19 c0       	rjmp	.+50     	; 0x13ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    139c:	19 82       	std	Y+1, r1	; 0x01
    139e:	17 c0       	rjmp	.+46     	; 0x13ce <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13a0:	e0 e3       	ldi	r30, 0x30	; 48
    13a2:	f0 e0       	ldi	r31, 0x00	; 0
    13a4:	80 81       	ld	r24, Z
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	88 2f       	mov	r24, r24
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	a9 01       	movw	r20, r18
    13b2:	02 c0       	rjmp	.+4      	; 0x13b8 <GPIO_readPin+0x10e>
    13b4:	55 95       	asr	r21
    13b6:	47 95       	ror	r20
    13b8:	8a 95       	dec	r24
    13ba:	e2 f7       	brpl	.-8      	; 0x13b4 <GPIO_readPin+0x10a>
    13bc:	ca 01       	movw	r24, r20
    13be:	81 70       	andi	r24, 0x01	; 1
    13c0:	90 70       	andi	r25, 0x00	; 0
    13c2:	88 23       	and	r24, r24
    13c4:	19 f0       	breq	.+6      	; 0x13cc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	01 c0       	rjmp	.+2      	; 0x13ce <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    13cc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	00 d0       	rcall	.+0      	; 0x13e6 <GPIO_setupPortDirection+0x6>
    13e6:	00 d0       	rcall	.+0      	; 0x13e8 <GPIO_setupPortDirection+0x8>
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	84 30       	cpi	r24, 0x04	; 4
    13f4:	90 f5       	brcc	.+100    	; 0x145a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	28 2f       	mov	r18, r24
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	3c 83       	std	Y+4, r19	; 0x04
    13fe:	2b 83       	std	Y+3, r18	; 0x03
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	81 30       	cpi	r24, 0x01	; 1
    1406:	91 05       	cpc	r25, r1
    1408:	d1 f0       	breq	.+52     	; 0x143e <GPIO_setupPortDirection+0x5e>
    140a:	2b 81       	ldd	r18, Y+3	; 0x03
    140c:	3c 81       	ldd	r19, Y+4	; 0x04
    140e:	22 30       	cpi	r18, 0x02	; 2
    1410:	31 05       	cpc	r19, r1
    1412:	2c f4       	brge	.+10     	; 0x141e <GPIO_setupPortDirection+0x3e>
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	61 f0       	breq	.+24     	; 0x1434 <GPIO_setupPortDirection+0x54>
    141c:	1e c0       	rjmp	.+60     	; 0x145a <GPIO_setupPortDirection+0x7a>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	22 30       	cpi	r18, 0x02	; 2
    1424:	31 05       	cpc	r19, r1
    1426:	81 f0       	breq	.+32     	; 0x1448 <GPIO_setupPortDirection+0x68>
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	81 f0       	breq	.+32     	; 0x1452 <GPIO_setupPortDirection+0x72>
    1432:	13 c0       	rjmp	.+38     	; 0x145a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1434:	ea e3       	ldi	r30, 0x3A	; 58
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	8a 81       	ldd	r24, Y+2	; 0x02
    143a:	80 83       	st	Z, r24
    143c:	0e c0       	rjmp	.+28     	; 0x145a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    143e:	e7 e3       	ldi	r30, 0x37	; 55
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 83       	st	Z, r24
    1446:	09 c0       	rjmp	.+18     	; 0x145a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1448:	e4 e3       	ldi	r30, 0x34	; 52
    144a:	f0 e0       	ldi	r31, 0x00	; 0
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	80 83       	st	Z, r24
    1450:	04 c0       	rjmp	.+8      	; 0x145a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1452:	e1 e3       	ldi	r30, 0x31	; 49
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	80 83       	st	Z, r24
			break;
		}
	}
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <GPIO_writePort+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_writePort+0x8>
    1470:	cd b7       	in	r28, 0x3d	; 61
    1472:	de b7       	in	r29, 0x3e	; 62
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1478:	89 81       	ldd	r24, Y+1	; 0x01
    147a:	84 30       	cpi	r24, 0x04	; 4
    147c:	90 f5       	brcc	.+100    	; 0x14e2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	3c 83       	std	Y+4, r19	; 0x04
    1486:	2b 83       	std	Y+3, r18	; 0x03
    1488:	8b 81       	ldd	r24, Y+3	; 0x03
    148a:	9c 81       	ldd	r25, Y+4	; 0x04
    148c:	81 30       	cpi	r24, 0x01	; 1
    148e:	91 05       	cpc	r25, r1
    1490:	d1 f0       	breq	.+52     	; 0x14c6 <GPIO_writePort+0x5e>
    1492:	2b 81       	ldd	r18, Y+3	; 0x03
    1494:	3c 81       	ldd	r19, Y+4	; 0x04
    1496:	22 30       	cpi	r18, 0x02	; 2
    1498:	31 05       	cpc	r19, r1
    149a:	2c f4       	brge	.+10     	; 0x14a6 <GPIO_writePort+0x3e>
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 f0       	breq	.+24     	; 0x14bc <GPIO_writePort+0x54>
    14a4:	1e c0       	rjmp	.+60     	; 0x14e2 <GPIO_writePort+0x7a>
    14a6:	2b 81       	ldd	r18, Y+3	; 0x03
    14a8:	3c 81       	ldd	r19, Y+4	; 0x04
    14aa:	22 30       	cpi	r18, 0x02	; 2
    14ac:	31 05       	cpc	r19, r1
    14ae:	81 f0       	breq	.+32     	; 0x14d0 <GPIO_writePort+0x68>
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	83 30       	cpi	r24, 0x03	; 3
    14b6:	91 05       	cpc	r25, r1
    14b8:	81 f0       	breq	.+32     	; 0x14da <GPIO_writePort+0x72>
    14ba:	13 c0       	rjmp	.+38     	; 0x14e2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14bc:	eb e3       	ldi	r30, 0x3B	; 59
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	80 83       	st	Z, r24
    14c4:	0e c0       	rjmp	.+28     	; 0x14e2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    14c6:	e8 e3       	ldi	r30, 0x38	; 56
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8a 81       	ldd	r24, Y+2	; 0x02
    14cc:	80 83       	st	Z, r24
    14ce:	09 c0       	rjmp	.+18     	; 0x14e2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    14d0:	e5 e3       	ldi	r30, 0x35	; 53
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	80 83       	st	Z, r24
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    14da:	e2 e3       	ldi	r30, 0x32	; 50
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	8a 81       	ldd	r24, Y+2	; 0x02
    14e0:	80 83       	st	Z, r24
			break;
		}
	}
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	cf 91       	pop	r28
    14ec:	df 91       	pop	r29
    14ee:	08 95       	ret

000014f0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    14f0:	df 93       	push	r29
    14f2:	cf 93       	push	r28
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <GPIO_readPort+0x6>
    14f6:	00 d0       	rcall	.+0      	; 0x14f8 <GPIO_readPort+0x8>
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    14fe:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	84 30       	cpi	r24, 0x04	; 4
    1504:	90 f5       	brcc	.+100    	; 0x156a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3c 83       	std	Y+4, r19	; 0x04
    150e:	2b 83       	std	Y+3, r18	; 0x03
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	91 05       	cpc	r25, r1
    1518:	d1 f0       	breq	.+52     	; 0x154e <GPIO_readPort+0x5e>
    151a:	2b 81       	ldd	r18, Y+3	; 0x03
    151c:	3c 81       	ldd	r19, Y+4	; 0x04
    151e:	22 30       	cpi	r18, 0x02	; 2
    1520:	31 05       	cpc	r19, r1
    1522:	2c f4       	brge	.+10     	; 0x152e <GPIO_readPort+0x3e>
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	9c 81       	ldd	r25, Y+4	; 0x04
    1528:	00 97       	sbiw	r24, 0x00	; 0
    152a:	61 f0       	breq	.+24     	; 0x1544 <GPIO_readPort+0x54>
    152c:	1e c0       	rjmp	.+60     	; 0x156a <GPIO_readPort+0x7a>
    152e:	2b 81       	ldd	r18, Y+3	; 0x03
    1530:	3c 81       	ldd	r19, Y+4	; 0x04
    1532:	22 30       	cpi	r18, 0x02	; 2
    1534:	31 05       	cpc	r19, r1
    1536:	81 f0       	breq	.+32     	; 0x1558 <GPIO_readPort+0x68>
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	83 30       	cpi	r24, 0x03	; 3
    153e:	91 05       	cpc	r25, r1
    1540:	81 f0       	breq	.+32     	; 0x1562 <GPIO_readPort+0x72>
    1542:	13 c0       	rjmp	.+38     	; 0x156a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1544:	e9 e3       	ldi	r30, 0x39	; 57
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	89 83       	std	Y+1, r24	; 0x01
    154c:	0e c0       	rjmp	.+28     	; 0x156a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    154e:	e6 e3       	ldi	r30, 0x36	; 54
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	09 c0       	rjmp	.+18     	; 0x156a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1558:	e3 e3       	ldi	r30, 0x33	; 51
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	89 83       	std	Y+1, r24	; 0x01
    1560:	04 c0       	rjmp	.+8      	; 0x156a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1562:	e0 e3       	ldi	r30, 0x30	; 48
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <main>:
extern uint8 key_check[PASS_SIZE];
extern uint8 val;
extern uint8 pass_flag;

//uint8 compare_Pass(void);
int main(void) {
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	cd b7       	in	r28, 0x3d	; 61
    1584:	de b7       	in	r29, 0x3e	; 62
    1586:	c2 56       	subi	r28, 0x62	; 98
    1588:	d0 40       	sbci	r29, 0x00	; 0
    158a:	0f b6       	in	r0, 0x3f	; 63
    158c:	f8 94       	cli
    158e:	de bf       	out	0x3e, r29	; 62
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	cd bf       	out	0x3d, r28	; 61

	TWI_init(&TWI_configerations);
    1594:	80 e7       	ldi	r24, 0x70	; 112
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 2a 13 	call	0x2654	; 0x2654 <TWI_init>
	UART_init(&UART_configerations);
    159c:	82 e7       	ldi	r24, 0x72	; 114
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 b1 13 	call	0x2762	; 0x2762 <UART_init>
	DcMotor_Init();
    15a4:	0e 94 61 11 	call	0x22c2	; 0x22c2 <DcMotor_Init>
	Buzzer_init();
    15a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Buzzer_init>
	while (UART_recieveByte() != MC2_READY) {
    15ac:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    15b0:	80 31       	cpi	r24, 0x10	; 16
    15b2:	e1 f7       	brne	.-8      	; 0x15ac <main+0x32>
    15b4:	1e c2       	rjmp	.+1084   	; 0x19f2 <main+0x478>
	}

	while (pass_flag != 0) {

		for (i = 0; i < PASS_SIZE; i++) {
    15b6:	10 92 7e 00 	sts	0x007E, r1
    15ba:	d6 c0       	rjmp	.+428    	; 0x1768 <main+0x1ee>
			key[i] = UART_recieveByte();
    15bc:	80 91 7e 00 	lds	r24, 0x007E
    15c0:	08 2f       	mov	r16, r24
    15c2:	10 e0       	ldi	r17, 0x00	; 0
    15c4:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    15c8:	f8 01       	movw	r30, r16
    15ca:	ec 57       	subi	r30, 0x7C	; 124
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
			EEPROM_writeByte(PASS_ADRESS + i, key[i]);
    15d0:	80 91 7e 00 	lds	r24, 0x007E
    15d4:	88 2f       	mov	r24, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	8f 5e       	subi	r24, 0xEF	; 239
    15da:	9c 4f       	sbci	r25, 0xFC	; 252
    15dc:	ac 01       	movw	r20, r24
    15de:	80 91 7e 00 	lds	r24, 0x007E
    15e2:	88 2f       	mov	r24, r24
    15e4:	90 e0       	ldi	r25, 0x00	; 0
    15e6:	fc 01       	movw	r30, r24
    15e8:	ec 57       	subi	r30, 0x7C	; 124
    15ea:	ff 4f       	sbci	r31, 0xFF	; 255
    15ec:	20 81       	ld	r18, Z
    15ee:	ca 01       	movw	r24, r20
    15f0:	62 2f       	mov	r22, r18
    15f2:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    15f6:	fe 01       	movw	r30, r28
    15f8:	e1 5a       	subi	r30, 0xA1	; 161
    15fa:	ff 4f       	sbci	r31, 0xFF	; 255
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	a0 e2       	ldi	r26, 0x20	; 32
    1602:	b1 e4       	ldi	r27, 0x41	; 65
    1604:	80 83       	st	Z, r24
    1606:	91 83       	std	Z+1, r25	; 0x01
    1608:	a2 83       	std	Z+2, r26	; 0x02
    160a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    160c:	8e 01       	movw	r16, r28
    160e:	05 5a       	subi	r16, 0xA5	; 165
    1610:	1f 4f       	sbci	r17, 0xFF	; 255
    1612:	fe 01       	movw	r30, r28
    1614:	e1 5a       	subi	r30, 0xA1	; 161
    1616:	ff 4f       	sbci	r31, 0xFF	; 255
    1618:	60 81       	ld	r22, Z
    161a:	71 81       	ldd	r23, Z+1	; 0x01
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	4a ef       	ldi	r20, 0xFA	; 250
    1626:	54 e4       	ldi	r21, 0x44	; 68
    1628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	f8 01       	movw	r30, r16
    1632:	80 83       	st	Z, r24
    1634:	91 83       	std	Z+1, r25	; 0x01
    1636:	a2 83       	std	Z+2, r26	; 0x02
    1638:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    163a:	fe 01       	movw	r30, r28
    163c:	e5 5a       	subi	r30, 0xA5	; 165
    163e:	ff 4f       	sbci	r31, 0xFF	; 255
    1640:	60 81       	ld	r22, Z
    1642:	71 81       	ldd	r23, Z+1	; 0x01
    1644:	82 81       	ldd	r24, Z+2	; 0x02
    1646:	93 81       	ldd	r25, Z+3	; 0x03
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e8       	ldi	r20, 0x80	; 128
    164e:	5f e3       	ldi	r21, 0x3F	; 63
    1650:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1654:	88 23       	and	r24, r24
    1656:	44 f4       	brge	.+16     	; 0x1668 <main+0xee>
		__ticks = 1;
    1658:	fe 01       	movw	r30, r28
    165a:	e7 5a       	subi	r30, 0xA7	; 167
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	91 83       	std	Z+1, r25	; 0x01
    1664:	80 83       	st	Z, r24
    1666:	64 c0       	rjmp	.+200    	; 0x1730 <main+0x1b6>
	else if (__tmp > 65535)
    1668:	fe 01       	movw	r30, r28
    166a:	e5 5a       	subi	r30, 0xA5	; 165
    166c:	ff 4f       	sbci	r31, 0xFF	; 255
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	0c f0       	brlt	.+2      	; 0x1688 <main+0x10e>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <main+0x194>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1688:	fe 01       	movw	r30, r28
    168a:	e1 5a       	subi	r30, 0xA1	; 161
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	60 81       	ld	r22, Z
    1690:	71 81       	ldd	r23, Z+1	; 0x01
    1692:	82 81       	ldd	r24, Z+2	; 0x02
    1694:	93 81       	ldd	r25, Z+3	; 0x03
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	40 e2       	ldi	r20, 0x20	; 32
    169c:	51 e4       	ldi	r21, 0x41	; 65
    169e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 01       	movw	r16, r28
    16a8:	07 5a       	subi	r16, 0xA7	; 167
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	bc 01       	movw	r22, r24
    16ae:	cd 01       	movw	r24, r26
    16b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16b4:	dc 01       	movw	r26, r24
    16b6:	cb 01       	movw	r24, r22
    16b8:	f8 01       	movw	r30, r16
    16ba:	91 83       	std	Z+1, r25	; 0x01
    16bc:	80 83       	st	Z, r24
    16be:	1f c0       	rjmp	.+62     	; 0x16fe <main+0x184>
    16c0:	fe 01       	movw	r30, r28
    16c2:	e9 5a       	subi	r30, 0xA9	; 169
    16c4:	ff 4f       	sbci	r31, 0xFF	; 255
    16c6:	88 ec       	ldi	r24, 0xC8	; 200
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	91 83       	std	Z+1, r25	; 0x01
    16cc:	80 83       	st	Z, r24
    16ce:	fe 01       	movw	r30, r28
    16d0:	e9 5a       	subi	r30, 0xA9	; 169
    16d2:	ff 4f       	sbci	r31, 0xFF	; 255
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <main+0x15e>
    16dc:	fe 01       	movw	r30, r28
    16de:	e9 5a       	subi	r30, 0xA9	; 169
    16e0:	ff 4f       	sbci	r31, 0xFF	; 255
    16e2:	91 83       	std	Z+1, r25	; 0x01
    16e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16e6:	de 01       	movw	r26, r28
    16e8:	a7 5a       	subi	r26, 0xA7	; 167
    16ea:	bf 4f       	sbci	r27, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	e7 5a       	subi	r30, 0xA7	; 167
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	80 81       	ld	r24, Z
    16f4:	91 81       	ldd	r25, Z+1	; 0x01
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	11 96       	adiw	r26, 0x01	; 1
    16fa:	9c 93       	st	X, r25
    16fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fe:	fe 01       	movw	r30, r28
    1700:	e7 5a       	subi	r30, 0xA7	; 167
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	80 81       	ld	r24, Z
    1706:	91 81       	ldd	r25, Z+1	; 0x01
    1708:	00 97       	sbiw	r24, 0x00	; 0
    170a:	d1 f6       	brne	.-76     	; 0x16c0 <main+0x146>
    170c:	28 c0       	rjmp	.+80     	; 0x175e <main+0x1e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170e:	8e 01       	movw	r16, r28
    1710:	07 5a       	subi	r16, 0xA7	; 167
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	fe 01       	movw	r30, r28
    1716:	e5 5a       	subi	r30, 0xA5	; 165
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	f8 01       	movw	r30, r16
    172c:	91 83       	std	Z+1, r25	; 0x01
    172e:	80 83       	st	Z, r24
    1730:	de 01       	movw	r26, r28
    1732:	ab 5a       	subi	r26, 0xAB	; 171
    1734:	bf 4f       	sbci	r27, 0xFF	; 255
    1736:	fe 01       	movw	r30, r28
    1738:	e7 5a       	subi	r30, 0xA7	; 167
    173a:	ff 4f       	sbci	r31, 0xFF	; 255
    173c:	80 81       	ld	r24, Z
    173e:	91 81       	ldd	r25, Z+1	; 0x01
    1740:	11 96       	adiw	r26, 0x01	; 1
    1742:	9c 93       	st	X, r25
    1744:	8e 93       	st	-X, r24
    1746:	fe 01       	movw	r30, r28
    1748:	eb 5a       	subi	r30, 0xAB	; 171
    174a:	ff 4f       	sbci	r31, 0xFF	; 255
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	01 97       	sbiw	r24, 0x01	; 1
    1752:	f1 f7       	brne	.-4      	; 0x1750 <main+0x1d6>
    1754:	fe 01       	movw	r30, r28
    1756:	eb 5a       	subi	r30, 0xAB	; 171
    1758:	ff 4f       	sbci	r31, 0xFF	; 255
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
	while (UART_recieveByte() != MC2_READY) {
	}

	while (pass_flag != 0) {

		for (i = 0; i < PASS_SIZE; i++) {
    175e:	80 91 7e 00 	lds	r24, 0x007E
    1762:	8f 5f       	subi	r24, 0xFF	; 255
    1764:	80 93 7e 00 	sts	0x007E, r24
    1768:	80 91 7e 00 	lds	r24, 0x007E
    176c:	85 30       	cpi	r24, 0x05	; 5
    176e:	08 f4       	brcc	.+2      	; 0x1772 <main+0x1f8>
    1770:	25 cf       	rjmp	.-438    	; 0x15bc <main+0x42>
			key[i] = UART_recieveByte();
			EEPROM_writeByte(PASS_ADRESS + i, key[i]);
			_delay_ms(10);
		}

		for (i = 0; i < PASS_SIZE; i++) {
    1772:	10 92 7e 00 	sts	0x007E, r1
    1776:	da c0       	rjmp	.+436    	; 0x192c <main+0x3b2>
			while (UART_recieveByte() != MC2_READY) {
    1778:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    177c:	80 31       	cpi	r24, 0x10	; 16
    177e:	e1 f7       	brne	.-8      	; 0x1778 <main+0x1fe>
			}
			key_check[i] = UART_recieveByte();
    1780:	80 91 7e 00 	lds	r24, 0x007E
    1784:	08 2f       	mov	r16, r24
    1786:	10 e0       	ldi	r17, 0x00	; 0
    1788:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    178c:	f8 01       	movw	r30, r16
    178e:	e1 58       	subi	r30, 0x81	; 129
    1790:	ff 4f       	sbci	r31, 0xFF	; 255
    1792:	80 83       	st	Z, r24
			EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
    1794:	80 91 7e 00 	lds	r24, 0x007E
    1798:	88 2f       	mov	r24, r24
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	8a 5e       	subi	r24, 0xEA	; 234
    179e:	9c 4f       	sbci	r25, 0xFC	; 252
    17a0:	ac 01       	movw	r20, r24
    17a2:	80 91 7e 00 	lds	r24, 0x007E
    17a6:	88 2f       	mov	r24, r24
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	fc 01       	movw	r30, r24
    17ac:	e1 58       	subi	r30, 0x81	; 129
    17ae:	ff 4f       	sbci	r31, 0xFF	; 255
    17b0:	20 81       	ld	r18, Z
    17b2:	ca 01       	movw	r24, r20
    17b4:	62 2f       	mov	r22, r18
    17b6:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    17ba:	fe 01       	movw	r30, r28
    17bc:	ef 5a       	subi	r30, 0xAF	; 175
    17be:	ff 4f       	sbci	r31, 0xFF	; 255
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	a0 e2       	ldi	r26, 0x20	; 32
    17c6:	b1 e4       	ldi	r27, 0x41	; 65
    17c8:	80 83       	st	Z, r24
    17ca:	91 83       	std	Z+1, r25	; 0x01
    17cc:	a2 83       	std	Z+2, r26	; 0x02
    17ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17d0:	8e 01       	movw	r16, r28
    17d2:	03 5b       	subi	r16, 0xB3	; 179
    17d4:	1f 4f       	sbci	r17, 0xFF	; 255
    17d6:	fe 01       	movw	r30, r28
    17d8:	ef 5a       	subi	r30, 0xAF	; 175
    17da:	ff 4f       	sbci	r31, 0xFF	; 255
    17dc:	60 81       	ld	r22, Z
    17de:	71 81       	ldd	r23, Z+1	; 0x01
    17e0:	82 81       	ldd	r24, Z+2	; 0x02
    17e2:	93 81       	ldd	r25, Z+3	; 0x03
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	f8 01       	movw	r30, r16
    17f6:	80 83       	st	Z, r24
    17f8:	91 83       	std	Z+1, r25	; 0x01
    17fa:	a2 83       	std	Z+2, r26	; 0x02
    17fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    17fe:	fe 01       	movw	r30, r28
    1800:	e3 5b       	subi	r30, 0xB3	; 179
    1802:	ff 4f       	sbci	r31, 0xFF	; 255
    1804:	60 81       	ld	r22, Z
    1806:	71 81       	ldd	r23, Z+1	; 0x01
    1808:	82 81       	ldd	r24, Z+2	; 0x02
    180a:	93 81       	ldd	r25, Z+3	; 0x03
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	40 e8       	ldi	r20, 0x80	; 128
    1812:	5f e3       	ldi	r21, 0x3F	; 63
    1814:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1818:	88 23       	and	r24, r24
    181a:	44 f4       	brge	.+16     	; 0x182c <main+0x2b2>
		__ticks = 1;
    181c:	fe 01       	movw	r30, r28
    181e:	e5 5b       	subi	r30, 0xB5	; 181
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	91 83       	std	Z+1, r25	; 0x01
    1828:	80 83       	st	Z, r24
    182a:	64 c0       	rjmp	.+200    	; 0x18f4 <main+0x37a>
	else if (__tmp > 65535)
    182c:	fe 01       	movw	r30, r28
    182e:	e3 5b       	subi	r30, 0xB3	; 179
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	0c f0       	brlt	.+2      	; 0x184c <main+0x2d2>
    184a:	43 c0       	rjmp	.+134    	; 0x18d2 <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184c:	fe 01       	movw	r30, r28
    184e:	ef 5a       	subi	r30, 0xAF	; 175
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	60 81       	ld	r22, Z
    1854:	71 81       	ldd	r23, Z+1	; 0x01
    1856:	82 81       	ldd	r24, Z+2	; 0x02
    1858:	93 81       	ldd	r25, Z+3	; 0x03
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	8e 01       	movw	r16, r28
    186c:	05 5b       	subi	r16, 0xB5	; 181
    186e:	1f 4f       	sbci	r17, 0xFF	; 255
    1870:	bc 01       	movw	r22, r24
    1872:	cd 01       	movw	r24, r26
    1874:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1878:	dc 01       	movw	r26, r24
    187a:	cb 01       	movw	r24, r22
    187c:	f8 01       	movw	r30, r16
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
    1882:	1f c0       	rjmp	.+62     	; 0x18c2 <main+0x348>
    1884:	fe 01       	movw	r30, r28
    1886:	e7 5b       	subi	r30, 0xB7	; 183
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	88 ec       	ldi	r24, 0xC8	; 200
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	fe 01       	movw	r30, r28
    1894:	e7 5b       	subi	r30, 0xB7	; 183
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	80 81       	ld	r24, Z
    189a:	91 81       	ldd	r25, Z+1	; 0x01
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	f1 f7       	brne	.-4      	; 0x189c <main+0x322>
    18a0:	fe 01       	movw	r30, r28
    18a2:	e7 5b       	subi	r30, 0xB7	; 183
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	91 83       	std	Z+1, r25	; 0x01
    18a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18aa:	de 01       	movw	r26, r28
    18ac:	a5 5b       	subi	r26, 0xB5	; 181
    18ae:	bf 4f       	sbci	r27, 0xFF	; 255
    18b0:	fe 01       	movw	r30, r28
    18b2:	e5 5b       	subi	r30, 0xB5	; 181
    18b4:	ff 4f       	sbci	r31, 0xFF	; 255
    18b6:	80 81       	ld	r24, Z
    18b8:	91 81       	ldd	r25, Z+1	; 0x01
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	11 96       	adiw	r26, 0x01	; 1
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18c2:	fe 01       	movw	r30, r28
    18c4:	e5 5b       	subi	r30, 0xB5	; 181
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	80 81       	ld	r24, Z
    18ca:	91 81       	ldd	r25, Z+1	; 0x01
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	d1 f6       	brne	.-76     	; 0x1884 <main+0x30a>
    18d0:	28 c0       	rjmp	.+80     	; 0x1922 <main+0x3a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18d2:	8e 01       	movw	r16, r28
    18d4:	05 5b       	subi	r16, 0xB5	; 181
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	fe 01       	movw	r30, r28
    18da:	e3 5b       	subi	r30, 0xB3	; 179
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	60 81       	ld	r22, Z
    18e0:	71 81       	ldd	r23, Z+1	; 0x01
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ea:	dc 01       	movw	r26, r24
    18ec:	cb 01       	movw	r24, r22
    18ee:	f8 01       	movw	r30, r16
    18f0:	91 83       	std	Z+1, r25	; 0x01
    18f2:	80 83       	st	Z, r24
    18f4:	de 01       	movw	r26, r28
    18f6:	a9 5b       	subi	r26, 0xB9	; 185
    18f8:	bf 4f       	sbci	r27, 0xFF	; 255
    18fa:	fe 01       	movw	r30, r28
    18fc:	e5 5b       	subi	r30, 0xB5	; 181
    18fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1900:	80 81       	ld	r24, Z
    1902:	91 81       	ldd	r25, Z+1	; 0x01
    1904:	11 96       	adiw	r26, 0x01	; 1
    1906:	9c 93       	st	X, r25
    1908:	8e 93       	st	-X, r24
    190a:	fe 01       	movw	r30, r28
    190c:	e9 5b       	subi	r30, 0xB9	; 185
    190e:	ff 4f       	sbci	r31, 0xFF	; 255
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	f1 f7       	brne	.-4      	; 0x1914 <main+0x39a>
    1918:	fe 01       	movw	r30, r28
    191a:	e9 5b       	subi	r30, 0xB9	; 185
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	91 83       	std	Z+1, r25	; 0x01
    1920:	80 83       	st	Z, r24
			key[i] = UART_recieveByte();
			EEPROM_writeByte(PASS_ADRESS + i, key[i]);
			_delay_ms(10);
		}

		for (i = 0; i < PASS_SIZE; i++) {
    1922:	80 91 7e 00 	lds	r24, 0x007E
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 93 7e 00 	sts	0x007E, r24
    192c:	80 91 7e 00 	lds	r24, 0x007E
    1930:	85 30       	cpi	r24, 0x05	; 5
    1932:	08 f4       	brcc	.+2      	; 0x1936 <main+0x3bc>
    1934:	21 cf       	rjmp	.-446    	; 0x1778 <main+0x1fe>
			key_check[i] = UART_recieveByte();
			EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
			_delay_ms(10);
		}

		for (i = 0; i < PASS_SIZE; i++) {
    1936:	10 92 7e 00 	sts	0x007E, r1
    193a:	42 c0       	rjmp	.+132    	; 0x19c0 <main+0x446>
			EEPROM_readByte(PASS_ADRESS + i, &key[i]);
    193c:	80 91 7e 00 	lds	r24, 0x007E
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	8f 5e       	subi	r24, 0xEF	; 239
    1946:	9c 4f       	sbci	r25, 0xFC	; 252
    1948:	ac 01       	movw	r20, r24
    194a:	80 91 7e 00 	lds	r24, 0x007E
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	9c 01       	movw	r18, r24
    1954:	2c 57       	subi	r18, 0x7C	; 124
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
    1958:	ca 01       	movw	r24, r20
    195a:	b9 01       	movw	r22, r18
    195c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
			EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
    1960:	80 91 7e 00 	lds	r24, 0x007E
    1964:	88 2f       	mov	r24, r24
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	8a 5e       	subi	r24, 0xEA	; 234
    196a:	9c 4f       	sbci	r25, 0xFC	; 252
    196c:	ac 01       	movw	r20, r24
    196e:	80 91 7e 00 	lds	r24, 0x007E
    1972:	88 2f       	mov	r24, r24
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9c 01       	movw	r18, r24
    1978:	21 58       	subi	r18, 0x81	; 129
    197a:	3f 4f       	sbci	r19, 0xFF	; 255
    197c:	ca 01       	movw	r24, r20
    197e:	b9 01       	movw	r22, r18
    1980:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
			if (key[i] == key_check[i]) {
    1984:	80 91 7e 00 	lds	r24, 0x007E
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	fc 01       	movw	r30, r24
    198e:	ec 57       	subi	r30, 0x7C	; 124
    1990:	ff 4f       	sbci	r31, 0xFF	; 255
    1992:	20 81       	ld	r18, Z
    1994:	80 91 7e 00 	lds	r24, 0x007E
    1998:	88 2f       	mov	r24, r24
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	fc 01       	movw	r30, r24
    199e:	e1 58       	subi	r30, 0x81	; 129
    19a0:	ff 4f       	sbci	r31, 0xFF	; 255
    19a2:	80 81       	ld	r24, Z
    19a4:	28 17       	cp	r18, r24
    19a6:	49 f4       	brne	.+18     	; 0x19ba <main+0x440>

				val = 1;
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	80 93 68 00 	sts	0x0068, r24
			key_check[i] = UART_recieveByte();
			EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
			_delay_ms(10);
		}

		for (i = 0; i < PASS_SIZE; i++) {
    19ae:	80 91 7e 00 	lds	r24, 0x007E
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	80 93 7e 00 	sts	0x007E, r24
    19b8:	03 c0       	rjmp	.+6      	; 0x19c0 <main+0x446>
			EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
			if (key[i] == key_check[i]) {

				val = 1;
			} else {
				val = 0;
    19ba:	10 92 68 00 	sts	0x0068, r1
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <main+0x450>
			key_check[i] = UART_recieveByte();
			EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
			_delay_ms(10);
		}

		for (i = 0; i < PASS_SIZE; i++) {
    19c0:	80 91 7e 00 	lds	r24, 0x007E
    19c4:	85 30       	cpi	r24, 0x05	; 5
    19c6:	08 f4       	brcc	.+2      	; 0x19ca <main+0x450>
    19c8:	b9 cf       	rjmp	.-142    	; 0x193c <main+0x3c2>
				val = 0;
				break;
			}

		}
		while (UART_recieveByte() != MC2_READY) {
    19ca:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    19ce:	80 31       	cpi	r24, 0x10	; 16
    19d0:	e1 f7       	brne	.-8      	; 0x19ca <main+0x450>
		}
		UART_sendByte(val);
    19d2:	80 91 68 00 	lds	r24, 0x0068
    19d6:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>
		if (val == 1) {
    19da:	80 91 68 00 	lds	r24, 0x0068
    19de:	81 30       	cpi	r24, 0x01	; 1
    19e0:	41 f4       	brne	.+16     	; 0x19f2 <main+0x478>
			while (UART_recieveByte() != MC2_READY) {
    19e2:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    19e6:	80 31       	cpi	r24, 0x10	; 16
    19e8:	e1 f7       	brne	.-8      	; 0x19e2 <main+0x468>
			}
			pass_flag = UART_recieveByte();
    19ea:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    19ee:	80 93 69 00 	sts	0x0069, r24
	DcMotor_Init();
	Buzzer_init();
	while (UART_recieveByte() != MC2_READY) {
	}

	while (pass_flag != 0) {
    19f2:	80 91 69 00 	lds	r24, 0x0069
    19f6:	88 23       	and	r24, r24
    19f8:	09 f0       	breq	.+2      	; 0x19fc <main+0x482>
    19fa:	dd cd       	rjmp	.-1094   	; 0x15b6 <main+0x3c>
			}
			pass_flag = UART_recieveByte();
		}
	}
	for (;;) {
		while (UART_recieveByte() != MC2_READY) {
    19fc:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1a00:	80 31       	cpi	r24, 0x10	; 16
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <main+0x482>
		}
		if (UART_recieveByte() == '+') {
    1a04:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1a08:	8b 32       	cpi	r24, 0x2B	; 43
    1a0a:	09 f0       	breq	.+2      	; 0x1a0e <main+0x494>
    1a0c:	a9 c1       	rjmp	.+850    	; 0x1d60 <main+0x7e6>

			for (i = 0; i < PASS_SIZE; i++) {
    1a0e:	10 92 7e 00 	sts	0x007E, r1
    1a12:	ab c0       	rjmp	.+342    	; 0x1b6a <main+0x5f0>
				while (UART_recieveByte() != MC2_READY) {
    1a14:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1a18:	80 31       	cpi	r24, 0x10	; 16
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <main+0x49a>
				}
				key_check[i] = UART_recieveByte();
    1a1c:	80 91 7e 00 	lds	r24, 0x007E
    1a20:	08 2f       	mov	r16, r24
    1a22:	10 e0       	ldi	r17, 0x00	; 0
    1a24:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1a28:	f8 01       	movw	r30, r16
    1a2a:	e1 58       	subi	r30, 0x81	; 129
    1a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2e:	80 83       	st	Z, r24
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
    1a30:	80 91 7e 00 	lds	r24, 0x007E
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	8a 5e       	subi	r24, 0xEA	; 234
    1a3a:	9c 4f       	sbci	r25, 0xFC	; 252
    1a3c:	ac 01       	movw	r20, r24
    1a3e:	80 91 7e 00 	lds	r24, 0x007E
    1a42:	88 2f       	mov	r24, r24
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	fc 01       	movw	r30, r24
    1a48:	e1 58       	subi	r30, 0x81	; 129
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	20 81       	ld	r18, Z
    1a4e:	ca 01       	movw	r24, r20
    1a50:	62 2f       	mov	r22, r18
    1a52:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1a56:	fe 01       	movw	r30, r28
    1a58:	ed 5b       	subi	r30, 0xBD	; 189
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e2       	ldi	r26, 0x20	; 32
    1a62:	b1 e4       	ldi	r27, 0x41	; 65
    1a64:	80 83       	st	Z, r24
    1a66:	91 83       	std	Z+1, r25	; 0x01
    1a68:	a2 83       	std	Z+2, r26	; 0x02
    1a6a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	8e 01       	movw	r16, r28
    1a6e:	01 5c       	subi	r16, 0xC1	; 193
    1a70:	1f 4f       	sbci	r17, 0xFF	; 255
    1a72:	fe 01       	movw	r30, r28
    1a74:	ed 5b       	subi	r30, 0xBD	; 189
    1a76:	ff 4f       	sbci	r31, 0xFF	; 255
    1a78:	60 81       	ld	r22, Z
    1a7a:	71 81       	ldd	r23, Z+1	; 0x01
    1a7c:	82 81       	ldd	r24, Z+2	; 0x02
    1a7e:	93 81       	ldd	r25, Z+3	; 0x03
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	4a ef       	ldi	r20, 0xFA	; 250
    1a86:	54 e4       	ldi	r21, 0x44	; 68
    1a88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	80 83       	st	Z, r24
    1a94:	91 83       	std	Z+1, r25	; 0x01
    1a96:	a2 83       	std	Z+2, r26	; 0x02
    1a98:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a9a:	fe 01       	movw	r30, r28
    1a9c:	ff 96       	adiw	r30, 0x3f	; 63
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e8       	ldi	r20, 0x80	; 128
    1aac:	5f e3       	ldi	r21, 0x3F	; 63
    1aae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ab2:	88 23       	and	r24, r24
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <main+0x546>
		__ticks = 1;
    1ab6:	81 e0       	ldi	r24, 0x01	; 1
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9e af       	std	Y+62, r25	; 0x3e
    1abc:	8d af       	std	Y+61, r24	; 0x3d
    1abe:	46 c0       	rjmp	.+140    	; 0x1b4c <main+0x5d2>
	else if (__tmp > 65535)
    1ac0:	fe 01       	movw	r30, r28
    1ac2:	ff 96       	adiw	r30, 0x3f	; 63
    1ac4:	60 81       	ld	r22, Z
    1ac6:	71 81       	ldd	r23, Z+1	; 0x01
    1ac8:	82 81       	ldd	r24, Z+2	; 0x02
    1aca:	93 81       	ldd	r25, Z+3	; 0x03
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	64 f5       	brge	.+88     	; 0x1b34 <main+0x5ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	fe 01       	movw	r30, r28
    1ade:	ed 5b       	subi	r30, 0xBD	; 189
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e2       	ldi	r20, 0x20	; 32
    1af0:	51 e4       	ldi	r21, 0x41	; 65
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	bc 01       	movw	r22, r24
    1afc:	cd 01       	movw	r24, r26
    1afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b02:	dc 01       	movw	r26, r24
    1b04:	cb 01       	movw	r24, r22
    1b06:	9e af       	std	Y+62, r25	; 0x3e
    1b08:	8d af       	std	Y+61, r24	; 0x3d
    1b0a:	0f c0       	rjmp	.+30     	; 0x1b2a <main+0x5b0>
    1b0c:	88 ec       	ldi	r24, 0xC8	; 200
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	9c af       	std	Y+60, r25	; 0x3c
    1b12:	8b af       	std	Y+59, r24	; 0x3b
    1b14:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b16:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b18:	01 97       	sbiw	r24, 0x01	; 1
    1b1a:	f1 f7       	brne	.-4      	; 0x1b18 <main+0x59e>
    1b1c:	9c af       	std	Y+60, r25	; 0x3c
    1b1e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b24:	01 97       	sbiw	r24, 0x01	; 1
    1b26:	9e af       	std	Y+62, r25	; 0x3e
    1b28:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b2c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	69 f7       	brne	.-38     	; 0x1b0c <main+0x592>
    1b32:	16 c0       	rjmp	.+44     	; 0x1b60 <main+0x5e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b34:	fe 01       	movw	r30, r28
    1b36:	ff 96       	adiw	r30, 0x3f	; 63
    1b38:	60 81       	ld	r22, Z
    1b3a:	71 81       	ldd	r23, Z+1	; 0x01
    1b3c:	82 81       	ldd	r24, Z+2	; 0x02
    1b3e:	93 81       	ldd	r25, Z+3	; 0x03
    1b40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	9e af       	std	Y+62, r25	; 0x3e
    1b4a:	8d af       	std	Y+61, r24	; 0x3d
    1b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b50:	9a af       	std	Y+58, r25	; 0x3a
    1b52:	89 af       	std	Y+57, r24	; 0x39
    1b54:	89 ad       	ldd	r24, Y+57	; 0x39
    1b56:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b58:	01 97       	sbiw	r24, 0x01	; 1
    1b5a:	f1 f7       	brne	.-4      	; 0x1b58 <main+0x5de>
    1b5c:	9a af       	std	Y+58, r25	; 0x3a
    1b5e:	89 af       	std	Y+57, r24	; 0x39
	for (;;) {
		while (UART_recieveByte() != MC2_READY) {
		}
		if (UART_recieveByte() == '+') {

			for (i = 0; i < PASS_SIZE; i++) {
    1b60:	80 91 7e 00 	lds	r24, 0x007E
    1b64:	8f 5f       	subi	r24, 0xFF	; 255
    1b66:	80 93 7e 00 	sts	0x007E, r24
    1b6a:	80 91 7e 00 	lds	r24, 0x007E
    1b6e:	85 30       	cpi	r24, 0x05	; 5
    1b70:	08 f4       	brcc	.+2      	; 0x1b74 <main+0x5fa>
    1b72:	50 cf       	rjmp	.-352    	; 0x1a14 <main+0x49a>
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
    1b74:	10 92 7e 00 	sts	0x007E, r1
    1b78:	42 c0       	rjmp	.+132    	; 0x1bfe <main+0x684>
				EEPROM_readByte(PASS_ADRESS + i, &key[i]);
    1b7a:	80 91 7e 00 	lds	r24, 0x007E
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	8f 5e       	subi	r24, 0xEF	; 239
    1b84:	9c 4f       	sbci	r25, 0xFC	; 252
    1b86:	ac 01       	movw	r20, r24
    1b88:	80 91 7e 00 	lds	r24, 0x007E
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	9c 01       	movw	r18, r24
    1b92:	2c 57       	subi	r18, 0x7C	; 124
    1b94:	3f 4f       	sbci	r19, 0xFF	; 255
    1b96:	ca 01       	movw	r24, r20
    1b98:	b9 01       	movw	r22, r18
    1b9a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
				EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
    1b9e:	80 91 7e 00 	lds	r24, 0x007E
    1ba2:	88 2f       	mov	r24, r24
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	8a 5e       	subi	r24, 0xEA	; 234
    1ba8:	9c 4f       	sbci	r25, 0xFC	; 252
    1baa:	ac 01       	movw	r20, r24
    1bac:	80 91 7e 00 	lds	r24, 0x007E
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 01       	movw	r18, r24
    1bb6:	21 58       	subi	r18, 0x81	; 129
    1bb8:	3f 4f       	sbci	r19, 0xFF	; 255
    1bba:	ca 01       	movw	r24, r20
    1bbc:	b9 01       	movw	r22, r18
    1bbe:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
				if (key[i] == key_check[i]) {
    1bc2:	80 91 7e 00 	lds	r24, 0x007E
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	fc 01       	movw	r30, r24
    1bcc:	ec 57       	subi	r30, 0x7C	; 124
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	20 81       	ld	r18, Z
    1bd2:	80 91 7e 00 	lds	r24, 0x007E
    1bd6:	88 2f       	mov	r24, r24
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	fc 01       	movw	r30, r24
    1bdc:	e1 58       	subi	r30, 0x81	; 129
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	28 17       	cp	r18, r24
    1be4:	49 f4       	brne	.+18     	; 0x1bf8 <main+0x67e>

					val = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	80 93 68 00 	sts	0x0068, r24
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
    1bec:	80 91 7e 00 	lds	r24, 0x007E
    1bf0:	8f 5f       	subi	r24, 0xFF	; 255
    1bf2:	80 93 7e 00 	sts	0x007E, r24
    1bf6:	03 c0       	rjmp	.+6      	; 0x1bfe <main+0x684>
				EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
				if (key[i] == key_check[i]) {

					val = 1;
				} else {
					val = 0;
    1bf8:	10 92 68 00 	sts	0x0068, r1
    1bfc:	05 c0       	rjmp	.+10     	; 0x1c08 <main+0x68e>
				key_check[i] = UART_recieveByte();
				EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
				_delay_ms(10);
			}

			for (i = 0; i < PASS_SIZE; i++) {
    1bfe:	80 91 7e 00 	lds	r24, 0x007E
    1c02:	85 30       	cpi	r24, 0x05	; 5
    1c04:	08 f4       	brcc	.+2      	; 0x1c08 <main+0x68e>
    1c06:	b9 cf       	rjmp	.-142    	; 0x1b7a <main+0x600>
					break;
				}

			}
			//while (UART_recieveByte() != MC2_READY) {}
			UART_sendByte(val);
    1c08:	80 91 68 00 	lds	r24, 0x0068
    1c0c:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>

			pass_flag = val;
    1c10:	80 91 68 00 	lds	r24, 0x0068
    1c14:	80 93 69 00 	sts	0x0069, r24

			if (pass_flag == 1) {
    1c18:	80 91 69 00 	lds	r24, 0x0069
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	09 f5       	brne	.+66     	; 0x1c62 <main+0x6e8>

				while (UART_recieveByte() != 1) {}
    1c20:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1c24:	81 30       	cpi	r24, 0x01	; 1
    1c26:	e1 f7       	brne	.-8      	; 0x1c20 <main+0x6a6>
				DcMotor_Rotate(CW,255);
    1c28:	81 e0       	ldi	r24, 0x01	; 1
    1c2a:	6f ef       	ldi	r22, 0xFF	; 255
    1c2c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DcMotor_Rotate>

				while (UART_recieveByte() != 2) {}
    1c30:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1c34:	82 30       	cpi	r24, 0x02	; 2
    1c36:	e1 f7       	brne	.-8      	; 0x1c30 <main+0x6b6>
				DcMotor_Rotate(STOP,0);
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	60 e0       	ldi	r22, 0x00	; 0
    1c3c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DcMotor_Rotate>

				while (UART_recieveByte() != 3) {}
    1c40:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	e1 f7       	brne	.-8      	; 0x1c40 <main+0x6c6>
				DcMotor_Rotate(A_CW,255);
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	6f ef       	ldi	r22, 0xFF	; 255
    1c4c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DcMotor_Rotate>
				while (UART_recieveByte() != 4) {}
    1c50:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1c54:	84 30       	cpi	r24, 0x04	; 4
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <main+0x6d6>
				DcMotor_Rotate(STOP,0);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	60 e0       	ldi	r22, 0x00	; 0
    1c5c:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <DcMotor_Rotate>
    1c60:	7f c0       	rjmp	.+254    	; 0x1d60 <main+0x7e6>

			} else if(pass_flag == 0) {
    1c62:	80 91 69 00 	lds	r24, 0x0069
    1c66:	88 23       	and	r24, r24
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <main+0x6f2>
    1c6a:	7a c0       	rjmp	.+244    	; 0x1d60 <main+0x7e6>
				while (UART_recieveByte() != 5) {}
    1c6c:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1c70:	85 30       	cpi	r24, 0x05	; 5
    1c72:	e1 f7       	brne	.-8      	; 0x1c6c <main+0x6f2>
				Buzzer_on();
    1c74:	0e 94 b4 05 	call	0xb68	; 0xb68 <Buzzer_on>
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e6       	ldi	r25, 0x60	; 96
    1c7c:	aa e6       	ldi	r26, 0x6A	; 106
    1c7e:	b7 e4       	ldi	r27, 0x47	; 71
    1c80:	8d ab       	std	Y+53, r24	; 0x35
    1c82:	9e ab       	std	Y+54, r25	; 0x36
    1c84:	af ab       	std	Y+55, r26	; 0x37
    1c86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c88:	6d a9       	ldd	r22, Y+53	; 0x35
    1c8a:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	30 e0       	ldi	r19, 0x00	; 0
    1c94:	4a ef       	ldi	r20, 0xFA	; 250
    1c96:	54 e4       	ldi	r21, 0x44	; 68
    1c98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9c:	dc 01       	movw	r26, r24
    1c9e:	cb 01       	movw	r24, r22
    1ca0:	89 ab       	std	Y+49, r24	; 0x31
    1ca2:	9a ab       	std	Y+50, r25	; 0x32
    1ca4:	ab ab       	std	Y+51, r26	; 0x33
    1ca6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca8:	69 a9       	ldd	r22, Y+49	; 0x31
    1caa:	7a a9       	ldd	r23, Y+50	; 0x32
    1cac:	8b a9       	ldd	r24, Y+51	; 0x33
    1cae:	9c a9       	ldd	r25, Y+52	; 0x34
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	40 e8       	ldi	r20, 0x80	; 128
    1cb6:	5f e3       	ldi	r21, 0x3F	; 63
    1cb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cbc:	88 23       	and	r24, r24
    1cbe:	2c f4       	brge	.+10     	; 0x1cca <main+0x750>
		__ticks = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	98 ab       	std	Y+48, r25	; 0x30
    1cc6:	8f a7       	std	Y+47, r24	; 0x2f
    1cc8:	3f c0       	rjmp	.+126    	; 0x1d48 <main+0x7ce>
	else if (__tmp > 65535)
    1cca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cce:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	3f ef       	ldi	r19, 0xFF	; 255
    1cd6:	4f e7       	ldi	r20, 0x7F	; 127
    1cd8:	57 e4       	ldi	r21, 0x47	; 71
    1cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cde:	18 16       	cp	r1, r24
    1ce0:	4c f5       	brge	.+82     	; 0x1d34 <main+0x7ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce2:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce4:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce6:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce8:	98 ad       	ldd	r25, Y+56	; 0x38
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e2       	ldi	r20, 0x20	; 32
    1cf0:	51 e4       	ldi	r21, 0x41	; 65
    1cf2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	bc 01       	movw	r22, r24
    1cfc:	cd 01       	movw	r24, r26
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	98 ab       	std	Y+48, r25	; 0x30
    1d08:	8f a7       	std	Y+47, r24	; 0x2f
    1d0a:	0f c0       	rjmp	.+30     	; 0x1d2a <main+0x7b0>
    1d0c:	88 ec       	ldi	r24, 0xC8	; 200
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9e a7       	std	Y+46, r25	; 0x2e
    1d12:	8d a7       	std	Y+45, r24	; 0x2d
    1d14:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d16:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	f1 f7       	brne	.-4      	; 0x1d18 <main+0x79e>
    1d1c:	9e a7       	std	Y+46, r25	; 0x2e
    1d1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d20:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d22:	98 a9       	ldd	r25, Y+48	; 0x30
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	98 ab       	std	Y+48, r25	; 0x30
    1d28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2e:	00 97       	sbiw	r24, 0x00	; 0
    1d30:	69 f7       	brne	.-38     	; 0x1d0c <main+0x792>
    1d32:	14 c0       	rjmp	.+40     	; 0x1d5c <main+0x7e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d34:	69 a9       	ldd	r22, Y+49	; 0x31
    1d36:	7a a9       	ldd	r23, Y+50	; 0x32
    1d38:	8b a9       	ldd	r24, Y+51	; 0x33
    1d3a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	98 ab       	std	Y+48, r25	; 0x30
    1d46:	8f a7       	std	Y+47, r24	; 0x2f
    1d48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4c:	9c a7       	std	Y+44, r25	; 0x2c
    1d4e:	8b a7       	std	Y+43, r24	; 0x2b
    1d50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d54:	01 97       	sbiw	r24, 0x01	; 1
    1d56:	f1 f7       	brne	.-4      	; 0x1d54 <main+0x7da>
    1d58:	9c a7       	std	Y+44, r25	; 0x2c
    1d5a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(60000);
				Buzzer_off();
    1d5c:	0e 94 c0 05 	call	0xb80	; 0xb80 <Buzzer_off>

			}
		}

		if (UART_recieveByte() == '-') {
    1d60:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1d64:	8d 32       	cpi	r24, 0x2D	; 45
    1d66:	09 f0       	breq	.+2      	; 0x1d6a <main+0x7f0>
    1d68:	49 ce       	rjmp	.-878    	; 0x19fc <main+0x482>
			for (i = 0; i < PASS_SIZE; i++) {
    1d6a:	10 92 7e 00 	sts	0x007E, r1
    1d6e:	98 c0       	rjmp	.+304    	; 0x1ea0 <main+0x926>
						while (UART_recieveByte() != MC2_READY) {
    1d70:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1d74:	80 31       	cpi	r24, 0x10	; 16
    1d76:	e1 f7       	brne	.-8      	; 0x1d70 <main+0x7f6>
						}
						key_check[i] = UART_recieveByte();
    1d78:	80 91 7e 00 	lds	r24, 0x007E
    1d7c:	08 2f       	mov	r16, r24
    1d7e:	10 e0       	ldi	r17, 0x00	; 0
    1d80:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1d84:	f8 01       	movw	r30, r16
    1d86:	e1 58       	subi	r30, 0x81	; 129
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 83       	st	Z, r24
						EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
    1d8c:	80 91 7e 00 	lds	r24, 0x007E
    1d90:	88 2f       	mov	r24, r24
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	8a 5e       	subi	r24, 0xEA	; 234
    1d96:	9c 4f       	sbci	r25, 0xFC	; 252
    1d98:	ac 01       	movw	r20, r24
    1d9a:	80 91 7e 00 	lds	r24, 0x007E
    1d9e:	88 2f       	mov	r24, r24
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	fc 01       	movw	r30, r24
    1da4:	e1 58       	subi	r30, 0x81	; 129
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	20 81       	ld	r18, Z
    1daa:	ca 01       	movw	r24, r20
    1dac:	62 2f       	mov	r22, r18
    1dae:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	a0 e2       	ldi	r26, 0x20	; 32
    1db8:	b1 e4       	ldi	r27, 0x41	; 65
    1dba:	8f a3       	std	Y+39, r24	; 0x27
    1dbc:	98 a7       	std	Y+40, r25	; 0x28
    1dbe:	a9 a7       	std	Y+41, r26	; 0x29
    1dc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	4a ef       	ldi	r20, 0xFA	; 250
    1dd0:	54 e4       	ldi	r21, 0x44	; 68
    1dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	8b a3       	std	Y+35, r24	; 0x23
    1ddc:	9c a3       	std	Y+36, r25	; 0x24
    1dde:	ad a3       	std	Y+37, r26	; 0x25
    1de0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1de2:	6b a1       	ldd	r22, Y+35	; 0x23
    1de4:	7c a1       	ldd	r23, Y+36	; 0x24
    1de6:	8d a1       	ldd	r24, Y+37	; 0x25
    1de8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	30 e0       	ldi	r19, 0x00	; 0
    1dee:	40 e8       	ldi	r20, 0x80	; 128
    1df0:	5f e3       	ldi	r21, 0x3F	; 63
    1df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1df6:	88 23       	and	r24, r24
    1df8:	2c f4       	brge	.+10     	; 0x1e04 <main+0x88a>
		__ticks = 1;
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	90 e0       	ldi	r25, 0x00	; 0
    1dfe:	9a a3       	std	Y+34, r25	; 0x22
    1e00:	89 a3       	std	Y+33, r24	; 0x21
    1e02:	3f c0       	rjmp	.+126    	; 0x1e82 <main+0x908>
	else if (__tmp > 65535)
    1e04:	6b a1       	ldd	r22, Y+35	; 0x23
    1e06:	7c a1       	ldd	r23, Y+36	; 0x24
    1e08:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e0c:	20 e0       	ldi	r18, 0x00	; 0
    1e0e:	3f ef       	ldi	r19, 0xFF	; 255
    1e10:	4f e7       	ldi	r20, 0x7F	; 127
    1e12:	57 e4       	ldi	r21, 0x47	; 71
    1e14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e18:	18 16       	cp	r1, r24
    1e1a:	4c f5       	brge	.+82     	; 0x1e6e <main+0x8f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e1e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e20:	89 a5       	ldd	r24, Y+41	; 0x29
    1e22:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	9a a3       	std	Y+34, r25	; 0x22
    1e42:	89 a3       	std	Y+33, r24	; 0x21
    1e44:	0f c0       	rjmp	.+30     	; 0x1e64 <main+0x8ea>
    1e46:	88 ec       	ldi	r24, 0xC8	; 200
    1e48:	90 e0       	ldi	r25, 0x00	; 0
    1e4a:	98 a3       	std	Y+32, r25	; 0x20
    1e4c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e50:	98 a1       	ldd	r25, Y+32	; 0x20
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <main+0x8d8>
    1e56:	98 a3       	std	Y+32, r25	; 0x20
    1e58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	9a a3       	std	Y+34, r25	; 0x22
    1e62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e64:	89 a1       	ldd	r24, Y+33	; 0x21
    1e66:	9a a1       	ldd	r25, Y+34	; 0x22
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <main+0x8cc>
    1e6c:	14 c0       	rjmp	.+40     	; 0x1e96 <main+0x91c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e70:	7c a1       	ldd	r23, Y+36	; 0x24
    1e72:	8d a1       	ldd	r24, Y+37	; 0x25
    1e74:	9e a1       	ldd	r25, Y+38	; 0x26
    1e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	9a a3       	std	Y+34, r25	; 0x22
    1e80:	89 a3       	std	Y+33, r24	; 0x21
    1e82:	89 a1       	ldd	r24, Y+33	; 0x21
    1e84:	9a a1       	ldd	r25, Y+34	; 0x22
    1e86:	9e 8f       	std	Y+30, r25	; 0x1e
    1e88:	8d 8f       	std	Y+29, r24	; 0x1d
    1e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e8e:	01 97       	sbiw	r24, 0x01	; 1
    1e90:	f1 f7       	brne	.-4      	; 0x1e8e <main+0x914>
    1e92:	9e 8f       	std	Y+30, r25	; 0x1e
    1e94:	8d 8f       	std	Y+29, r24	; 0x1d

			}
		}

		if (UART_recieveByte() == '-') {
			for (i = 0; i < PASS_SIZE; i++) {
    1e96:	80 91 7e 00 	lds	r24, 0x007E
    1e9a:	8f 5f       	subi	r24, 0xFF	; 255
    1e9c:	80 93 7e 00 	sts	0x007E, r24
    1ea0:	80 91 7e 00 	lds	r24, 0x007E
    1ea4:	85 30       	cpi	r24, 0x05	; 5
    1ea6:	08 f4       	brcc	.+2      	; 0x1eaa <main+0x930>
    1ea8:	63 cf       	rjmp	.-314    	; 0x1d70 <main+0x7f6>
						}
						key_check[i] = UART_recieveByte();
						EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
						_delay_ms(10);
					}
			for (i = 0; i < PASS_SIZE; i++) {
    1eaa:	10 92 7e 00 	sts	0x007E, r1
    1eae:	42 c0       	rjmp	.+132    	; 0x1f34 <main+0x9ba>
							EEPROM_readByte(PASS_ADRESS + i, &key[i]);
    1eb0:	80 91 7e 00 	lds	r24, 0x007E
    1eb4:	88 2f       	mov	r24, r24
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	8f 5e       	subi	r24, 0xEF	; 239
    1eba:	9c 4f       	sbci	r25, 0xFC	; 252
    1ebc:	ac 01       	movw	r20, r24
    1ebe:	80 91 7e 00 	lds	r24, 0x007E
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	9c 01       	movw	r18, r24
    1ec8:	2c 57       	subi	r18, 0x7C	; 124
    1eca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ecc:	ca 01       	movw	r24, r20
    1ece:	b9 01       	movw	r22, r18
    1ed0:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
							EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
    1ed4:	80 91 7e 00 	lds	r24, 0x007E
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	8a 5e       	subi	r24, 0xEA	; 234
    1ede:	9c 4f       	sbci	r25, 0xFC	; 252
    1ee0:	ac 01       	movw	r20, r24
    1ee2:	80 91 7e 00 	lds	r24, 0x007E
    1ee6:	88 2f       	mov	r24, r24
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	9c 01       	movw	r18, r24
    1eec:	21 58       	subi	r18, 0x81	; 129
    1eee:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef0:	ca 01       	movw	r24, r20
    1ef2:	b9 01       	movw	r22, r18
    1ef4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
							if (key[i] == key_check[i]) {
    1ef8:	80 91 7e 00 	lds	r24, 0x007E
    1efc:	88 2f       	mov	r24, r24
    1efe:	90 e0       	ldi	r25, 0x00	; 0
    1f00:	fc 01       	movw	r30, r24
    1f02:	ec 57       	subi	r30, 0x7C	; 124
    1f04:	ff 4f       	sbci	r31, 0xFF	; 255
    1f06:	20 81       	ld	r18, Z
    1f08:	80 91 7e 00 	lds	r24, 0x007E
    1f0c:	88 2f       	mov	r24, r24
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	fc 01       	movw	r30, r24
    1f12:	e1 58       	subi	r30, 0x81	; 129
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	80 81       	ld	r24, Z
    1f18:	28 17       	cp	r18, r24
    1f1a:	49 f4       	brne	.+18     	; 0x1f2e <main+0x9b4>

								val = 1;
    1f1c:	81 e0       	ldi	r24, 0x01	; 1
    1f1e:	80 93 68 00 	sts	0x0068, r24
						}
						key_check[i] = UART_recieveByte();
						EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
						_delay_ms(10);
					}
			for (i = 0; i < PASS_SIZE; i++) {
    1f22:	80 91 7e 00 	lds	r24, 0x007E
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	80 93 7e 00 	sts	0x007E, r24
    1f2c:	03 c0       	rjmp	.+6      	; 0x1f34 <main+0x9ba>
							EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
							if (key[i] == key_check[i]) {

								val = 1;
							} else {
								val = 0;
    1f2e:	10 92 68 00 	sts	0x0068, r1
    1f32:	05 c0       	rjmp	.+10     	; 0x1f3e <main+0x9c4>
						}
						key_check[i] = UART_recieveByte();
						EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
						_delay_ms(10);
					}
			for (i = 0; i < PASS_SIZE; i++) {
    1f34:	80 91 7e 00 	lds	r24, 0x007E
    1f38:	85 30       	cpi	r24, 0x05	; 5
    1f3a:	08 f4       	brcc	.+2      	; 0x1f3e <main+0x9c4>
    1f3c:	b9 cf       	rjmp	.-142    	; 0x1eb0 <main+0x936>
								val = 0;
								break;
							}

						}
						while (UART_recieveByte() != MC2_READY) {}
    1f3e:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1f42:	80 31       	cpi	r24, 0x10	; 16
    1f44:	e1 f7       	brne	.-8      	; 0x1f3e <main+0x9c4>
						UART_sendByte(val);
    1f46:	80 91 68 00 	lds	r24, 0x0068
    1f4a:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>

						pass_flag = val;
    1f4e:	80 91 68 00 	lds	r24, 0x0068
    1f52:	80 93 69 00 	sts	0x0069, r24
				if (pass_flag == 1) {
    1f56:	80 91 69 00 	lds	r24, 0x0069
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	09 f0       	breq	.+2      	; 0x1f60 <main+0x9e6>
    1f5e:	4e cd       	rjmp	.-1380   	; 0x19fc <main+0x482>
					while (UART_recieveByte() != MC2_READY) {
    1f60:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1f64:	80 31       	cpi	r24, 0x10	; 16
    1f66:	e1 f7       	brne	.-8      	; 0x1f60 <main+0x9e6>
    1f68:	9a c1       	rjmp	.+820    	; 0x229e <main+0xd24>
						}

						while (pass_flag != 0) {

							for (i = 0; i < PASS_SIZE; i++) {
    1f6a:	10 92 7e 00 	sts	0x007E, r1
    1f6e:	94 c0       	rjmp	.+296    	; 0x2098 <main+0xb1e>
								key[i] = UART_recieveByte();
    1f70:	80 91 7e 00 	lds	r24, 0x007E
    1f74:	08 2f       	mov	r16, r24
    1f76:	10 e0       	ldi	r17, 0x00	; 0
    1f78:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    1f7c:	f8 01       	movw	r30, r16
    1f7e:	ec 57       	subi	r30, 0x7C	; 124
    1f80:	ff 4f       	sbci	r31, 0xFF	; 255
    1f82:	80 83       	st	Z, r24
								EEPROM_writeByte(PASS_ADRESS + i, key[i]);
    1f84:	80 91 7e 00 	lds	r24, 0x007E
    1f88:	88 2f       	mov	r24, r24
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	8f 5e       	subi	r24, 0xEF	; 239
    1f8e:	9c 4f       	sbci	r25, 0xFC	; 252
    1f90:	ac 01       	movw	r20, r24
    1f92:	80 91 7e 00 	lds	r24, 0x007E
    1f96:	88 2f       	mov	r24, r24
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	ec 57       	subi	r30, 0x7C	; 124
    1f9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa0:	20 81       	ld	r18, Z
    1fa2:	ca 01       	movw	r24, r20
    1fa4:	62 2f       	mov	r22, r18
    1fa6:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	a0 e2       	ldi	r26, 0x20	; 32
    1fb0:	b1 e4       	ldi	r27, 0x41	; 65
    1fb2:	89 8f       	std	Y+25, r24	; 0x19
    1fb4:	9a 8f       	std	Y+26, r25	; 0x1a
    1fb6:	ab 8f       	std	Y+27, r26	; 0x1b
    1fb8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fba:	69 8d       	ldd	r22, Y+25	; 0x19
    1fbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fc2:	20 e0       	ldi	r18, 0x00	; 0
    1fc4:	30 e0       	ldi	r19, 0x00	; 0
    1fc6:	4a ef       	ldi	r20, 0xFA	; 250
    1fc8:	54 e4       	ldi	r21, 0x44	; 68
    1fca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	8d 8b       	std	Y+21, r24	; 0x15
    1fd4:	9e 8b       	std	Y+22, r25	; 0x16
    1fd6:	af 8b       	std	Y+23, r26	; 0x17
    1fd8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fda:	6d 89       	ldd	r22, Y+21	; 0x15
    1fdc:	7e 89       	ldd	r23, Y+22	; 0x16
    1fde:	8f 89       	ldd	r24, Y+23	; 0x17
    1fe0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e8       	ldi	r20, 0x80	; 128
    1fe8:	5f e3       	ldi	r21, 0x3F	; 63
    1fea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	2c f4       	brge	.+10     	; 0x1ffc <main+0xa82>
		__ticks = 1;
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9c 8b       	std	Y+20, r25	; 0x14
    1ff8:	8b 8b       	std	Y+19, r24	; 0x13
    1ffa:	3f c0       	rjmp	.+126    	; 0x207a <main+0xb00>
	else if (__tmp > 65535)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	3f ef       	ldi	r19, 0xFF	; 255
    2008:	4f e7       	ldi	r20, 0x7F	; 127
    200a:	57 e4       	ldi	r21, 0x47	; 71
    200c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2010:	18 16       	cp	r1, r24
    2012:	4c f5       	brge	.+82     	; 0x2066 <main+0xaec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2014:	69 8d       	ldd	r22, Y+25	; 0x19
    2016:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2018:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2028:	dc 01       	movw	r26, r24
    202a:	cb 01       	movw	r24, r22
    202c:	bc 01       	movw	r22, r24
    202e:	cd 01       	movw	r24, r26
    2030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	9c 8b       	std	Y+20, r25	; 0x14
    203a:	8b 8b       	std	Y+19, r24	; 0x13
    203c:	0f c0       	rjmp	.+30     	; 0x205c <main+0xae2>
    203e:	88 ec       	ldi	r24, 0xC8	; 200
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9a 8b       	std	Y+18, r25	; 0x12
    2044:	89 8b       	std	Y+17, r24	; 0x11
    2046:	89 89       	ldd	r24, Y+17	; 0x11
    2048:	9a 89       	ldd	r25, Y+18	; 0x12
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <main+0xad0>
    204e:	9a 8b       	std	Y+18, r25	; 0x12
    2050:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2052:	8b 89       	ldd	r24, Y+19	; 0x13
    2054:	9c 89       	ldd	r25, Y+20	; 0x14
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	9c 8b       	std	Y+20, r25	; 0x14
    205a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    205c:	8b 89       	ldd	r24, Y+19	; 0x13
    205e:	9c 89       	ldd	r25, Y+20	; 0x14
    2060:	00 97       	sbiw	r24, 0x00	; 0
    2062:	69 f7       	brne	.-38     	; 0x203e <main+0xac4>
    2064:	14 c0       	rjmp	.+40     	; 0x208e <main+0xb14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2066:	6d 89       	ldd	r22, Y+21	; 0x15
    2068:	7e 89       	ldd	r23, Y+22	; 0x16
    206a:	8f 89       	ldd	r24, Y+23	; 0x17
    206c:	98 8d       	ldd	r25, Y+24	; 0x18
    206e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	9c 8b       	std	Y+20, r25	; 0x14
    2078:	8b 8b       	std	Y+19, r24	; 0x13
    207a:	8b 89       	ldd	r24, Y+19	; 0x13
    207c:	9c 89       	ldd	r25, Y+20	; 0x14
    207e:	98 8b       	std	Y+16, r25	; 0x10
    2080:	8f 87       	std	Y+15, r24	; 0x0f
    2082:	8f 85       	ldd	r24, Y+15	; 0x0f
    2084:	98 89       	ldd	r25, Y+16	; 0x10
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	f1 f7       	brne	.-4      	; 0x2086 <main+0xb0c>
    208a:	98 8b       	std	Y+16, r25	; 0x10
    208c:	8f 87       	std	Y+15, r24	; 0x0f
					while (UART_recieveByte() != MC2_READY) {
						}

						while (pass_flag != 0) {

							for (i = 0; i < PASS_SIZE; i++) {
    208e:	80 91 7e 00 	lds	r24, 0x007E
    2092:	8f 5f       	subi	r24, 0xFF	; 255
    2094:	80 93 7e 00 	sts	0x007E, r24
    2098:	80 91 7e 00 	lds	r24, 0x007E
    209c:	85 30       	cpi	r24, 0x05	; 5
    209e:	08 f4       	brcc	.+2      	; 0x20a2 <main+0xb28>
    20a0:	67 cf       	rjmp	.-306    	; 0x1f70 <main+0x9f6>
								key[i] = UART_recieveByte();
								EEPROM_writeByte(PASS_ADRESS + i, key[i]);
								_delay_ms(10);
							}

							for (i = 0; i < PASS_SIZE; i++) {
    20a2:	10 92 7e 00 	sts	0x007E, r1
    20a6:	98 c0       	rjmp	.+304    	; 0x21d8 <main+0xc5e>
								while (UART_recieveByte() != MC2_READY) {
    20a8:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    20ac:	80 31       	cpi	r24, 0x10	; 16
    20ae:	e1 f7       	brne	.-8      	; 0x20a8 <main+0xb2e>
								}
								key_check[i] = UART_recieveByte();
    20b0:	80 91 7e 00 	lds	r24, 0x007E
    20b4:	08 2f       	mov	r16, r24
    20b6:	10 e0       	ldi	r17, 0x00	; 0
    20b8:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    20bc:	f8 01       	movw	r30, r16
    20be:	e1 58       	subi	r30, 0x81	; 129
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	80 83       	st	Z, r24
								EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
    20c4:	80 91 7e 00 	lds	r24, 0x007E
    20c8:	88 2f       	mov	r24, r24
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	8a 5e       	subi	r24, 0xEA	; 234
    20ce:	9c 4f       	sbci	r25, 0xFC	; 252
    20d0:	ac 01       	movw	r20, r24
    20d2:	80 91 7e 00 	lds	r24, 0x007E
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	e1 58       	subi	r30, 0x81	; 129
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	20 81       	ld	r18, Z
    20e2:	ca 01       	movw	r24, r20
    20e4:	62 2f       	mov	r22, r18
    20e6:	0e 94 cc 05 	call	0xb98	; 0xb98 <EEPROM_writeByte>
    20ea:	80 e0       	ldi	r24, 0x00	; 0
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	a0 e2       	ldi	r26, 0x20	; 32
    20f0:	b1 e4       	ldi	r27, 0x41	; 65
    20f2:	8b 87       	std	Y+11, r24	; 0x0b
    20f4:	9c 87       	std	Y+12, r25	; 0x0c
    20f6:	ad 87       	std	Y+13, r26	; 0x0d
    20f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    20fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    20fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2100:	9e 85       	ldd	r25, Y+14	; 0x0e
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	4a ef       	ldi	r20, 0xFA	; 250
    2108:	54 e4       	ldi	r21, 0x44	; 68
    210a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	8f 83       	std	Y+7, r24	; 0x07
    2114:	98 87       	std	Y+8, r25	; 0x08
    2116:	a9 87       	std	Y+9, r26	; 0x09
    2118:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    211a:	6f 81       	ldd	r22, Y+7	; 0x07
    211c:	78 85       	ldd	r23, Y+8	; 0x08
    211e:	89 85       	ldd	r24, Y+9	; 0x09
    2120:	9a 85       	ldd	r25, Y+10	; 0x0a
    2122:	20 e0       	ldi	r18, 0x00	; 0
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	40 e8       	ldi	r20, 0x80	; 128
    2128:	5f e3       	ldi	r21, 0x3F	; 63
    212a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    212e:	88 23       	and	r24, r24
    2130:	2c f4       	brge	.+10     	; 0x213c <main+0xbc2>
		__ticks = 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9e 83       	std	Y+6, r25	; 0x06
    2138:	8d 83       	std	Y+5, r24	; 0x05
    213a:	3f c0       	rjmp	.+126    	; 0x21ba <main+0xc40>
	else if (__tmp > 65535)
    213c:	6f 81       	ldd	r22, Y+7	; 0x07
    213e:	78 85       	ldd	r23, Y+8	; 0x08
    2140:	89 85       	ldd	r24, Y+9	; 0x09
    2142:	9a 85       	ldd	r25, Y+10	; 0x0a
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	3f ef       	ldi	r19, 0xFF	; 255
    2148:	4f e7       	ldi	r20, 0x7F	; 127
    214a:	57 e4       	ldi	r21, 0x47	; 71
    214c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2150:	18 16       	cp	r1, r24
    2152:	4c f5       	brge	.+82     	; 0x21a6 <main+0xc2c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2154:	6b 85       	ldd	r22, Y+11	; 0x0b
    2156:	7c 85       	ldd	r23, Y+12	; 0x0c
    2158:	8d 85       	ldd	r24, Y+13	; 0x0d
    215a:	9e 85       	ldd	r25, Y+14	; 0x0e
    215c:	20 e0       	ldi	r18, 0x00	; 0
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	40 e2       	ldi	r20, 0x20	; 32
    2162:	51 e4       	ldi	r21, 0x41	; 65
    2164:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	bc 01       	movw	r22, r24
    216e:	cd 01       	movw	r24, r26
    2170:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	9e 83       	std	Y+6, r25	; 0x06
    217a:	8d 83       	std	Y+5, r24	; 0x05
    217c:	0f c0       	rjmp	.+30     	; 0x219c <main+0xc22>
    217e:	88 ec       	ldi	r24, 0xC8	; 200
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	9c 83       	std	Y+4, r25	; 0x04
    2184:	8b 83       	std	Y+3, r24	; 0x03
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <main+0xc10>
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2192:	8d 81       	ldd	r24, Y+5	; 0x05
    2194:	9e 81       	ldd	r25, Y+6	; 0x06
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	9e 83       	std	Y+6, r25	; 0x06
    219a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    219c:	8d 81       	ldd	r24, Y+5	; 0x05
    219e:	9e 81       	ldd	r25, Y+6	; 0x06
    21a0:	00 97       	sbiw	r24, 0x00	; 0
    21a2:	69 f7       	brne	.-38     	; 0x217e <main+0xc04>
    21a4:	14 c0       	rjmp	.+40     	; 0x21ce <main+0xc54>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21a6:	6f 81       	ldd	r22, Y+7	; 0x07
    21a8:	78 85       	ldd	r23, Y+8	; 0x08
    21aa:	89 85       	ldd	r24, Y+9	; 0x09
    21ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	9e 83       	std	Y+6, r25	; 0x06
    21b8:	8d 83       	std	Y+5, r24	; 0x05
    21ba:	8d 81       	ldd	r24, Y+5	; 0x05
    21bc:	9e 81       	ldd	r25, Y+6	; 0x06
    21be:	9a 83       	std	Y+2, r25	; 0x02
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	9a 81       	ldd	r25, Y+2	; 0x02
    21c6:	01 97       	sbiw	r24, 0x01	; 1
    21c8:	f1 f7       	brne	.-4      	; 0x21c6 <main+0xc4c>
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
								key[i] = UART_recieveByte();
								EEPROM_writeByte(PASS_ADRESS + i, key[i]);
								_delay_ms(10);
							}

							for (i = 0; i < PASS_SIZE; i++) {
    21ce:	80 91 7e 00 	lds	r24, 0x007E
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	80 93 7e 00 	sts	0x007E, r24
    21d8:	80 91 7e 00 	lds	r24, 0x007E
    21dc:	85 30       	cpi	r24, 0x05	; 5
    21de:	08 f4       	brcc	.+2      	; 0x21e2 <main+0xc68>
    21e0:	63 cf       	rjmp	.-314    	; 0x20a8 <main+0xb2e>
								key_check[i] = UART_recieveByte();
								EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
								_delay_ms(10);
							}

							for (i = 0; i < PASS_SIZE; i++) {
    21e2:	10 92 7e 00 	sts	0x007E, r1
    21e6:	42 c0       	rjmp	.+132    	; 0x226c <main+0xcf2>
								EEPROM_readByte(PASS_ADRESS + i, &key[i]);
    21e8:	80 91 7e 00 	lds	r24, 0x007E
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	8f 5e       	subi	r24, 0xEF	; 239
    21f2:	9c 4f       	sbci	r25, 0xFC	; 252
    21f4:	ac 01       	movw	r20, r24
    21f6:	80 91 7e 00 	lds	r24, 0x007E
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	9c 01       	movw	r18, r24
    2200:	2c 57       	subi	r18, 0x7C	; 124
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	ca 01       	movw	r24, r20
    2206:	b9 01       	movw	r22, r18
    2208:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
								EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
    220c:	80 91 7e 00 	lds	r24, 0x007E
    2210:	88 2f       	mov	r24, r24
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	8a 5e       	subi	r24, 0xEA	; 234
    2216:	9c 4f       	sbci	r25, 0xFC	; 252
    2218:	ac 01       	movw	r20, r24
    221a:	80 91 7e 00 	lds	r24, 0x007E
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	9c 01       	movw	r18, r24
    2224:	21 58       	subi	r18, 0x81	; 129
    2226:	3f 4f       	sbci	r19, 0xFF	; 255
    2228:	ca 01       	movw	r24, r20
    222a:	b9 01       	movw	r22, r18
    222c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <EEPROM_readByte>
								if (key[i] == key_check[i]) {
    2230:	80 91 7e 00 	lds	r24, 0x007E
    2234:	88 2f       	mov	r24, r24
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	fc 01       	movw	r30, r24
    223a:	ec 57       	subi	r30, 0x7C	; 124
    223c:	ff 4f       	sbci	r31, 0xFF	; 255
    223e:	20 81       	ld	r18, Z
    2240:	80 91 7e 00 	lds	r24, 0x007E
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	e1 58       	subi	r30, 0x81	; 129
    224c:	ff 4f       	sbci	r31, 0xFF	; 255
    224e:	80 81       	ld	r24, Z
    2250:	28 17       	cp	r18, r24
    2252:	49 f4       	brne	.+18     	; 0x2266 <main+0xcec>

									val = 1;
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	80 93 68 00 	sts	0x0068, r24
								key_check[i] = UART_recieveByte();
								EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
								_delay_ms(10);
							}

							for (i = 0; i < PASS_SIZE; i++) {
    225a:	80 91 7e 00 	lds	r24, 0x007E
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	80 93 7e 00 	sts	0x007E, r24
    2264:	03 c0       	rjmp	.+6      	; 0x226c <main+0xcf2>
								EEPROM_readByte(PASS_ADRESS2 + i, &key_check[i]);
								if (key[i] == key_check[i]) {

									val = 1;
								} else {
									val = 0;
    2266:	10 92 68 00 	sts	0x0068, r1
    226a:	05 c0       	rjmp	.+10     	; 0x2276 <main+0xcfc>
								key_check[i] = UART_recieveByte();
								EEPROM_writeByte(PASS_ADRESS2 + i, key_check[i]);
								_delay_ms(10);
							}

							for (i = 0; i < PASS_SIZE; i++) {
    226c:	80 91 7e 00 	lds	r24, 0x007E
    2270:	85 30       	cpi	r24, 0x05	; 5
    2272:	08 f4       	brcc	.+2      	; 0x2276 <main+0xcfc>
    2274:	b9 cf       	rjmp	.-142    	; 0x21e8 <main+0xc6e>
									val = 0;
									break;
								}

							}
							while (UART_recieveByte() != MC2_READY) {
    2276:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    227a:	80 31       	cpi	r24, 0x10	; 16
    227c:	e1 f7       	brne	.-8      	; 0x2276 <main+0xcfc>
							}
							UART_sendByte(val);
    227e:	80 91 68 00 	lds	r24, 0x0068
    2282:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>
							if (val == 1) {
    2286:	80 91 68 00 	lds	r24, 0x0068
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	41 f4       	brne	.+16     	; 0x229e <main+0xd24>
								while (UART_recieveByte() != MC2_READY) {
    228e:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    2292:	80 31       	cpi	r24, 0x10	; 16
    2294:	e1 f7       	brne	.-8      	; 0x228e <main+0xd14>
								}
								pass_flag = UART_recieveByte();
    2296:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    229a:	80 93 69 00 	sts	0x0069, r24
						pass_flag = val;
				if (pass_flag == 1) {
					while (UART_recieveByte() != MC2_READY) {
						}

						while (pass_flag != 0) {
    229e:	80 91 69 00 	lds	r24, 0x0069
    22a2:	88 23       	and	r24, r24
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <main+0xd2e>
    22a6:	61 ce       	rjmp	.-830    	; 0x1f6a <main+0x9f0>
    22a8:	a9 cb       	rjmp	.-2222   	; 0x19fc <main+0x482>

000022aa <callback_function>:
		}
	}
	return 0;
}

void callback_function(void) {
    22aa:	df 93       	push	r29
    22ac:	cf 93       	push	r28
    22ae:	cd b7       	in	r28, 0x3d	; 61
    22b0:	de b7       	in	r29, 0x3e	; 62
	counter++;
    22b2:	80 91 7a 00 	lds	r24, 0x007A
    22b6:	8f 5f       	subi	r24, 0xFF	; 255
    22b8:	80 93 7a 00 	sts	0x007A, r24

}
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <DcMotor_Init>:




void DcMotor_Init(void)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(IN1_PORT,IN1_PIN,PIN_OUTPUT);
    22ca:	80 e0       	ldi	r24, 0x00	; 0
    22cc:	60 e0       	ldi	r22, 0x00	; 0
    22ce:	41 e0       	ldi	r20, 0x01	; 1
    22d0:	0e 94 7f 07 	call	0xefe	; 0xefe <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT,IN2_PIN,PIN_OUTPUT);
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	61 e0       	ldi	r22, 0x01	; 1
    22d8:	41 e0       	ldi	r20, 0x01	; 1
    22da:	0e 94 7f 07 	call	0xefe	; 0xefe <GPIO_setupPinDirection>
	GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	60 e0       	ldi	r22, 0x00	; 0
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
	GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
}
    22f2:	cf 91       	pop	r28
    22f4:	df 91       	pop	r29
    22f6:	08 95       	ret

000022f8 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    22f8:	df 93       	push	r29
    22fa:	cf 93       	push	r28
    22fc:	00 d0       	rcall	.+0      	; 0x22fe <DcMotor_Rotate+0x6>
    22fe:	0f 92       	push	r0
    2300:	cd b7       	in	r28, 0x3d	; 61
    2302:	de b7       	in	r29, 0x3e	; 62
    2304:	8a 83       	std	Y+2, r24	; 0x02
    2306:	6b 83       	std	Y+3, r22	; 0x03
	uint8 state_check=state;
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Init(speed);
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	0e 94 b8 11 	call	0x2370	; 0x2370 <PWM_Timer0_Init>
	if(state_check==STOP)
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	88 23       	and	r24, r24
    2316:	59 f4       	brne	.+22     	; 0x232e <DcMotor_Rotate+0x36>
	{
		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	40 e0       	ldi	r20, 0x00	; 0
    231e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	61 e0       	ldi	r22, 0x01	; 1
    2326:	40 e0       	ldi	r20, 0x00	; 0
    2328:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
    232c:	1b c0       	rjmp	.+54     	; 0x2364 <DcMotor_Rotate+0x6c>
	}
	else if(state_check==A_CW)
    232e:	89 81       	ldd	r24, Y+1	; 0x01
    2330:	82 30       	cpi	r24, 0x02	; 2
    2332:	59 f4       	brne	.+22     	; 0x234a <DcMotor_Rotate+0x52>
	{
		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_HIGH);
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	41 e0       	ldi	r20, 0x01	; 1
    233a:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	61 e0       	ldi	r22, 0x01	; 1
    2342:	40 e0       	ldi	r20, 0x00	; 0
    2344:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
    2348:	0d c0       	rjmp	.+26     	; 0x2364 <DcMotor_Rotate+0x6c>
	}
	else if(state_check==CW)
    234a:	89 81       	ldd	r24, Y+1	; 0x01
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	51 f4       	brne	.+20     	; 0x2364 <DcMotor_Rotate+0x6c>
	{

		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_HIGH);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	41 e0       	ldi	r20, 0x01	; 1
    2360:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <GPIO_writePin>
	}

}
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	cf 91       	pop	r28
    236c:	df 91       	pop	r29
    236e:	08 95       	ret

00002370 <PWM_Timer0_Init>:
 *      Author: Kimo Store
 */
#include <avr/io.h>

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    2370:	df 93       	push	r29
    2372:	cf 93       	push	r28
    2374:	0f 92       	push	r0
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    237c:	e2 e5       	ldi	r30, 0x52	; 82
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    2382:	ec e5       	ldi	r30, 0x5C	; 92
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	89 81       	ldd	r24, Y+1	; 0x01
    2388:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    238a:	a7 e3       	ldi	r26, 0x37	; 55
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e7 e3       	ldi	r30, 0x37	; 55
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	88 60       	ori	r24, 0x08	; 8
    2396:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2398:	e3 e5       	ldi	r30, 0x53	; 83
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	8a e6       	ldi	r24, 0x6A	; 106
    239e:	80 83       	st	Z, r24
}
    23a0:	0f 90       	pop	r0
    23a2:	cf 91       	pop	r28
    23a4:	df 91       	pop	r29
    23a6:	08 95       	ret

000023a8 <Timer1_init>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

Timer1_ConfigType TIMER1_Configerations ={0,7813,F_CPU_1024,CTC_OCR1A_NONPWM};

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    23a8:	df 93       	push	r29
    23aa:	cf 93       	push	r28
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <Timer1_init+0x6>
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	9b 83       	std	Y+3, r25	; 0x03
    23b6:	8a 83       	std	Y+2, r24	; 0x02

	uint8 mode_selector =(Config_Ptr->mode);
    23b8:	ea 81       	ldd	r30, Y+2	; 0x02
    23ba:	fb 81       	ldd	r31, Y+3	; 0x03
    23bc:	85 81       	ldd	r24, Z+5	; 0x05
    23be:	89 83       	std	Y+1, r24	; 0x01
	if(mode_selector==NORMALMODE){
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	88 23       	and	r24, r24
    23c4:	b9 f4       	brne	.+46     	; 0x23f4 <Timer1_init+0x4c>
		TCCR1A=0;
    23c6:	ef e4       	ldi	r30, 0x4F	; 79
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	10 82       	st	Z, r1
		TCCR1B=0|((Config_Ptr->prescaler));
    23cc:	ae e4       	ldi	r26, 0x4E	; 78
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	ea 81       	ldd	r30, Y+2	; 0x02
    23d2:	fb 81       	ldd	r31, Y+3	; 0x03
    23d4:	84 81       	ldd	r24, Z+4	; 0x04
    23d6:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr-> initial_value;
    23d8:	ac e4       	ldi	r26, 0x4C	; 76
    23da:	b0 e0       	ldi	r27, 0x00	; 0
    23dc:	ea 81       	ldd	r30, Y+2	; 0x02
    23de:	fb 81       	ldd	r31, Y+3	; 0x03
    23e0:	80 81       	ld	r24, Z
    23e2:	91 81       	ldd	r25, Z+1	; 0x01
    23e4:	11 96       	adiw	r26, 0x01	; 1
    23e6:	9c 93       	st	X, r25
    23e8:	8e 93       	st	-X, r24
		TIMSK =(1<<TOIE1);
    23ea:	e9 e5       	ldi	r30, 0x59	; 89
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	84 e0       	ldi	r24, 0x04	; 4
    23f0:	80 83       	st	Z, r24
    23f2:	6f c0       	rjmp	.+222    	; 0x24d2 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1A_NONPWM){
    23f4:	89 81       	ldd	r24, Y+1	; 0x01
    23f6:	81 30       	cpi	r24, 0x01	; 1
    23f8:	c9 f4       	brne	.+50     	; 0x242c <Timer1_init+0x84>
		TCCR1A = (1<<FOC1A);    //راجع ال data sheet
    23fa:	ef e4       	ldi	r30, 0x4F	; 79
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	88 e0       	ldi	r24, 0x08	; 8
    2400:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12)|((Config_Ptr->prescaler));
    2402:	ae e4       	ldi	r26, 0x4E	; 78
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ea 81       	ldd	r30, Y+2	; 0x02
    2408:	fb 81       	ldd	r31, Y+3	; 0x03
    240a:	84 81       	ldd	r24, Z+4	; 0x04
    240c:	88 60       	ori	r24, 0x08	; 8
    240e:	8c 93       	st	X, r24
		OCR1A= Config_Ptr-> compare_value;
    2410:	aa e4       	ldi	r26, 0x4A	; 74
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	ea 81       	ldd	r30, Y+2	; 0x02
    2416:	fb 81       	ldd	r31, Y+3	; 0x03
    2418:	82 81       	ldd	r24, Z+2	; 0x02
    241a:	93 81       	ldd	r25, Z+3	; 0x03
    241c:	11 96       	adiw	r26, 0x01	; 1
    241e:	9c 93       	st	X, r25
    2420:	8e 93       	st	-X, r24
		TIMSK =(1<<OCIE1A);
    2422:	e9 e5       	ldi	r30, 0x59	; 89
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 e1       	ldi	r24, 0x10	; 16
    2428:	80 83       	st	Z, r24
    242a:	53 c0       	rjmp	.+166    	; 0x24d2 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1A_FASTPWM){
    242c:	89 81       	ldd	r24, Y+1	; 0x01
    242e:	82 30       	cpi	r24, 0x02	; 2
    2430:	c9 f4       	brne	.+50     	; 0x2464 <Timer1_init+0xbc>
		TCCR1A=(0XF0); /*Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM, (inverting mode)*/
    2432:	ef e4       	ldi	r30, 0x4F	; 79
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 ef       	ldi	r24, 0xF0	; 240
    2438:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12)|(1<<WGM13)|((Config_Ptr->prescaler));
    243a:	ae e4       	ldi	r26, 0x4E	; 78
    243c:	b0 e0       	ldi	r27, 0x00	; 0
    243e:	ea 81       	ldd	r30, Y+2	; 0x02
    2440:	fb 81       	ldd	r31, Y+3	; 0x03
    2442:	84 81       	ldd	r24, Z+4	; 0x04
    2444:	88 61       	ori	r24, 0x18	; 24
    2446:	8c 93       	st	X, r24
		OCR1A= Config_Ptr-> compare_value;
    2448:	aa e4       	ldi	r26, 0x4A	; 74
    244a:	b0 e0       	ldi	r27, 0x00	; 0
    244c:	ea 81       	ldd	r30, Y+2	; 0x02
    244e:	fb 81       	ldd	r31, Y+3	; 0x03
    2450:	82 81       	ldd	r24, Z+2	; 0x02
    2452:	93 81       	ldd	r25, Z+3	; 0x03
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	9c 93       	st	X, r25
    2458:	8e 93       	st	-X, r24
		TIMSK =(1<<OCIE1A);
    245a:	e9 e5       	ldi	r30, 0x59	; 89
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 e1       	ldi	r24, 0x10	; 16
    2460:	80 83       	st	Z, r24
    2462:	37 c0       	rjmp	.+110    	; 0x24d2 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1B_NONPWM){
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	83 30       	cpi	r24, 0x03	; 3
    2468:	c9 f4       	brne	.+50     	; 0x249c <Timer1_init+0xf4>
			TCCR1A = (1<<FOC1B);   //راجع ال data sheet
    246a:	ef e4       	ldi	r30, 0x4F	; 79
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	84 e0       	ldi	r24, 0x04	; 4
    2470:	80 83       	st	Z, r24
			TCCR1B=(1<<WGM12)|((Config_Ptr->prescaler));
    2472:	ae e4       	ldi	r26, 0x4E	; 78
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	ea 81       	ldd	r30, Y+2	; 0x02
    2478:	fb 81       	ldd	r31, Y+3	; 0x03
    247a:	84 81       	ldd	r24, Z+4	; 0x04
    247c:	88 60       	ori	r24, 0x08	; 8
    247e:	8c 93       	st	X, r24
			OCR1B= Config_Ptr-> compare_value;
    2480:	a8 e4       	ldi	r26, 0x48	; 72
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ea 81       	ldd	r30, Y+2	; 0x02
    2486:	fb 81       	ldd	r31, Y+3	; 0x03
    2488:	82 81       	ldd	r24, Z+2	; 0x02
    248a:	93 81       	ldd	r25, Z+3	; 0x03
    248c:	11 96       	adiw	r26, 0x01	; 1
    248e:	9c 93       	st	X, r25
    2490:	8e 93       	st	-X, r24
			TIMSK =(1<<OCIE1B);
    2492:	e9 e5       	ldi	r30, 0x59	; 89
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	88 e0       	ldi	r24, 0x08	; 8
    2498:	80 83       	st	Z, r24
    249a:	1b c0       	rjmp	.+54     	; 0x24d2 <Timer1_init+0x12a>
		}
	else if(mode_selector==CTC_OCR1B_FASTPWM){
    249c:	89 81       	ldd	r24, Y+1	; 0x01
    249e:	84 30       	cpi	r24, 0x04	; 4
    24a0:	c1 f4       	brne	.+48     	; 0x24d2 <Timer1_init+0x12a>
			TCCR1A=(0XF0); /*Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM, (inverting mode)*/
    24a2:	ef e4       	ldi	r30, 0x4F	; 79
    24a4:	f0 e0       	ldi	r31, 0x00	; 0
    24a6:	80 ef       	ldi	r24, 0xF0	; 240
    24a8:	80 83       	st	Z, r24
			TCCR1B=(1<<WGM12)|(1<<WGM13)|((Config_Ptr->prescaler));
    24aa:	ae e4       	ldi	r26, 0x4E	; 78
    24ac:	b0 e0       	ldi	r27, 0x00	; 0
    24ae:	ea 81       	ldd	r30, Y+2	; 0x02
    24b0:	fb 81       	ldd	r31, Y+3	; 0x03
    24b2:	84 81       	ldd	r24, Z+4	; 0x04
    24b4:	88 61       	ori	r24, 0x18	; 24
    24b6:	8c 93       	st	X, r24
			OCR1B= Config_Ptr-> compare_value;
    24b8:	a8 e4       	ldi	r26, 0x48	; 72
    24ba:	b0 e0       	ldi	r27, 0x00	; 0
    24bc:	ea 81       	ldd	r30, Y+2	; 0x02
    24be:	fb 81       	ldd	r31, Y+3	; 0x03
    24c0:	82 81       	ldd	r24, Z+2	; 0x02
    24c2:	93 81       	ldd	r25, Z+3	; 0x03
    24c4:	11 96       	adiw	r26, 0x01	; 1
    24c6:	9c 93       	st	X, r25
    24c8:	8e 93       	st	-X, r24
			TIMSK =(1<<OCIE1B);
    24ca:	e9 e5       	ldi	r30, 0x59	; 89
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	88 e0       	ldi	r24, 0x08	; 8
    24d0:	80 83       	st	Z, r24
		}

}
    24d2:	0f 90       	pop	r0
    24d4:	0f 90       	pop	r0
    24d6:	0f 90       	pop	r0
    24d8:	cf 91       	pop	r28
    24da:	df 91       	pop	r29
    24dc:	08 95       	ret

000024de <Timer1_deInit>:

void Timer1_deInit(void){
    24de:	df 93       	push	r29
    24e0:	cf 93       	push	r28
    24e2:	cd b7       	in	r28, 0x3d	; 61
    24e4:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    24e6:	ef e4       	ldi	r30, 0x4F	; 79
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	10 82       	st	Z, r1
	TCCR1B=0;
    24ec:	ee e4       	ldi	r30, 0x4E	; 78
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	10 82       	st	Z, r1
	TIMSK =0;
    24f2:	e9 e5       	ldi	r30, 0x59	; 89
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	10 82       	st	Z, r1
}
    24f8:	cf 91       	pop	r28
    24fa:	df 91       	pop	r29
    24fc:	08 95       	ret

000024fe <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    24fe:	df 93       	push	r29
    2500:	cf 93       	push	r28
    2502:	00 d0       	rcall	.+0      	; 0x2504 <Timer1_setCallBack+0x6>
    2504:	cd b7       	in	r28, 0x3d	; 61
    2506:	de b7       	in	r29, 0x3e	; 62
    2508:	9a 83       	std	Y+2, r25	; 0x02
    250a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    250c:	89 81       	ldd	r24, Y+1	; 0x01
    250e:	9a 81       	ldd	r25, Y+2	; 0x02
    2510:	90 93 7d 00 	sts	0x007D, r25
    2514:	80 93 7c 00 	sts	0x007C, r24
}
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <__vector_9>:

ISR(TIMER1_OVF_vect){
    2522:	1f 92       	push	r1
    2524:	0f 92       	push	r0
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	0f 92       	push	r0
    252a:	11 24       	eor	r1, r1
    252c:	2f 93       	push	r18
    252e:	3f 93       	push	r19
    2530:	4f 93       	push	r20
    2532:	5f 93       	push	r21
    2534:	6f 93       	push	r22
    2536:	7f 93       	push	r23
    2538:	8f 93       	push	r24
    253a:	9f 93       	push	r25
    253c:	af 93       	push	r26
    253e:	bf 93       	push	r27
    2540:	ef 93       	push	r30
    2542:	ff 93       	push	r31
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    254c:	80 91 7c 00 	lds	r24, 0x007C
    2550:	90 91 7d 00 	lds	r25, 0x007D
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	29 f0       	breq	.+10     	; 0x2562 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2558:	e0 91 7c 00 	lds	r30, 0x007C
    255c:	f0 91 7d 00 	lds	r31, 0x007D
    2560:	09 95       	icall
		}
}
    2562:	cf 91       	pop	r28
    2564:	df 91       	pop	r29
    2566:	ff 91       	pop	r31
    2568:	ef 91       	pop	r30
    256a:	bf 91       	pop	r27
    256c:	af 91       	pop	r26
    256e:	9f 91       	pop	r25
    2570:	8f 91       	pop	r24
    2572:	7f 91       	pop	r23
    2574:	6f 91       	pop	r22
    2576:	5f 91       	pop	r21
    2578:	4f 91       	pop	r20
    257a:	3f 91       	pop	r19
    257c:	2f 91       	pop	r18
    257e:	0f 90       	pop	r0
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	0f 90       	pop	r0
    2584:	1f 90       	pop	r1
    2586:	18 95       	reti

00002588 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    2588:	1f 92       	push	r1
    258a:	0f 92       	push	r0
    258c:	0f b6       	in	r0, 0x3f	; 63
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	cd b7       	in	r28, 0x3d	; 61
    25b0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    25b2:	80 91 7c 00 	lds	r24, 0x007C
    25b6:	90 91 7d 00 	lds	r25, 0x007D
    25ba:	00 97       	sbiw	r24, 0x00	; 0
    25bc:	29 f0       	breq	.+10     	; 0x25c8 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    25be:	e0 91 7c 00 	lds	r30, 0x007C
    25c2:	f0 91 7d 00 	lds	r31, 0x007D
    25c6:	09 95       	icall
		}
}
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	ff 91       	pop	r31
    25ce:	ef 91       	pop	r30
    25d0:	bf 91       	pop	r27
    25d2:	af 91       	pop	r26
    25d4:	9f 91       	pop	r25
    25d6:	8f 91       	pop	r24
    25d8:	7f 91       	pop	r23
    25da:	6f 91       	pop	r22
    25dc:	5f 91       	pop	r21
    25de:	4f 91       	pop	r20
    25e0:	3f 91       	pop	r19
    25e2:	2f 91       	pop	r18
    25e4:	0f 90       	pop	r0
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	0f 90       	pop	r0
    25ea:	1f 90       	pop	r1
    25ec:	18 95       	reti

000025ee <__vector_8>:
ISR(TIMER1_COMPB_vect){
    25ee:	1f 92       	push	r1
    25f0:	0f 92       	push	r0
    25f2:	0f b6       	in	r0, 0x3f	; 63
    25f4:	0f 92       	push	r0
    25f6:	11 24       	eor	r1, r1
    25f8:	2f 93       	push	r18
    25fa:	3f 93       	push	r19
    25fc:	4f 93       	push	r20
    25fe:	5f 93       	push	r21
    2600:	6f 93       	push	r22
    2602:	7f 93       	push	r23
    2604:	8f 93       	push	r24
    2606:	9f 93       	push	r25
    2608:	af 93       	push	r26
    260a:	bf 93       	push	r27
    260c:	ef 93       	push	r30
    260e:	ff 93       	push	r31
    2610:	df 93       	push	r29
    2612:	cf 93       	push	r28
    2614:	cd b7       	in	r28, 0x3d	; 61
    2616:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2618:	80 91 7c 00 	lds	r24, 0x007C
    261c:	90 91 7d 00 	lds	r25, 0x007D
    2620:	00 97       	sbiw	r24, 0x00	; 0
    2622:	29 f0       	breq	.+10     	; 0x262e <__vector_8+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2624:	e0 91 7c 00 	lds	r30, 0x007C
    2628:	f0 91 7d 00 	lds	r31, 0x007D
    262c:	09 95       	icall
		}
}
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	ff 91       	pop	r31
    2634:	ef 91       	pop	r30
    2636:	bf 91       	pop	r27
    2638:	af 91       	pop	r26
    263a:	9f 91       	pop	r25
    263c:	8f 91       	pop	r24
    263e:	7f 91       	pop	r23
    2640:	6f 91       	pop	r22
    2642:	5f 91       	pop	r21
    2644:	4f 91       	pop	r20
    2646:	3f 91       	pop	r19
    2648:	2f 91       	pop	r18
    264a:	0f 90       	pop	r0
    264c:	0f be       	out	0x3f, r0	; 63
    264e:	0f 90       	pop	r0
    2650:	1f 90       	pop	r1
    2652:	18 95       	reti

00002654 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>
TWI_ConfigType TWI_configerations ={ADDRESS,prescale_1};
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	00 d0       	rcall	.+0      	; 0x265a <TWI_init+0x6>
    265a:	cd b7       	in	r28, 0x3d	; 61
    265c:	de b7       	in	r29, 0x3e	; 62
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2662:	e0 e2       	ldi	r30, 0x20	; 32
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	80 83       	st	Z, r24
	TWSR = (Config_Ptr -> bit_rate);
    266a:	a1 e2       	ldi	r26, 0x21	; 33
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	81 81       	ldd	r24, Z+1	; 0x01
    2674:	8c 93       	st	X, r24
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr -> address); // my address = 0x01 :)
    2676:	a2 e2       	ldi	r26, 0x22	; 34
    2678:	b0 e0       	ldi	r27, 0x00	; 0
    267a:	e9 81       	ldd	r30, Y+1	; 0x01
    267c:	fa 81       	ldd	r31, Y+2	; 0x02
    267e:	80 81       	ld	r24, Z
    2680:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2682:	e6 e5       	ldi	r30, 0x56	; 86
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	84 e0       	ldi	r24, 0x04	; 4
    2688:	80 83       	st	Z, r24
}
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	cf 91       	pop	r28
    2690:	df 91       	pop	r29
    2692:	08 95       	ret

00002694 <TWI_start>:

void TWI_start(void)
{
    2694:	df 93       	push	r29
    2696:	cf 93       	push	r28
    2698:	cd b7       	in	r28, 0x3d	; 61
    269a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    269c:	e6 e5       	ldi	r30, 0x56	; 86
    269e:	f0 e0       	ldi	r31, 0x00	; 0
    26a0:	84 ea       	ldi	r24, 0xA4	; 164
    26a2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26a4:	e6 e5       	ldi	r30, 0x56	; 86
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	88 23       	and	r24, r24
    26ac:	dc f7       	brge	.-10     	; 0x26a4 <TWI_start+0x10>
}
    26ae:	cf 91       	pop	r28
    26b0:	df 91       	pop	r29
    26b2:	08 95       	ret

000026b4 <TWI_stop>:

void TWI_stop(void)
{
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    26bc:	e6 e5       	ldi	r30, 0x56	; 86
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	84 e9       	ldi	r24, 0x94	; 148
    26c2:	80 83       	st	Z, r24
}
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	0f 92       	push	r0
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    26d6:	e3 e2       	ldi	r30, 0x23	; 35
    26d8:	f0 e0       	ldi	r31, 0x00	; 0
    26da:	89 81       	ldd	r24, Y+1	; 0x01
    26dc:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    26de:	e6 e5       	ldi	r30, 0x56	; 86
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	84 e8       	ldi	r24, 0x84	; 132
    26e4:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    26e6:	e6 e5       	ldi	r30, 0x56	; 86
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	80 81       	ld	r24, Z
    26ec:	88 23       	and	r24, r24
    26ee:	dc f7       	brge	.-10     	; 0x26e6 <TWI_writeByte+0x1c>
}
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	cd b7       	in	r28, 0x3d	; 61
    26fe:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2700:	e6 e5       	ldi	r30, 0x56	; 86
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	84 ec       	ldi	r24, 0xC4	; 196
    2706:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2708:	e6 e5       	ldi	r30, 0x56	; 86
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
    270e:	88 23       	and	r24, r24
    2710:	dc f7       	brge	.-10     	; 0x2708 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2712:	e3 e2       	ldi	r30, 0x23	; 35
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
}
    2718:	cf 91       	pop	r28
    271a:	df 91       	pop	r29
    271c:	08 95       	ret

0000271e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    271e:	df 93       	push	r29
    2720:	cf 93       	push	r28
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2726:	e6 e5       	ldi	r30, 0x56	; 86
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	84 e8       	ldi	r24, 0x84	; 132
    272c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    272e:	e6 e5       	ldi	r30, 0x56	; 86
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	80 81       	ld	r24, Z
    2734:	88 23       	and	r24, r24
    2736:	dc f7       	brge	.-10     	; 0x272e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2738:	e3 e2       	ldi	r30, 0x23	; 35
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	0f 92       	push	r0
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    274e:	e1 e2       	ldi	r30, 0x21	; 33
    2750:	f0 e0       	ldi	r31, 0x00	; 0
    2752:	80 81       	ld	r24, Z
    2754:	88 7f       	andi	r24, 0xF8	; 248
    2756:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2758:	89 81       	ldd	r24, Y+1	; 0x01
}
    275a:	0f 90       	pop	r0
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	08 95       	ret

00002762 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    2762:	df 93       	push	r29
    2764:	cf 93       	push	r28
    2766:	00 d0       	rcall	.+0      	; 0x2768 <UART_init+0x6>
    2768:	00 d0       	rcall	.+0      	; 0x276a <UART_init+0x8>
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	9c 83       	std	Y+4, r25	; 0x04
    2770:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2772:	1a 82       	std	Y+2, r1	; 0x02
    2774:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2776:	eb e2       	ldi	r30, 0x2B	; 43
    2778:	f0 e0       	ldi	r31, 0x00	; 0
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    277e:	ea e2       	ldi	r30, 0x2A	; 42
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	88 e1       	ldi	r24, 0x18	; 24
    2784:	80 83       	st	Z, r24
	UCSRB |= (1<<3|((Config_Ptr -> bit_data)>>2));
    2786:	aa e2       	ldi	r26, 0x2A	; 42
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ea e2       	ldi	r30, 0x2A	; 42
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	90 81       	ld	r25, Z
    2790:	eb 81       	ldd	r30, Y+3	; 0x03
    2792:	fc 81       	ldd	r31, Y+4	; 0x04
    2794:	80 81       	ld	r24, Z
    2796:	86 95       	lsr	r24
    2798:	86 95       	lsr	r24
    279a:	89 2b       	or	r24, r25
    279c:	88 60       	ori	r24, 0x08	; 8
    279e:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC =((1<<1)|((Config_Ptr -> bit_data)))|((1<<5)|((Config_Ptr -> parity)))|((1<<3)|((Config_Ptr -> stop_bit)));
    27a0:	a0 e4       	ldi	r26, 0x40	; 64
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	eb 81       	ldd	r30, Y+3	; 0x03
    27a6:	fc 81       	ldd	r31, Y+4	; 0x04
    27a8:	90 81       	ld	r25, Z
    27aa:	eb 81       	ldd	r30, Y+3	; 0x03
    27ac:	fc 81       	ldd	r31, Y+4	; 0x04
    27ae:	81 81       	ldd	r24, Z+1	; 0x01
    27b0:	98 2b       	or	r25, r24
    27b2:	eb 81       	ldd	r30, Y+3	; 0x03
    27b4:	fc 81       	ldd	r31, Y+4	; 0x04
    27b6:	82 81       	ldd	r24, Z+2	; 0x02
    27b8:	89 2b       	or	r24, r25
    27ba:	8a 62       	ori	r24, 0x2A	; 42
    27bc:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    27be:	eb 81       	ldd	r30, Y+3	; 0x03
    27c0:	fc 81       	ldd	r31, Y+4	; 0x04
    27c2:	83 81       	ldd	r24, Z+3	; 0x03
    27c4:	94 81       	ldd	r25, Z+4	; 0x04
    27c6:	a5 81       	ldd	r26, Z+5	; 0x05
    27c8:	b6 81       	ldd	r27, Z+6	; 0x06
    27ca:	88 0f       	add	r24, r24
    27cc:	99 1f       	adc	r25, r25
    27ce:	aa 1f       	adc	r26, r26
    27d0:	bb 1f       	adc	r27, r27
    27d2:	88 0f       	add	r24, r24
    27d4:	99 1f       	adc	r25, r25
    27d6:	aa 1f       	adc	r26, r26
    27d8:	bb 1f       	adc	r27, r27
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	aa 1f       	adc	r26, r26
    27e0:	bb 1f       	adc	r27, r27
    27e2:	9c 01       	movw	r18, r24
    27e4:	ad 01       	movw	r20, r26
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	92 e1       	ldi	r25, 0x12	; 18
    27ea:	aa e7       	ldi	r26, 0x7A	; 122
    27ec:	b0 e0       	ldi	r27, 0x00	; 0
    27ee:	bc 01       	movw	r22, r24
    27f0:	cd 01       	movw	r24, r26
    27f2:	0e 94 a4 14 	call	0x2948	; 0x2948 <__udivmodsi4>
    27f6:	da 01       	movw	r26, r20
    27f8:	c9 01       	movw	r24, r18
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2800:	e0 e4       	ldi	r30, 0x40	; 64
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	89 2f       	mov	r24, r25
    280a:	99 27       	eor	r25, r25
    280c:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    280e:	e9 e2       	ldi	r30, 0x29	; 41
    2810:	f0 e0       	ldi	r31, 0x00	; 0
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	80 83       	st	Z, r24

}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	cf 91       	pop	r28
    2820:	df 91       	pop	r29
    2822:	08 95       	ret

00002824 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2824:	df 93       	push	r29
    2826:	cf 93       	push	r28
    2828:	0f 92       	push	r0
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2830:	eb e2       	ldi	r30, 0x2B	; 43
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	88 2f       	mov	r24, r24
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	80 72       	andi	r24, 0x20	; 32
    283c:	90 70       	andi	r25, 0x00	; 0
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	b9 f3       	breq	.-18     	; 0x2830 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2842:	ec e2       	ldi	r30, 0x2C	; 44
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    284a:	0f 90       	pop	r0
    284c:	cf 91       	pop	r28
    284e:	df 91       	pop	r29
    2850:	08 95       	ret

00002852 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2852:	df 93       	push	r29
    2854:	cf 93       	push	r28
    2856:	cd b7       	in	r28, 0x3d	; 61
    2858:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    285a:	eb e2       	ldi	r30, 0x2B	; 43
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	80 81       	ld	r24, Z
    2860:	88 23       	and	r24, r24
    2862:	dc f7       	brge	.-10     	; 0x285a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2864:	ec e2       	ldi	r30, 0x2C	; 44
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
}
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <UART_sendString+0x6>
    2876:	0f 92       	push	r0
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	9b 83       	std	Y+3, r25	; 0x03
    287e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2880:	19 82       	std	Y+1, r1	; 0x01
    2882:	0e c0       	rjmp	.+28     	; 0x28a0 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2884:	89 81       	ldd	r24, Y+1	; 0x01
    2886:	28 2f       	mov	r18, r24
    2888:	30 e0       	ldi	r19, 0x00	; 0
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	9b 81       	ldd	r25, Y+3	; 0x03
    288e:	fc 01       	movw	r30, r24
    2890:	e2 0f       	add	r30, r18
    2892:	f3 1f       	adc	r31, r19
    2894:	80 81       	ld	r24, Z
    2896:	0e 94 12 14 	call	0x2824	; 0x2824 <UART_sendByte>
		i++;
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	8f 5f       	subi	r24, 0xFF	; 255
    289e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28a0:	89 81       	ldd	r24, Y+1	; 0x01
    28a2:	28 2f       	mov	r18, r24
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	8a 81       	ldd	r24, Y+2	; 0x02
    28a8:	9b 81       	ldd	r25, Y+3	; 0x03
    28aa:	fc 01       	movw	r30, r24
    28ac:	e2 0f       	add	r30, r18
    28ae:	f3 1f       	adc	r31, r19
    28b0:	80 81       	ld	r24, Z
    28b2:	88 23       	and	r24, r24
    28b4:	39 f7       	brne	.-50     	; 0x2884 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    28b6:	0f 90       	pop	r0
    28b8:	0f 90       	pop	r0
    28ba:	0f 90       	pop	r0
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <UART_receiveString+0xa>
    28cc:	0f 92       	push	r0
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28d6:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	28 2f       	mov	r18, r24
    28dc:	30 e0       	ldi	r19, 0x00	; 0
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	8c 01       	movw	r16, r24
    28e4:	02 0f       	add	r16, r18
    28e6:	13 1f       	adc	r17, r19
    28e8:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    28ec:	f8 01       	movw	r30, r16
    28ee:	80 83       	st	Z, r24
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	8f 5f       	subi	r24, 0xFF	; 255
    28f6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	28 2f       	mov	r18, r24
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	8c 01       	movw	r16, r24
    2904:	02 0f       	add	r16, r18
    2906:	13 1f       	adc	r17, r19
    2908:	0e 94 29 14 	call	0x2852	; 0x2852 <UART_recieveByte>
    290c:	f8 01       	movw	r30, r16
    290e:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2910:	89 81       	ldd	r24, Y+1	; 0x01
    2912:	28 2f       	mov	r18, r24
    2914:	30 e0       	ldi	r19, 0x00	; 0
    2916:	8a 81       	ldd	r24, Y+2	; 0x02
    2918:	9b 81       	ldd	r25, Y+3	; 0x03
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	80 81       	ld	r24, Z
    2922:	83 32       	cpi	r24, 0x23	; 35
    2924:	31 f7       	brne	.-52     	; 0x28f2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	28 2f       	mov	r18, r24
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	8a 81       	ldd	r24, Y+2	; 0x02
    292e:	9b 81       	ldd	r25, Y+3	; 0x03
    2930:	fc 01       	movw	r30, r24
    2932:	e2 0f       	add	r30, r18
    2934:	f3 1f       	adc	r31, r19
    2936:	10 82       	st	Z, r1
}
    2938:	0f 90       	pop	r0
    293a:	0f 90       	pop	r0
    293c:	0f 90       	pop	r0
    293e:	cf 91       	pop	r28
    2940:	df 91       	pop	r29
    2942:	1f 91       	pop	r17
    2944:	0f 91       	pop	r16
    2946:	08 95       	ret

00002948 <__udivmodsi4>:
    2948:	a1 e2       	ldi	r26, 0x21	; 33
    294a:	1a 2e       	mov	r1, r26
    294c:	aa 1b       	sub	r26, r26
    294e:	bb 1b       	sub	r27, r27
    2950:	fd 01       	movw	r30, r26
    2952:	0d c0       	rjmp	.+26     	; 0x296e <__udivmodsi4_ep>

00002954 <__udivmodsi4_loop>:
    2954:	aa 1f       	adc	r26, r26
    2956:	bb 1f       	adc	r27, r27
    2958:	ee 1f       	adc	r30, r30
    295a:	ff 1f       	adc	r31, r31
    295c:	a2 17       	cp	r26, r18
    295e:	b3 07       	cpc	r27, r19
    2960:	e4 07       	cpc	r30, r20
    2962:	f5 07       	cpc	r31, r21
    2964:	20 f0       	brcs	.+8      	; 0x296e <__udivmodsi4_ep>
    2966:	a2 1b       	sub	r26, r18
    2968:	b3 0b       	sbc	r27, r19
    296a:	e4 0b       	sbc	r30, r20
    296c:	f5 0b       	sbc	r31, r21

0000296e <__udivmodsi4_ep>:
    296e:	66 1f       	adc	r22, r22
    2970:	77 1f       	adc	r23, r23
    2972:	88 1f       	adc	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	1a 94       	dec	r1
    2978:	69 f7       	brne	.-38     	; 0x2954 <__udivmodsi4_loop>
    297a:	60 95       	com	r22
    297c:	70 95       	com	r23
    297e:	80 95       	com	r24
    2980:	90 95       	com	r25
    2982:	9b 01       	movw	r18, r22
    2984:	ac 01       	movw	r20, r24
    2986:	bd 01       	movw	r22, r26
    2988:	cf 01       	movw	r24, r30
    298a:	08 95       	ret

0000298c <__prologue_saves__>:
    298c:	2f 92       	push	r2
    298e:	3f 92       	push	r3
    2990:	4f 92       	push	r4
    2992:	5f 92       	push	r5
    2994:	6f 92       	push	r6
    2996:	7f 92       	push	r7
    2998:	8f 92       	push	r8
    299a:	9f 92       	push	r9
    299c:	af 92       	push	r10
    299e:	bf 92       	push	r11
    29a0:	cf 92       	push	r12
    29a2:	df 92       	push	r13
    29a4:	ef 92       	push	r14
    29a6:	ff 92       	push	r15
    29a8:	0f 93       	push	r16
    29aa:	1f 93       	push	r17
    29ac:	cf 93       	push	r28
    29ae:	df 93       	push	r29
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	ca 1b       	sub	r28, r26
    29b6:	db 0b       	sbc	r29, r27
    29b8:	0f b6       	in	r0, 0x3f	; 63
    29ba:	f8 94       	cli
    29bc:	de bf       	out	0x3e, r29	; 62
    29be:	0f be       	out	0x3f, r0	; 63
    29c0:	cd bf       	out	0x3d, r28	; 61
    29c2:	09 94       	ijmp

000029c4 <__epilogue_restores__>:
    29c4:	2a 88       	ldd	r2, Y+18	; 0x12
    29c6:	39 88       	ldd	r3, Y+17	; 0x11
    29c8:	48 88       	ldd	r4, Y+16	; 0x10
    29ca:	5f 84       	ldd	r5, Y+15	; 0x0f
    29cc:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ce:	7d 84       	ldd	r7, Y+13	; 0x0d
    29d0:	8c 84       	ldd	r8, Y+12	; 0x0c
    29d2:	9b 84       	ldd	r9, Y+11	; 0x0b
    29d4:	aa 84       	ldd	r10, Y+10	; 0x0a
    29d6:	b9 84       	ldd	r11, Y+9	; 0x09
    29d8:	c8 84       	ldd	r12, Y+8	; 0x08
    29da:	df 80       	ldd	r13, Y+7	; 0x07
    29dc:	ee 80       	ldd	r14, Y+6	; 0x06
    29de:	fd 80       	ldd	r15, Y+5	; 0x05
    29e0:	0c 81       	ldd	r16, Y+4	; 0x04
    29e2:	1b 81       	ldd	r17, Y+3	; 0x03
    29e4:	aa 81       	ldd	r26, Y+2	; 0x02
    29e6:	b9 81       	ldd	r27, Y+1	; 0x01
    29e8:	ce 0f       	add	r28, r30
    29ea:	d1 1d       	adc	r29, r1
    29ec:	0f b6       	in	r0, 0x3f	; 63
    29ee:	f8 94       	cli
    29f0:	de bf       	out	0x3e, r29	; 62
    29f2:	0f be       	out	0x3f, r0	; 63
    29f4:	cd bf       	out	0x3d, r28	; 61
    29f6:	ed 01       	movw	r28, r26
    29f8:	08 95       	ret

000029fa <_exit>:
    29fa:	f8 94       	cli

000029fc <__stop_program>:
    29fc:	ff cf       	rjmp	.-2      	; 0x29fc <__stop_program>
