
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000040ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009e  00800060  000040ea  0000417e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001a  008000fe  008000fe  0000421c  2**0
                  ALLOC
  3 .stab         0000342c  00000000  00000000  0000421c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001100  00000000  00000000  00007648  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008748  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008888  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000089f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a641  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b52c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c2dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c6c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ce97  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7c 1e 	jmp	0x3cf8	; 0x3cf8 <__vector_7>
      20:	0c 94 af 1e 	jmp	0x3d5e	; 0x3d5e <__vector_8>
      24:	0c 94 49 1e 	jmp	0x3c92	; 0x3c92 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f0 e4       	ldi	r31, 0x40	; 64
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3f       	cpi	r26, 0xFE	; 254
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae ef       	ldi	r26, 0xFE	; 254
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <main>
      8a:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ee       	ldi	r26, 0xE8	; 232
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f7 1f 	jmp	0x3fee	; 0x3fee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 ee       	ldi	r24, 0xE8	; 232
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 13 20 	jmp	0x4026	; 0x4026 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 03 20 	jmp	0x4006	; 0x4006 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1f 20 	jmp	0x403e	; 0x403e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 07 20 	jmp	0x400e	; 0x400e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 23 20 	jmp	0x4046	; 0x4046 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	88 30       	cpi	r24, 0x08	; 8
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	88 30       	cpi	r24, 0x08	; 8
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	e4 c0       	rjmp	.+456    	; 0xf00 <GPIO_writePin+0x1e4>
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	e0 c0       	rjmp	.+448    	; 0xf00 <GPIO_writePin+0x1e4>
		/* Do Nothing */
	}
	else
	{
		/* write pin as required */
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	47 c0       	rjmp	.+142    	; 0xde4 <GPIO_writePin+0xc8>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	cb c0       	rjmp	.+406    	; 0xf00 <GPIO_writePin+0x1e4>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	67 c0       	rjmp	.+206    	; 0xe44 <GPIO_writePin+0x128>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	91 c0       	rjmp	.+290    	; 0xea4 <GPIO_writePin+0x188>
     d82:	be c0       	rjmp	.+380    	; 0xf00 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH )
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	a7 c0       	rjmp	.+334    	; 0xf00 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	88 23       	and	r24, r24
     db6:	09 f0       	breq	.+2      	; 0xdba <GPIO_writePin+0x9e>
     db8:	a3 c0       	rjmp	.+326    	; 0xf00 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA,pin_num);
     dba:	ab e3       	ldi	r26, 0x3B	; 59
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	eb e3       	ldi	r30, 0x3B	; 59
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	48 2f       	mov	r20, r24
     dc6:	8a 81       	ldd	r24, Y+2	; 0x02
     dc8:	28 2f       	mov	r18, r24
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	81 e0       	ldi	r24, 0x01	; 1
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	02 2e       	mov	r0, r18
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <GPIO_writePin+0xbc>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	0a 94       	dec	r0
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <GPIO_writePin+0xb8>
     ddc:	80 95       	com	r24
     dde:	84 23       	and	r24, r20
     de0:	8c 93       	st	X, r24
     de2:	8e c0       	rjmp	.+284    	; 0xf00 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH )
     de4:	8b 81       	ldd	r24, Y+3	; 0x03
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	a1 f4       	brne	.+40     	; 0xe12 <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB,pin_num);
     dea:	a8 e3       	ldi	r26, 0x38	; 56
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	e8 e3       	ldi	r30, 0x38	; 56
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <GPIO_writePin+0xec>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <GPIO_writePin+0xe8>
     e0c:	84 2b       	or	r24, r20
     e0e:	8c 93       	st	X, r24
     e10:	77 c0       	rjmp	.+238    	; 0xf00 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
     e12:	8b 81       	ldd	r24, Y+3	; 0x03
     e14:	88 23       	and	r24, r24
     e16:	09 f0       	breq	.+2      	; 0xe1a <GPIO_writePin+0xfe>
     e18:	73 c0       	rjmp	.+230    	; 0xf00 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB,pin_num);
     e1a:	a8 e3       	ldi	r26, 0x38	; 56
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	e8 e3       	ldi	r30, 0x38	; 56
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	80 81       	ld	r24, Z
     e24:	48 2f       	mov	r20, r24
     e26:	8a 81       	ldd	r24, Y+2	; 0x02
     e28:	28 2f       	mov	r18, r24
     e2a:	30 e0       	ldi	r19, 0x00	; 0
     e2c:	81 e0       	ldi	r24, 0x01	; 1
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 2e       	mov	r0, r18
     e32:	02 c0       	rjmp	.+4      	; 0xe38 <GPIO_writePin+0x11c>
     e34:	88 0f       	add	r24, r24
     e36:	99 1f       	adc	r25, r25
     e38:	0a 94       	dec	r0
     e3a:	e2 f7       	brpl	.-8      	; 0xe34 <GPIO_writePin+0x118>
     e3c:	80 95       	com	r24
     e3e:	84 23       	and	r24, r20
     e40:	8c 93       	st	X, r24
     e42:	5e c0       	rjmp	.+188    	; 0xf00 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH )
     e44:	8b 81       	ldd	r24, Y+3	; 0x03
     e46:	81 30       	cpi	r24, 0x01	; 1
     e48:	a1 f4       	brne	.+40     	; 0xe72 <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC,pin_num);
     e4a:	a5 e3       	ldi	r26, 0x35	; 53
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e3       	ldi	r30, 0x35	; 53
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	48 2f       	mov	r20, r24
     e56:	8a 81       	ldd	r24, Y+2	; 0x02
     e58:	28 2f       	mov	r18, r24
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	02 2e       	mov	r0, r18
     e62:	02 c0       	rjmp	.+4      	; 0xe68 <GPIO_writePin+0x14c>
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	0a 94       	dec	r0
     e6a:	e2 f7       	brpl	.-8      	; 0xe64 <GPIO_writePin+0x148>
     e6c:	84 2b       	or	r24, r20
     e6e:	8c 93       	st	X, r24
     e70:	47 c0       	rjmp	.+142    	; 0xf00 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	88 23       	and	r24, r24
     e76:	09 f0       	breq	.+2      	; 0xe7a <GPIO_writePin+0x15e>
     e78:	43 c0       	rjmp	.+134    	; 0xf00 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC,pin_num);
     e7a:	a5 e3       	ldi	r26, 0x35	; 53
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e5 e3       	ldi	r30, 0x35	; 53
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <GPIO_writePin+0x17c>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <GPIO_writePin+0x178>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	2e c0       	rjmp	.+92     	; 0xf00 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH )
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	81 30       	cpi	r24, 0x01	; 1
     ea8:	a1 f4       	brne	.+40     	; 0xed2 <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
     eaa:	a2 e3       	ldi	r26, 0x32	; 50
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e2 e3       	ldi	r30, 0x32	; 50
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	80 81       	ld	r24, Z
     eb4:	48 2f       	mov	r20, r24
     eb6:	8a 81       	ldd	r24, Y+2	; 0x02
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	02 2e       	mov	r0, r18
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <GPIO_writePin+0x1ac>
     ec4:	88 0f       	add	r24, r24
     ec6:	99 1f       	adc	r25, r25
     ec8:	0a 94       	dec	r0
     eca:	e2 f7       	brpl	.-8      	; 0xec4 <GPIO_writePin+0x1a8>
     ecc:	84 2b       	or	r24, r20
     ece:	8c 93       	st	X, r24
     ed0:	17 c0       	rjmp	.+46     	; 0xf00 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	88 23       	and	r24, r24
     ed6:	a1 f4       	brne	.+40     	; 0xf00 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD,pin_num);
     ed8:	a2 e3       	ldi	r26, 0x32	; 50
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e2 e3       	ldi	r30, 0x32	; 50
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <GPIO_writePin+0x1da>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <GPIO_writePin+0x1d6>
     efa:	80 95       	com	r24
     efc:	84 23       	and	r24, r20
     efe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     f00:	0f 90       	pop	r0
     f02:	0f 90       	pop	r0
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	08 95       	ret

00000f10 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     f10:	df 93       	push	r29
     f12:	cf 93       	push	r28
     f14:	00 d0       	rcall	.+0      	; 0xf16 <GPIO_readPin+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <GPIO_readPin+0x8>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	89 83       	std	Y+1, r24	; 0x01
     f20:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f22:	8a 81       	ldd	r24, Y+2	; 0x02
     f24:	88 30       	cpi	r24, 0x08	; 8
     f26:	18 f4       	brcc	.+6      	; 0xf2e <GPIO_readPin+0x1e>
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	84 30       	cpi	r24, 0x04	; 4
     f2c:	10 f0       	brcs	.+4      	; 0xf32 <GPIO_readPin+0x22>
	{
		/* Do Nothing */
		return LOGIC_LOW;
     f2e:	1d 82       	std	Y+5, r1	; 0x05
     f30:	82 c0       	rjmp	.+260    	; 0x1036 <GPIO_readPin+0x126>
	}
	else
	{
		/* read pin as required */
		switch(port_num)
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	28 2f       	mov	r18, r24
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	3c 83       	std	Y+4, r19	; 0x04
     f3a:	2b 83       	std	Y+3, r18	; 0x03
     f3c:	4b 81       	ldd	r20, Y+3	; 0x03
     f3e:	5c 81       	ldd	r21, Y+4	; 0x04
     f40:	41 30       	cpi	r20, 0x01	; 1
     f42:	51 05       	cpc	r21, r1
     f44:	79 f1       	breq	.+94     	; 0xfa4 <GPIO_readPin+0x94>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	82 30       	cpi	r24, 0x02	; 2
     f4c:	91 05       	cpc	r25, r1
     f4e:	34 f4       	brge	.+12     	; 0xf5c <GPIO_readPin+0x4c>
     f50:	2b 81       	ldd	r18, Y+3	; 0x03
     f52:	3c 81       	ldd	r19, Y+4	; 0x04
     f54:	21 15       	cp	r18, r1
     f56:	31 05       	cpc	r19, r1
     f58:	69 f0       	breq	.+26     	; 0xf74 <GPIO_readPin+0x64>
     f5a:	6c c0       	rjmp	.+216    	; 0x1034 <GPIO_readPin+0x124>
     f5c:	4b 81       	ldd	r20, Y+3	; 0x03
     f5e:	5c 81       	ldd	r21, Y+4	; 0x04
     f60:	42 30       	cpi	r20, 0x02	; 2
     f62:	51 05       	cpc	r21, r1
     f64:	b9 f1       	breq	.+110    	; 0xfd4 <GPIO_readPin+0xc4>
     f66:	8b 81       	ldd	r24, Y+3	; 0x03
     f68:	9c 81       	ldd	r25, Y+4	; 0x04
     f6a:	83 30       	cpi	r24, 0x03	; 3
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f4       	brne	.+2      	; 0xf72 <GPIO_readPin+0x62>
     f70:	49 c0       	rjmp	.+146    	; 0x1004 <GPIO_readPin+0xf4>
     f72:	60 c0       	rjmp	.+192    	; 0x1034 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num) )
     f74:	e9 e3       	ldi	r30, 0x39	; 57
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	a9 01       	movw	r20, r18
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <GPIO_readPin+0x7c>
     f88:	55 95       	asr	r21
     f8a:	47 95       	ror	r20
     f8c:	8a 95       	dec	r24
     f8e:	e2 f7       	brpl	.-8      	; 0xf88 <GPIO_readPin+0x78>
     f90:	ca 01       	movw	r24, r20
     f92:	81 70       	andi	r24, 0x01	; 1
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	88 23       	and	r24, r24
     f98:	19 f0       	breq	.+6      	; 0xfa0 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
     f9a:	51 e0       	ldi	r21, 0x01	; 1
     f9c:	5d 83       	std	Y+5, r21	; 0x05
     f9e:	4b c0       	rjmp	.+150    	; 0x1036 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fa0:	1d 82       	std	Y+5, r1	; 0x05
     fa2:	49 c0       	rjmp	.+146    	; 0x1036 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num) )
     fa4:	e6 e3       	ldi	r30, 0x36	; 54
     fa6:	f0 e0       	ldi	r31, 0x00	; 0
     fa8:	80 81       	ld	r24, Z
     faa:	28 2f       	mov	r18, r24
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	88 2f       	mov	r24, r24
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	a9 01       	movw	r20, r18
     fb6:	02 c0       	rjmp	.+4      	; 0xfbc <GPIO_readPin+0xac>
     fb8:	55 95       	asr	r21
     fba:	47 95       	ror	r20
     fbc:	8a 95       	dec	r24
     fbe:	e2 f7       	brpl	.-8      	; 0xfb8 <GPIO_readPin+0xa8>
     fc0:	ca 01       	movw	r24, r20
     fc2:	81 70       	andi	r24, 0x01	; 1
     fc4:	90 70       	andi	r25, 0x00	; 0
     fc6:	88 23       	and	r24, r24
     fc8:	19 f0       	breq	.+6      	; 0xfd0 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
     fca:	51 e0       	ldi	r21, 0x01	; 1
     fcc:	5d 83       	std	Y+5, r21	; 0x05
     fce:	33 c0       	rjmp	.+102    	; 0x1036 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
     fd0:	1d 82       	std	Y+5, r1	; 0x05
     fd2:	31 c0       	rjmp	.+98     	; 0x1036 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num) )
     fd4:	e3 e3       	ldi	r30, 0x33	; 51
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	28 2f       	mov	r18, r24
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	a9 01       	movw	r20, r18
     fe6:	02 c0       	rjmp	.+4      	; 0xfec <GPIO_readPin+0xdc>
     fe8:	55 95       	asr	r21
     fea:	47 95       	ror	r20
     fec:	8a 95       	dec	r24
     fee:	e2 f7       	brpl	.-8      	; 0xfe8 <GPIO_readPin+0xd8>
     ff0:	ca 01       	movw	r24, r20
     ff2:	81 70       	andi	r24, 0x01	; 1
     ff4:	90 70       	andi	r25, 0x00	; 0
     ff6:	88 23       	and	r24, r24
     ff8:	19 f0       	breq	.+6      	; 0x1000 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
     ffa:	51 e0       	ldi	r21, 0x01	; 1
     ffc:	5d 83       	std	Y+5, r21	; 0x05
     ffe:	1b c0       	rjmp	.+54     	; 0x1036 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1000:	1d 82       	std	Y+5, r1	; 0x05
    1002:	19 c0       	rjmp	.+50     	; 0x1036 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num) )
    1004:	e0 e3       	ldi	r30, 0x30	; 48
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	88 2f       	mov	r24, r24
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	a9 01       	movw	r20, r18
    1016:	02 c0       	rjmp	.+4      	; 0x101c <GPIO_readPin+0x10c>
    1018:	55 95       	asr	r21
    101a:	47 95       	ror	r20
    101c:	8a 95       	dec	r24
    101e:	e2 f7       	brpl	.-8      	; 0x1018 <GPIO_readPin+0x108>
    1020:	ca 01       	movw	r24, r20
    1022:	81 70       	andi	r24, 0x01	; 1
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	88 23       	and	r24, r24
    1028:	19 f0       	breq	.+6      	; 0x1030 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    102a:	51 e0       	ldi	r21, 0x01	; 1
    102c:	5d 83       	std	Y+5, r21	; 0x05
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1030:	1d 82       	std	Y+5, r1	; 0x05
    1032:	01 c0       	rjmp	.+2      	; 0x1036 <GPIO_readPin+0x126>
			}
			break;
		}
		return LOGIC_LOW;
    1034:	1d 82       	std	Y+5, r1	; 0x05
    1036:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	08 95       	ret

00001048 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1048:	df 93       	push	r29
    104a:	cf 93       	push	r28
    104c:	00 d0       	rcall	.+0      	; 0x104e <GPIO_setupPortDirection+0x6>
    104e:	00 d0       	rcall	.+0      	; 0x1050 <GPIO_setupPortDirection+0x8>
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	90 f5       	brcc	.+100    	; 0x10c2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	28 2f       	mov	r18, r24
    1062:	30 e0       	ldi	r19, 0x00	; 0
    1064:	3c 83       	std	Y+4, r19	; 0x04
    1066:	2b 83       	std	Y+3, r18	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	81 30       	cpi	r24, 0x01	; 1
    106e:	91 05       	cpc	r25, r1
    1070:	d1 f0       	breq	.+52     	; 0x10a6 <GPIO_setupPortDirection+0x5e>
    1072:	2b 81       	ldd	r18, Y+3	; 0x03
    1074:	3c 81       	ldd	r19, Y+4	; 0x04
    1076:	22 30       	cpi	r18, 0x02	; 2
    1078:	31 05       	cpc	r19, r1
    107a:	2c f4       	brge	.+10     	; 0x1086 <GPIO_setupPortDirection+0x3e>
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	61 f0       	breq	.+24     	; 0x109c <GPIO_setupPortDirection+0x54>
    1084:	1e c0       	rjmp	.+60     	; 0x10c2 <GPIO_setupPortDirection+0x7a>
    1086:	2b 81       	ldd	r18, Y+3	; 0x03
    1088:	3c 81       	ldd	r19, Y+4	; 0x04
    108a:	22 30       	cpi	r18, 0x02	; 2
    108c:	31 05       	cpc	r19, r1
    108e:	81 f0       	breq	.+32     	; 0x10b0 <GPIO_setupPortDirection+0x68>
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	83 30       	cpi	r24, 0x03	; 3
    1096:	91 05       	cpc	r25, r1
    1098:	81 f0       	breq	.+32     	; 0x10ba <GPIO_setupPortDirection+0x72>
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    109c:	ea e3       	ldi	r30, 0x3A	; 58
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	8a 81       	ldd	r24, Y+2	; 0x02
    10a2:	80 83       	st	Z, r24
    10a4:	0e c0       	rjmp	.+28     	; 0x10c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    10a6:	e7 e3       	ldi	r30, 0x37	; 55
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	8a 81       	ldd	r24, Y+2	; 0x02
    10ac:	80 83       	st	Z, r24
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    10b0:	e4 e3       	ldi	r30, 0x34	; 52
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	80 83       	st	Z, r24
    10b8:	04 c0       	rjmp	.+8      	; 0x10c2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10ba:	e1 e3       	ldi	r30, 0x31	; 49
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	80 83       	st	Z, r24
			break;
		}
	}
}
    10c2:	0f 90       	pop	r0
    10c4:	0f 90       	pop	r0
    10c6:	0f 90       	pop	r0
    10c8:	0f 90       	pop	r0
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <GPIO_writePort+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <GPIO_writePort+0x8>
    10d8:	cd b7       	in	r28, 0x3d	; 61
    10da:	de b7       	in	r29, 0x3e	; 62
    10dc:	89 83       	std	Y+1, r24	; 0x01
    10de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	84 30       	cpi	r24, 0x04	; 4
    10e4:	90 f5       	brcc	.+100    	; 0x114a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* write the port value as required */
		switch(port_num)
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3c 83       	std	Y+4, r19	; 0x04
    10ee:	2b 83       	std	Y+3, r18	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	d1 f0       	breq	.+52     	; 0x112e <GPIO_writePort+0x5e>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <GPIO_writePort+0x3e>
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	61 f0       	breq	.+24     	; 0x1124 <GPIO_writePort+0x54>
    110c:	1e c0       	rjmp	.+60     	; 0x114a <GPIO_writePort+0x7a>
    110e:	2b 81       	ldd	r18, Y+3	; 0x03
    1110:	3c 81       	ldd	r19, Y+4	; 0x04
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	81 f0       	breq	.+32     	; 0x1138 <GPIO_writePort+0x68>
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	81 f0       	breq	.+32     	; 0x1142 <GPIO_writePort+0x72>
    1122:	13 c0       	rjmp	.+38     	; 0x114a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1124:	eb e3       	ldi	r30, 0x3B	; 59
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	8a 81       	ldd	r24, Y+2	; 0x02
    112a:	80 83       	st	Z, r24
    112c:	0e c0       	rjmp	.+28     	; 0x114a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    112e:	e8 e3       	ldi	r30, 0x38	; 56
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	8a 81       	ldd	r24, Y+2	; 0x02
    1134:	80 83       	st	Z, r24
    1136:	09 c0       	rjmp	.+18     	; 0x114a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1138:	e5 e3       	ldi	r30, 0x35	; 53
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	80 83       	st	Z, r24
    1140:	04 c0       	rjmp	.+8      	; 0x114a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1142:	e2 e3       	ldi	r30, 0x32	; 50
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	8a 81       	ldd	r24, Y+2	; 0x02
    1148:	80 83       	st	Z, r24
			break;
		}
	}

}
    114a:	0f 90       	pop	r0
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	08 95       	ret

00001158 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1158:	df 93       	push	r29
    115a:	cf 93       	push	r28
    115c:	00 d0       	rcall	.+0      	; 0x115e <GPIO_readPort+0x6>
    115e:	00 d0       	rcall	.+0      	; 0x1160 <GPIO_readPort+0x8>
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	10 f0       	brcs	.+4      	; 0x1170 <GPIO_readPort+0x18>
	{
		/* Do Nothing */
		return LOGIC_LOW;
    116c:	1c 82       	std	Y+4, r1	; 0x04
    116e:	34 c0       	rjmp	.+104    	; 0x11d8 <GPIO_readPort+0x80>
	}
	else
	{
		/* read the port value as required */
		switch(port_num)
    1170:	89 81       	ldd	r24, Y+1	; 0x01
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	3b 83       	std	Y+3, r19	; 0x03
    1178:	2a 83       	std	Y+2, r18	; 0x02
    117a:	8a 81       	ldd	r24, Y+2	; 0x02
    117c:	9b 81       	ldd	r25, Y+3	; 0x03
    117e:	81 30       	cpi	r24, 0x01	; 1
    1180:	91 05       	cpc	r25, r1
    1182:	d1 f0       	breq	.+52     	; 0x11b8 <GPIO_readPort+0x60>
    1184:	2a 81       	ldd	r18, Y+2	; 0x02
    1186:	3b 81       	ldd	r19, Y+3	; 0x03
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	2c f4       	brge	.+10     	; 0x1198 <GPIO_readPort+0x40>
    118e:	8a 81       	ldd	r24, Y+2	; 0x02
    1190:	9b 81       	ldd	r25, Y+3	; 0x03
    1192:	00 97       	sbiw	r24, 0x00	; 0
    1194:	61 f0       	breq	.+24     	; 0x11ae <GPIO_readPort+0x56>
    1196:	1f c0       	rjmp	.+62     	; 0x11d6 <GPIO_readPort+0x7e>
    1198:	2a 81       	ldd	r18, Y+2	; 0x02
    119a:	3b 81       	ldd	r19, Y+3	; 0x03
    119c:	22 30       	cpi	r18, 0x02	; 2
    119e:	31 05       	cpc	r19, r1
    11a0:	81 f0       	breq	.+32     	; 0x11c2 <GPIO_readPort+0x6a>
    11a2:	8a 81       	ldd	r24, Y+2	; 0x02
    11a4:	9b 81       	ldd	r25, Y+3	; 0x03
    11a6:	83 30       	cpi	r24, 0x03	; 3
    11a8:	91 05       	cpc	r25, r1
    11aa:	81 f0       	breq	.+32     	; 0x11cc <GPIO_readPort+0x74>
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    11ae:	e9 e3       	ldi	r30, 0x39	; 57
    11b0:	f0 e0       	ldi	r31, 0x00	; 0
    11b2:	90 81       	ld	r25, Z
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	10 c0       	rjmp	.+32     	; 0x11d8 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			return PINB;
    11b8:	e6 e3       	ldi	r30, 0x36	; 54
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	20 81       	ld	r18, Z
    11be:	2c 83       	std	Y+4, r18	; 0x04
    11c0:	0b c0       	rjmp	.+22     	; 0x11d8 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			return PINC;
    11c2:	e3 e3       	ldi	r30, 0x33	; 51
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	30 81       	ld	r19, Z
    11c8:	3c 83       	std	Y+4, r19	; 0x04
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			return PIND;
    11cc:	e0 e3       	ldi	r30, 0x30	; 48
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	8c 83       	std	Y+4, r24	; 0x04
    11d4:	01 c0       	rjmp	.+2      	; 0x11d8 <GPIO_readPort+0x80>
			break;
		}
		return LOGIC_LOW;
    11d6:	1c 82       	std	Y+4, r1	; 0x04
    11d8:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    11da:	0f 90       	pop	r0
    11dc:	0f 90       	pop	r0
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	cf 91       	pop	r28
    11e4:	df 91       	pop	r29
    11e6:	08 95       	ret

000011e8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11e8:	df 93       	push	r29
    11ea:	cf 93       	push	r28
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	60 97       	sbiw	r28, 0x10	; 16
    11f2:	0f b6       	in	r0, 0x3f	; 63
    11f4:	f8 94       	cli
    11f6:	de bf       	out	0x3e, r29	; 62
    11f8:	0f be       	out	0x3f, r0	; 63
    11fa:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	64 e0       	ldi	r22, 0x04	; 4
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	65 e0       	ldi	r22, 0x05	; 5
    120a:	40 e0       	ldi	r20, 0x00	; 0
    120c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	66 e0       	ldi	r22, 0x06	; 6
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	67 e0       	ldi	r22, 0x07	; 7
    121e:	40 e0       	ldi	r20, 0x00	; 0
    1220:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1224:	83 e0       	ldi	r24, 0x03	; 3
    1226:	62 e0       	ldi	r22, 0x02	; 2
    1228:	40 e0       	ldi	r20, 0x00	; 0
    122a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    122e:	83 e0       	ldi	r24, 0x03	; 3
    1230:	63 e0       	ldi	r22, 0x03	; 3
    1232:	40 e0       	ldi	r20, 0x00	; 0
    1234:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1238:	83 e0       	ldi	r24, 0x03	; 3
    123a:	64 e0       	ldi	r22, 0x04	; 4
    123c:	40 e0       	ldi	r20, 0x00	; 0
    123e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1242:	83 e0       	ldi	r24, 0x03	; 3
    1244:	65 e0       	ldi	r22, 0x05	; 5
    1246:	40 e0       	ldi	r20, 0x00	; 0
    1248:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    124c:	1f 86       	std	Y+15, r1	; 0x0f
    124e:	b4 c0       	rjmp	.+360    	; 0x13b8 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	98 2f       	mov	r25, r24
    1254:	9c 5f       	subi	r25, 0xFC	; 252
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	69 2f       	mov	r22, r25
    125a:	41 e0       	ldi	r20, 0x01	; 1
    125c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1260:	8f 85       	ldd	r24, Y+15	; 0x0f
    1262:	98 2f       	mov	r25, r24
    1264:	9c 5f       	subi	r25, 0xFC	; 252
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	69 2f       	mov	r22, r25
    126a:	40 e0       	ldi	r20, 0x00	; 0
    126c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1270:	18 8a       	std	Y+16, r1	; 0x10
    1272:	22 c0       	rjmp	.+68     	; 0x12b8 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1274:	88 89       	ldd	r24, Y+16	; 0x10
    1276:	98 2f       	mov	r25, r24
    1278:	9e 5f       	subi	r25, 0xFE	; 254
    127a:	83 e0       	ldi	r24, 0x03	; 3
    127c:	69 2f       	mov	r22, r25
    127e:	0e 94 88 07 	call	0xf10	; 0xf10 <GPIO_readPin>
    1282:	88 23       	and	r24, r24
    1284:	b1 f4       	brne	.+44     	; 0x12b2 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1286:	8f 85       	ldd	r24, Y+15	; 0x0f
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	88 0f       	add	r24, r24
    1292:	99 1f       	adc	r25, r25
    1294:	98 2f       	mov	r25, r24
    1296:	88 89       	ldd	r24, Y+16	; 0x10
    1298:	89 0f       	add	r24, r25
    129a:	8f 5f       	subi	r24, 0xFF	; 255
    129c:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    12a0:	60 96       	adiw	r28, 0x10	; 16
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    12b2:	88 89       	ldd	r24, Y+16	; 0x10
    12b4:	8f 5f       	subi	r24, 0xFF	; 255
    12b6:	88 8b       	std	Y+16, r24	; 0x10
    12b8:	88 89       	ldd	r24, Y+16	; 0x10
    12ba:	84 30       	cpi	r24, 0x04	; 4
    12bc:	d8 f2       	brcs	.-74     	; 0x1274 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    12be:	8f 85       	ldd	r24, Y+15	; 0x0f
    12c0:	98 2f       	mov	r25, r24
    12c2:	9c 5f       	subi	r25, 0xFC	; 252
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	69 2f       	mov	r22, r25
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	90 e0       	ldi	r25, 0x00	; 0
    12d2:	a0 ea       	ldi	r26, 0xA0	; 160
    12d4:	b0 e4       	ldi	r27, 0x40	; 64
    12d6:	8b 87       	std	Y+11, r24	; 0x0b
    12d8:	9c 87       	std	Y+12, r25	; 0x0c
    12da:	ad 87       	std	Y+13, r26	; 0x0d
    12dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12de:	6b 85       	ldd	r22, Y+11	; 0x0b
    12e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e6:	20 e0       	ldi	r18, 0x00	; 0
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	4a ef       	ldi	r20, 0xFA	; 250
    12ec:	54 e4       	ldi	r21, 0x44	; 68
    12ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f2:	dc 01       	movw	r26, r24
    12f4:	cb 01       	movw	r24, r22
    12f6:	8f 83       	std	Y+7, r24	; 0x07
    12f8:	98 87       	std	Y+8, r25	; 0x08
    12fa:	a9 87       	std	Y+9, r26	; 0x09
    12fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1300:	78 85       	ldd	r23, Y+8	; 0x08
    1302:	89 85       	ldd	r24, Y+9	; 0x09
    1304:	9a 85       	ldd	r25, Y+10	; 0x0a
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e8       	ldi	r20, 0x80	; 128
    130c:	5f e3       	ldi	r21, 0x3F	; 63
    130e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1312:	88 23       	and	r24, r24
    1314:	2c f4       	brge	.+10     	; 0x1320 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	9e 83       	std	Y+6, r25	; 0x06
    131c:	8d 83       	std	Y+5, r24	; 0x05
    131e:	3f c0       	rjmp	.+126    	; 0x139e <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1320:	6f 81       	ldd	r22, Y+7	; 0x07
    1322:	78 85       	ldd	r23, Y+8	; 0x08
    1324:	89 85       	ldd	r24, Y+9	; 0x09
    1326:	9a 85       	ldd	r25, Y+10	; 0x0a
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	3f ef       	ldi	r19, 0xFF	; 255
    132c:	4f e7       	ldi	r20, 0x7F	; 127
    132e:	57 e4       	ldi	r21, 0x47	; 71
    1330:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1334:	18 16       	cp	r1, r24
    1336:	4c f5       	brge	.+82     	; 0x138a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1338:	6b 85       	ldd	r22, Y+11	; 0x0b
    133a:	7c 85       	ldd	r23, Y+12	; 0x0c
    133c:	8d 85       	ldd	r24, Y+13	; 0x0d
    133e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1340:	20 e0       	ldi	r18, 0x00	; 0
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	40 e2       	ldi	r20, 0x20	; 32
    1346:	51 e4       	ldi	r21, 0x41	; 65
    1348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134c:	dc 01       	movw	r26, r24
    134e:	cb 01       	movw	r24, r22
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	9e 83       	std	Y+6, r25	; 0x06
    135e:	8d 83       	std	Y+5, r24	; 0x05
    1360:	0f c0       	rjmp	.+30     	; 0x1380 <KEYPAD_getPressedKey+0x198>
    1362:	88 ec       	ldi	r24, 0xC8	; 200
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	01 97       	sbiw	r24, 0x01	; 1
    1370:	f1 f7       	brne	.-4      	; 0x136e <KEYPAD_getPressedKey+0x186>
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1376:	8d 81       	ldd	r24, Y+5	; 0x05
    1378:	9e 81       	ldd	r25, Y+6	; 0x06
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9e 83       	std	Y+6, r25	; 0x06
    137e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1380:	8d 81       	ldd	r24, Y+5	; 0x05
    1382:	9e 81       	ldd	r25, Y+6	; 0x06
    1384:	00 97       	sbiw	r24, 0x00	; 0
    1386:	69 f7       	brne	.-38     	; 0x1362 <KEYPAD_getPressedKey+0x17a>
    1388:	14 c0       	rjmp	.+40     	; 0x13b2 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    138a:	6f 81       	ldd	r22, Y+7	; 0x07
    138c:	78 85       	ldd	r23, Y+8	; 0x08
    138e:	89 85       	ldd	r24, Y+9	; 0x09
    1390:	9a 85       	ldd	r25, Y+10	; 0x0a
    1392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	8d 81       	ldd	r24, Y+5	; 0x05
    13a0:	9e 81       	ldd	r25, Y+6	; 0x06
    13a2:	9a 83       	std	Y+2, r25	; 0x02
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	89 81       	ldd	r24, Y+1	; 0x01
    13a8:	9a 81       	ldd	r25, Y+2	; 0x02
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	f1 f7       	brne	.-4      	; 0x13aa <KEYPAD_getPressedKey+0x1c2>
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8f 87       	std	Y+15, r24	; 0x0f
    13b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ba:	84 30       	cpi	r24, 0x04	; 4
    13bc:	08 f4       	brcc	.+2      	; 0x13c0 <KEYPAD_getPressedKey+0x1d8>
    13be:	48 cf       	rjmp	.-368    	; 0x1250 <KEYPAD_getPressedKey+0x68>
    13c0:	45 cf       	rjmp	.-374    	; 0x124c <KEYPAD_getPressedKey+0x64>

000013c2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <KEYPAD_4x4_adjustKeyNumber+0x8>
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
    13ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13d0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13d2:	8a 81       	ldd	r24, Y+2	; 0x02
    13d4:	28 2f       	mov	r18, r24
    13d6:	30 e0       	ldi	r19, 0x00	; 0
    13d8:	3c 83       	std	Y+4, r19	; 0x04
    13da:	2b 83       	std	Y+3, r18	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	88 30       	cpi	r24, 0x08	; 8
    13e2:	91 05       	cpc	r25, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13e6:	70 c0       	rjmp	.+224    	; 0x14c8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13e8:	2b 81       	ldd	r18, Y+3	; 0x03
    13ea:	3c 81       	ldd	r19, Y+4	; 0x04
    13ec:	29 30       	cpi	r18, 0x09	; 9
    13ee:	31 05       	cpc	r19, r1
    13f0:	5c f5       	brge	.+86     	; 0x1448 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	84 30       	cpi	r24, 0x04	; 4
    13f8:	91 05       	cpc	r25, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13fc:	59 c0       	rjmp	.+178    	; 0x14b0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1400:	3c 81       	ldd	r19, Y+4	; 0x04
    1402:	25 30       	cpi	r18, 0x05	; 5
    1404:	31 05       	cpc	r19, r1
    1406:	9c f4       	brge	.+38     	; 0x142e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	9c 81       	ldd	r25, Y+4	; 0x04
    140c:	82 30       	cpi	r24, 0x02	; 2
    140e:	91 05       	cpc	r25, r1
    1410:	09 f4       	brne	.+2      	; 0x1414 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1412:	48 c0       	rjmp	.+144    	; 0x14a4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1414:	2b 81       	ldd	r18, Y+3	; 0x03
    1416:	3c 81       	ldd	r19, Y+4	; 0x04
    1418:	23 30       	cpi	r18, 0x03	; 3
    141a:	31 05       	cpc	r19, r1
    141c:	0c f0       	brlt	.+2      	; 0x1420 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    141e:	45 c0       	rjmp	.+138    	; 0x14aa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	09 f4       	brne	.+2      	; 0x142c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    142a:	39 c0       	rjmp	.+114    	; 0x149e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    142c:	67 c0       	rjmp	.+206    	; 0x14fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    142e:	2b 81       	ldd	r18, Y+3	; 0x03
    1430:	3c 81       	ldd	r19, Y+4	; 0x04
    1432:	26 30       	cpi	r18, 0x06	; 6
    1434:	31 05       	cpc	r19, r1
    1436:	09 f4       	brne	.+2      	; 0x143a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1438:	41 c0       	rjmp	.+130    	; 0x14bc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	9c 81       	ldd	r25, Y+4	; 0x04
    143e:	87 30       	cpi	r24, 0x07	; 7
    1440:	91 05       	cpc	r25, r1
    1442:	0c f0       	brlt	.+2      	; 0x1446 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1444:	3e c0       	rjmp	.+124    	; 0x14c2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1446:	37 c0       	rjmp	.+110    	; 0x14b6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1448:	2b 81       	ldd	r18, Y+3	; 0x03
    144a:	3c 81       	ldd	r19, Y+4	; 0x04
    144c:	2c 30       	cpi	r18, 0x0C	; 12
    144e:	31 05       	cpc	r19, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1452:	46 c0       	rjmp	.+140    	; 0x14e0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	8d 30       	cpi	r24, 0x0D	; 13
    145a:	91 05       	cpc	r25, r1
    145c:	5c f4       	brge	.+22     	; 0x1474 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    145e:	2b 81       	ldd	r18, Y+3	; 0x03
    1460:	3c 81       	ldd	r19, Y+4	; 0x04
    1462:	2a 30       	cpi	r18, 0x0A	; 10
    1464:	31 05       	cpc	r19, r1
    1466:	b1 f1       	breq	.+108    	; 0x14d4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1468:	8b 81       	ldd	r24, Y+3	; 0x03
    146a:	9c 81       	ldd	r25, Y+4	; 0x04
    146c:	8b 30       	cpi	r24, 0x0B	; 11
    146e:	91 05       	cpc	r25, r1
    1470:	a4 f5       	brge	.+104    	; 0x14da <KEYPAD_4x4_adjustKeyNumber+0x118>
    1472:	2d c0       	rjmp	.+90     	; 0x14ce <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1474:	2b 81       	ldd	r18, Y+3	; 0x03
    1476:	3c 81       	ldd	r19, Y+4	; 0x04
    1478:	2e 30       	cpi	r18, 0x0E	; 14
    147a:	31 05       	cpc	r19, r1
    147c:	b9 f1       	breq	.+110    	; 0x14ec <KEYPAD_4x4_adjustKeyNumber+0x12a>
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	9c 81       	ldd	r25, Y+4	; 0x04
    1482:	8e 30       	cpi	r24, 0x0E	; 14
    1484:	91 05       	cpc	r25, r1
    1486:	7c f1       	brlt	.+94     	; 0x14e6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1488:	2b 81       	ldd	r18, Y+3	; 0x03
    148a:	3c 81       	ldd	r19, Y+4	; 0x04
    148c:	2f 30       	cpi	r18, 0x0F	; 15
    148e:	31 05       	cpc	r19, r1
    1490:	79 f1       	breq	.+94     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	80 31       	cpi	r24, 0x10	; 16
    1498:	91 05       	cpc	r25, r1
    149a:	69 f1       	breq	.+90     	; 0x14f6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    149c:	2f c0       	rjmp	.+94     	; 0x14fc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    149e:	87 e0       	ldi	r24, 0x07	; 7
    14a0:	89 83       	std	Y+1, r24	; 0x01
    14a2:	2e c0       	rjmp	.+92     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    14a4:	88 e0       	ldi	r24, 0x08	; 8
    14a6:	89 83       	std	Y+1, r24	; 0x01
    14a8:	2b c0       	rjmp	.+86     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    14aa:	89 e0       	ldi	r24, 0x09	; 9
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	28 c0       	rjmp	.+80     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    14b0:	85 e2       	ldi	r24, 0x25	; 37
    14b2:	89 83       	std	Y+1, r24	; 0x01
    14b4:	25 c0       	rjmp	.+74     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    14b6:	84 e0       	ldi	r24, 0x04	; 4
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	22 c0       	rjmp	.+68     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    14bc:	85 e0       	ldi	r24, 0x05	; 5
    14be:	89 83       	std	Y+1, r24	; 0x01
    14c0:	1f c0       	rjmp	.+62     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    14c2:	86 e0       	ldi	r24, 0x06	; 6
    14c4:	89 83       	std	Y+1, r24	; 0x01
    14c6:	1c c0       	rjmp	.+56     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14c8:	8a e2       	ldi	r24, 0x2A	; 42
    14ca:	89 83       	std	Y+1, r24	; 0x01
    14cc:	19 c0       	rjmp	.+50     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	89 83       	std	Y+1, r24	; 0x01
    14d2:	16 c0       	rjmp	.+44     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14d4:	82 e0       	ldi	r24, 0x02	; 2
    14d6:	89 83       	std	Y+1, r24	; 0x01
    14d8:	13 c0       	rjmp	.+38     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	10 c0       	rjmp	.+32     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14e0:	8d e2       	ldi	r24, 0x2D	; 45
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	0d c0       	rjmp	.+26     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14e6:	8d e0       	ldi	r24, 0x0D	; 13
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    14ec:	19 82       	std	Y+1, r1	; 0x01
    14ee:	08 c0       	rjmp	.+16     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14f0:	8d e3       	ldi	r24, 0x3D	; 61
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	05 c0       	rjmp	.+10     	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14f6:	8b e2       	ldi	r24, 0x2B	; 43
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1500:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	0f 90       	pop	r0
    1508:	0f 90       	pop	r0
    150a:	cf 91       	pop	r28
    150c:	df 91       	pop	r29
    150e:	08 95       	ret

00001510 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1510:	df 93       	push	r29
    1512:	cf 93       	push	r28
    1514:	cd b7       	in	r28, 0x3d	; 61
    1516:	de b7       	in	r29, 0x3e	; 62
    1518:	2e 97       	sbiw	r28, 0x0e	; 14
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	61 e0       	ldi	r22, 0x01	; 1
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	62 e0       	ldi	r22, 0x02	; 2
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a0 ea       	ldi	r26, 0xA0	; 160
    153e:	b1 e4       	ldi	r27, 0x41	; 65
    1540:	8b 87       	std	Y+11, r24	; 0x0b
    1542:	9c 87       	std	Y+12, r25	; 0x0c
    1544:	ad 87       	std	Y+13, r26	; 0x0d
    1546:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1548:	6b 85       	ldd	r22, Y+11	; 0x0b
    154a:	7c 85       	ldd	r23, Y+12	; 0x0c
    154c:	8d 85       	ldd	r24, Y+13	; 0x0d
    154e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	4a ef       	ldi	r20, 0xFA	; 250
    1556:	54 e4       	ldi	r21, 0x44	; 68
    1558:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	8f 83       	std	Y+7, r24	; 0x07
    1562:	98 87       	std	Y+8, r25	; 0x08
    1564:	a9 87       	std	Y+9, r26	; 0x09
    1566:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1568:	6f 81       	ldd	r22, Y+7	; 0x07
    156a:	78 85       	ldd	r23, Y+8	; 0x08
    156c:	89 85       	ldd	r24, Y+9	; 0x09
    156e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	40 e8       	ldi	r20, 0x80	; 128
    1576:	5f e3       	ldi	r21, 0x3F	; 63
    1578:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157c:	88 23       	and	r24, r24
    157e:	2c f4       	brge	.+10     	; 0x158a <LCD_init+0x7a>
		__ticks = 1;
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	9e 83       	std	Y+6, r25	; 0x06
    1586:	8d 83       	std	Y+5, r24	; 0x05
    1588:	3f c0       	rjmp	.+126    	; 0x1608 <LCD_init+0xf8>
	else if (__tmp > 65535)
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	3f ef       	ldi	r19, 0xFF	; 255
    1596:	4f e7       	ldi	r20, 0x7F	; 127
    1598:	57 e4       	ldi	r21, 0x47	; 71
    159a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159e:	18 16       	cp	r1, r24
    15a0:	4c f5       	brge	.+82     	; 0x15f4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	40 e2       	ldi	r20, 0x20	; 32
    15b0:	51 e4       	ldi	r21, 0x41	; 65
    15b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b6:	dc 01       	movw	r26, r24
    15b8:	cb 01       	movw	r24, r22
    15ba:	bc 01       	movw	r22, r24
    15bc:	cd 01       	movw	r24, r26
    15be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
    15ca:	0f c0       	rjmp	.+30     	; 0x15ea <LCD_init+0xda>
    15cc:	88 ec       	ldi	r24, 0xC8	; 200
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9c 83       	std	Y+4, r25	; 0x04
    15d2:	8b 83       	std	Y+3, r24	; 0x03
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	f1 f7       	brne	.-4      	; 0x15d8 <LCD_init+0xc8>
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e0:	8d 81       	ldd	r24, Y+5	; 0x05
    15e2:	9e 81       	ldd	r25, Y+6	; 0x06
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	9e 83       	std	Y+6, r25	; 0x06
    15e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	69 f7       	brne	.-38     	; 0x15cc <LCD_init+0xbc>
    15f2:	14 c0       	rjmp	.+40     	; 0x161c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f4:	6f 81       	ldd	r22, Y+7	; 0x07
    15f6:	78 85       	ldd	r23, Y+8	; 0x08
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	9a 83       	std	Y+2, r25	; 0x02
    160e:	89 83       	std	Y+1, r24	; 0x01
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	01 97       	sbiw	r24, 0x01	; 1
    1616:	f1 f7       	brne	.-4      	; 0x1614 <LCD_init+0x104>
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	63 e0       	ldi	r22, 0x03	; 3
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1626:	80 e0       	ldi	r24, 0x00	; 0
    1628:	64 e0       	ldi	r22, 0x04	; 4
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	65 e0       	ldi	r22, 0x05	; 5
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	66 e0       	ldi	r22, 0x06	; 6
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1644:	83 e3       	ldi	r24, 0x33	; 51
    1646:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    164a:	82 e3       	ldi	r24, 0x32	; 50
    164c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1650:	88 e2       	ldi	r24, 0x28	; 40
    1652:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1656:	8c e0       	ldi	r24, 0x0C	; 12
    1658:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    165c:	81 e0       	ldi	r24, 0x01	; 1
    165e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
}
    1662:	2e 96       	adiw	r28, 0x0e	; 14
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	de bf       	out	0x3e, r29	; 62
    166a:	0f be       	out	0x3f, r0	; 63
    166c:	cd bf       	out	0x3d, r28	; 61
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	df 93       	push	r29
    167a:	cf 93       	push	r28
    167c:	cd b7       	in	r28, 0x3d	; 61
    167e:	de b7       	in	r29, 0x3e	; 62
    1680:	c3 56       	subi	r28, 0x63	; 99
    1682:	d0 40       	sbci	r29, 0x00	; 0
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	de bf       	out	0x3e, r29	; 62
    168a:	0f be       	out	0x3f, r0	; 63
    168c:	cd bf       	out	0x3d, r28	; 61
    168e:	fe 01       	movw	r30, r28
    1690:	ed 59       	subi	r30, 0x9D	; 157
    1692:	ff 4f       	sbci	r31, 0xFF	; 255
    1694:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	61 e0       	ldi	r22, 0x01	; 1
    169a:	40 e0       	ldi	r20, 0x00	; 0
    169c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    16a0:	fe 01       	movw	r30, r28
    16a2:	e1 5a       	subi	r30, 0xA1	; 161
    16a4:	ff 4f       	sbci	r31, 0xFF	; 255
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 e8       	ldi	r26, 0x80	; 128
    16ac:	bf e3       	ldi	r27, 0x3F	; 63
    16ae:	80 83       	st	Z, r24
    16b0:	91 83       	std	Z+1, r25	; 0x01
    16b2:	a2 83       	std	Z+2, r26	; 0x02
    16b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b6:	8e 01       	movw	r16, r28
    16b8:	05 5a       	subi	r16, 0xA5	; 165
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	fe 01       	movw	r30, r28
    16be:	e1 5a       	subi	r30, 0xA1	; 161
    16c0:	ff 4f       	sbci	r31, 0xFF	; 255
    16c2:	60 81       	ld	r22, Z
    16c4:	71 81       	ldd	r23, Z+1	; 0x01
    16c6:	82 81       	ldd	r24, Z+2	; 0x02
    16c8:	93 81       	ldd	r25, Z+3	; 0x03
    16ca:	20 e0       	ldi	r18, 0x00	; 0
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	4a ef       	ldi	r20, 0xFA	; 250
    16d0:	54 e4       	ldi	r21, 0x44	; 68
    16d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d6:	dc 01       	movw	r26, r24
    16d8:	cb 01       	movw	r24, r22
    16da:	f8 01       	movw	r30, r16
    16dc:	80 83       	st	Z, r24
    16de:	91 83       	std	Z+1, r25	; 0x01
    16e0:	a2 83       	std	Z+2, r26	; 0x02
    16e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16e4:	fe 01       	movw	r30, r28
    16e6:	e5 5a       	subi	r30, 0xA5	; 165
    16e8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	82 81       	ldd	r24, Z+2	; 0x02
    16f0:	93 81       	ldd	r25, Z+3	; 0x03
    16f2:	20 e0       	ldi	r18, 0x00	; 0
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	40 e8       	ldi	r20, 0x80	; 128
    16f8:	5f e3       	ldi	r21, 0x3F	; 63
    16fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16fe:	88 23       	and	r24, r24
    1700:	44 f4       	brge	.+16     	; 0x1712 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1702:	fe 01       	movw	r30, r28
    1704:	e7 5a       	subi	r30, 0xA7	; 167
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	91 83       	std	Z+1, r25	; 0x01
    170e:	80 83       	st	Z, r24
    1710:	64 c0       	rjmp	.+200    	; 0x17da <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1712:	fe 01       	movw	r30, r28
    1714:	e5 5a       	subi	r30, 0xA5	; 165
    1716:	ff 4f       	sbci	r31, 0xFF	; 255
    1718:	60 81       	ld	r22, Z
    171a:	71 81       	ldd	r23, Z+1	; 0x01
    171c:	82 81       	ldd	r24, Z+2	; 0x02
    171e:	93 81       	ldd	r25, Z+3	; 0x03
    1720:	20 e0       	ldi	r18, 0x00	; 0
    1722:	3f ef       	ldi	r19, 0xFF	; 255
    1724:	4f e7       	ldi	r20, 0x7F	; 127
    1726:	57 e4       	ldi	r21, 0x47	; 71
    1728:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    172c:	18 16       	cp	r1, r24
    172e:	0c f0       	brlt	.+2      	; 0x1732 <LCD_sendCommand+0xbe>
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1732:	fe 01       	movw	r30, r28
    1734:	e1 5a       	subi	r30, 0xA1	; 161
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	60 81       	ld	r22, Z
    173a:	71 81       	ldd	r23, Z+1	; 0x01
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	20 e0       	ldi	r18, 0x00	; 0
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e2       	ldi	r20, 0x20	; 32
    1746:	51 e4       	ldi	r21, 0x41	; 65
    1748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    174c:	dc 01       	movw	r26, r24
    174e:	cb 01       	movw	r24, r22
    1750:	8e 01       	movw	r16, r28
    1752:	07 5a       	subi	r16, 0xA7	; 167
    1754:	1f 4f       	sbci	r17, 0xFF	; 255
    1756:	bc 01       	movw	r22, r24
    1758:	cd 01       	movw	r24, r26
    175a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    175e:	dc 01       	movw	r26, r24
    1760:	cb 01       	movw	r24, r22
    1762:	f8 01       	movw	r30, r16
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	1f c0       	rjmp	.+62     	; 0x17a8 <LCD_sendCommand+0x134>
    176a:	fe 01       	movw	r30, r28
    176c:	e9 5a       	subi	r30, 0xA9	; 169
    176e:	ff 4f       	sbci	r31, 0xFF	; 255
    1770:	88 ec       	ldi	r24, 0xC8	; 200
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	91 83       	std	Z+1, r25	; 0x01
    1776:	80 83       	st	Z, r24
    1778:	fe 01       	movw	r30, r28
    177a:	e9 5a       	subi	r30, 0xA9	; 169
    177c:	ff 4f       	sbci	r31, 0xFF	; 255
    177e:	80 81       	ld	r24, Z
    1780:	91 81       	ldd	r25, Z+1	; 0x01
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_sendCommand+0x10e>
    1786:	fe 01       	movw	r30, r28
    1788:	e9 5a       	subi	r30, 0xA9	; 169
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	91 83       	std	Z+1, r25	; 0x01
    178e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1790:	de 01       	movw	r26, r28
    1792:	a7 5a       	subi	r26, 0xA7	; 167
    1794:	bf 4f       	sbci	r27, 0xFF	; 255
    1796:	fe 01       	movw	r30, r28
    1798:	e7 5a       	subi	r30, 0xA7	; 167
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	80 81       	ld	r24, Z
    179e:	91 81       	ldd	r25, Z+1	; 0x01
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	11 96       	adiw	r26, 0x01	; 1
    17a4:	9c 93       	st	X, r25
    17a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17a8:	fe 01       	movw	r30, r28
    17aa:	e7 5a       	subi	r30, 0xA7	; 167
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	80 81       	ld	r24, Z
    17b0:	91 81       	ldd	r25, Z+1	; 0x01
    17b2:	00 97       	sbiw	r24, 0x00	; 0
    17b4:	d1 f6       	brne	.-76     	; 0x176a <LCD_sendCommand+0xf6>
    17b6:	27 c0       	rjmp	.+78     	; 0x1806 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b8:	8e 01       	movw	r16, r28
    17ba:	07 5a       	subi	r16, 0xA7	; 167
    17bc:	1f 4f       	sbci	r17, 0xFF	; 255
    17be:	fe 01       	movw	r30, r28
    17c0:	e5 5a       	subi	r30, 0xA5	; 165
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	f8 01       	movw	r30, r16
    17d6:	91 83       	std	Z+1, r25	; 0x01
    17d8:	80 83       	st	Z, r24
    17da:	de 01       	movw	r26, r28
    17dc:	ab 5a       	subi	r26, 0xAB	; 171
    17de:	bf 4f       	sbci	r27, 0xFF	; 255
    17e0:	fe 01       	movw	r30, r28
    17e2:	e7 5a       	subi	r30, 0xA7	; 167
    17e4:	ff 4f       	sbci	r31, 0xFF	; 255
    17e6:	80 81       	ld	r24, Z
    17e8:	91 81       	ldd	r25, Z+1	; 0x01
    17ea:	8d 93       	st	X+, r24
    17ec:	9c 93       	st	X, r25
    17ee:	fe 01       	movw	r30, r28
    17f0:	eb 5a       	subi	r30, 0xAB	; 171
    17f2:	ff 4f       	sbci	r31, 0xFF	; 255
    17f4:	80 81       	ld	r24, Z
    17f6:	91 81       	ldd	r25, Z+1	; 0x01
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <LCD_sendCommand+0x184>
    17fc:	fe 01       	movw	r30, r28
    17fe:	eb 5a       	subi	r30, 0xAB	; 171
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	91 83       	std	Z+1, r25	; 0x01
    1804:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	62 e0       	ldi	r22, 0x02	; 2
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1810:	fe 01       	movw	r30, r28
    1812:	ef 5a       	subi	r30, 0xAF	; 175
    1814:	ff 4f       	sbci	r31, 0xFF	; 255
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a0 e8       	ldi	r26, 0x80	; 128
    181c:	bf e3       	ldi	r27, 0x3F	; 63
    181e:	80 83       	st	Z, r24
    1820:	91 83       	std	Z+1, r25	; 0x01
    1822:	a2 83       	std	Z+2, r26	; 0x02
    1824:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1826:	8e 01       	movw	r16, r28
    1828:	03 5b       	subi	r16, 0xB3	; 179
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	fe 01       	movw	r30, r28
    182e:	ef 5a       	subi	r30, 0xAF	; 175
    1830:	ff 4f       	sbci	r31, 0xFF	; 255
    1832:	60 81       	ld	r22, Z
    1834:	71 81       	ldd	r23, Z+1	; 0x01
    1836:	82 81       	ldd	r24, Z+2	; 0x02
    1838:	93 81       	ldd	r25, Z+3	; 0x03
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	4a ef       	ldi	r20, 0xFA	; 250
    1840:	54 e4       	ldi	r21, 0x44	; 68
    1842:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1846:	dc 01       	movw	r26, r24
    1848:	cb 01       	movw	r24, r22
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
    184e:	91 83       	std	Z+1, r25	; 0x01
    1850:	a2 83       	std	Z+2, r26	; 0x02
    1852:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1854:	fe 01       	movw	r30, r28
    1856:	e3 5b       	subi	r30, 0xB3	; 179
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	60 81       	ld	r22, Z
    185c:	71 81       	ldd	r23, Z+1	; 0x01
    185e:	82 81       	ldd	r24, Z+2	; 0x02
    1860:	93 81       	ldd	r25, Z+3	; 0x03
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	40 e8       	ldi	r20, 0x80	; 128
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186e:	88 23       	and	r24, r24
    1870:	44 f4       	brge	.+16     	; 0x1882 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1872:	fe 01       	movw	r30, r28
    1874:	e5 5b       	subi	r30, 0xB5	; 181
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	91 83       	std	Z+1, r25	; 0x01
    187e:	80 83       	st	Z, r24
    1880:	64 c0       	rjmp	.+200    	; 0x194a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1882:	fe 01       	movw	r30, r28
    1884:	e3 5b       	subi	r30, 0xB3	; 179
    1886:	ff 4f       	sbci	r31, 0xFF	; 255
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	3f ef       	ldi	r19, 0xFF	; 255
    1894:	4f e7       	ldi	r20, 0x7F	; 127
    1896:	57 e4       	ldi	r21, 0x47	; 71
    1898:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189c:	18 16       	cp	r1, r24
    189e:	0c f0       	brlt	.+2      	; 0x18a2 <LCD_sendCommand+0x22e>
    18a0:	43 c0       	rjmp	.+134    	; 0x1928 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a2:	fe 01       	movw	r30, r28
    18a4:	ef 5a       	subi	r30, 0xAF	; 175
    18a6:	ff 4f       	sbci	r31, 0xFF	; 255
    18a8:	60 81       	ld	r22, Z
    18aa:	71 81       	ldd	r23, Z+1	; 0x01
    18ac:	82 81       	ldd	r24, Z+2	; 0x02
    18ae:	93 81       	ldd	r25, Z+3	; 0x03
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	40 e2       	ldi	r20, 0x20	; 32
    18b6:	51 e4       	ldi	r21, 0x41	; 65
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	8e 01       	movw	r16, r28
    18c2:	05 5b       	subi	r16, 0xB5	; 181
    18c4:	1f 4f       	sbci	r17, 0xFF	; 255
    18c6:	bc 01       	movw	r22, r24
    18c8:	cd 01       	movw	r24, r26
    18ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	f8 01       	movw	r30, r16
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	1f c0       	rjmp	.+62     	; 0x1918 <LCD_sendCommand+0x2a4>
    18da:	fe 01       	movw	r30, r28
    18dc:	e7 5b       	subi	r30, 0xB7	; 183
    18de:	ff 4f       	sbci	r31, 0xFF	; 255
    18e0:	88 ec       	ldi	r24, 0xC8	; 200
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	91 83       	std	Z+1, r25	; 0x01
    18e6:	80 83       	st	Z, r24
    18e8:	fe 01       	movw	r30, r28
    18ea:	e7 5b       	subi	r30, 0xB7	; 183
    18ec:	ff 4f       	sbci	r31, 0xFF	; 255
    18ee:	80 81       	ld	r24, Z
    18f0:	91 81       	ldd	r25, Z+1	; 0x01
    18f2:	01 97       	sbiw	r24, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <LCD_sendCommand+0x27e>
    18f6:	fe 01       	movw	r30, r28
    18f8:	e7 5b       	subi	r30, 0xB7	; 183
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	91 83       	std	Z+1, r25	; 0x01
    18fe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1900:	de 01       	movw	r26, r28
    1902:	a5 5b       	subi	r26, 0xB5	; 181
    1904:	bf 4f       	sbci	r27, 0xFF	; 255
    1906:	fe 01       	movw	r30, r28
    1908:	e5 5b       	subi	r30, 0xB5	; 181
    190a:	ff 4f       	sbci	r31, 0xFF	; 255
    190c:	80 81       	ld	r24, Z
    190e:	91 81       	ldd	r25, Z+1	; 0x01
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	9c 93       	st	X, r25
    1916:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1918:	fe 01       	movw	r30, r28
    191a:	e5 5b       	subi	r30, 0xB5	; 181
    191c:	ff 4f       	sbci	r31, 0xFF	; 255
    191e:	80 81       	ld	r24, Z
    1920:	91 81       	ldd	r25, Z+1	; 0x01
    1922:	00 97       	sbiw	r24, 0x00	; 0
    1924:	d1 f6       	brne	.-76     	; 0x18da <LCD_sendCommand+0x266>
    1926:	27 c0       	rjmp	.+78     	; 0x1976 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1928:	8e 01       	movw	r16, r28
    192a:	05 5b       	subi	r16, 0xB5	; 181
    192c:	1f 4f       	sbci	r17, 0xFF	; 255
    192e:	fe 01       	movw	r30, r28
    1930:	e3 5b       	subi	r30, 0xB3	; 179
    1932:	ff 4f       	sbci	r31, 0xFF	; 255
    1934:	60 81       	ld	r22, Z
    1936:	71 81       	ldd	r23, Z+1	; 0x01
    1938:	82 81       	ldd	r24, Z+2	; 0x02
    193a:	93 81       	ldd	r25, Z+3	; 0x03
    193c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	f8 01       	movw	r30, r16
    1946:	91 83       	std	Z+1, r25	; 0x01
    1948:	80 83       	st	Z, r24
    194a:	de 01       	movw	r26, r28
    194c:	a9 5b       	subi	r26, 0xB9	; 185
    194e:	bf 4f       	sbci	r27, 0xFF	; 255
    1950:	fe 01       	movw	r30, r28
    1952:	e5 5b       	subi	r30, 0xB5	; 181
    1954:	ff 4f       	sbci	r31, 0xFF	; 255
    1956:	80 81       	ld	r24, Z
    1958:	91 81       	ldd	r25, Z+1	; 0x01
    195a:	8d 93       	st	X+, r24
    195c:	9c 93       	st	X, r25
    195e:	fe 01       	movw	r30, r28
    1960:	e9 5b       	subi	r30, 0xB9	; 185
    1962:	ff 4f       	sbci	r31, 0xFF	; 255
    1964:	80 81       	ld	r24, Z
    1966:	91 81       	ldd	r25, Z+1	; 0x01
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	f1 f7       	brne	.-4      	; 0x1968 <LCD_sendCommand+0x2f4>
    196c:	fe 01       	movw	r30, r28
    196e:	e9 5b       	subi	r30, 0xB9	; 185
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	91 83       	std	Z+1, r25	; 0x01
    1974:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1976:	fe 01       	movw	r30, r28
    1978:	ed 59       	subi	r30, 0x9D	; 157
    197a:	ff 4f       	sbci	r31, 0xFF	; 255
    197c:	80 81       	ld	r24, Z
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	80 71       	andi	r24, 0x10	; 16
    1984:	90 70       	andi	r25, 0x00	; 0
    1986:	95 95       	asr	r25
    1988:	87 95       	ror	r24
    198a:	95 95       	asr	r25
    198c:	87 95       	ror	r24
    198e:	95 95       	asr	r25
    1990:	87 95       	ror	r24
    1992:	95 95       	asr	r25
    1994:	87 95       	ror	r24
    1996:	98 2f       	mov	r25, r24
    1998:	80 e0       	ldi	r24, 0x00	; 0
    199a:	63 e0       	ldi	r22, 0x03	; 3
    199c:	49 2f       	mov	r20, r25
    199e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    19a2:	fe 01       	movw	r30, r28
    19a4:	ed 59       	subi	r30, 0x9D	; 157
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	88 2f       	mov	r24, r24
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	80 72       	andi	r24, 0x20	; 32
    19b0:	90 70       	andi	r25, 0x00	; 0
    19b2:	95 95       	asr	r25
    19b4:	87 95       	ror	r24
    19b6:	95 95       	asr	r25
    19b8:	87 95       	ror	r24
    19ba:	95 95       	asr	r25
    19bc:	87 95       	ror	r24
    19be:	95 95       	asr	r25
    19c0:	87 95       	ror	r24
    19c2:	95 95       	asr	r25
    19c4:	87 95       	ror	r24
    19c6:	98 2f       	mov	r25, r24
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	64 e0       	ldi	r22, 0x04	; 4
    19cc:	49 2f       	mov	r20, r25
    19ce:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    19d2:	fe 01       	movw	r30, r28
    19d4:	ed 59       	subi	r30, 0x9D	; 157
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	80 74       	andi	r24, 0x40	; 64
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	08 2e       	mov	r0, r24
    19e4:	89 2f       	mov	r24, r25
    19e6:	00 0c       	add	r0, r0
    19e8:	88 1f       	adc	r24, r24
    19ea:	99 0b       	sbc	r25, r25
    19ec:	00 0c       	add	r0, r0
    19ee:	88 1f       	adc	r24, r24
    19f0:	99 1f       	adc	r25, r25
    19f2:	98 2f       	mov	r25, r24
    19f4:	80 e0       	ldi	r24, 0x00	; 0
    19f6:	65 e0       	ldi	r22, 0x05	; 5
    19f8:	49 2f       	mov	r20, r25
    19fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    19fe:	fe 01       	movw	r30, r28
    1a00:	ed 59       	subi	r30, 0x9D	; 157
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	80 81       	ld	r24, Z
    1a06:	98 2f       	mov	r25, r24
    1a08:	99 1f       	adc	r25, r25
    1a0a:	99 27       	eor	r25, r25
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	66 e0       	ldi	r22, 0x06	; 6
    1a12:	49 2f       	mov	r20, r25
    1a14:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	ed 5b       	subi	r30, 0xBD	; 189
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e8       	ldi	r26, 0x80	; 128
    1a24:	bf e3       	ldi	r27, 0x3F	; 63
    1a26:	80 83       	st	Z, r24
    1a28:	91 83       	std	Z+1, r25	; 0x01
    1a2a:	a2 83       	std	Z+2, r26	; 0x02
    1a2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a2e:	8e 01       	movw	r16, r28
    1a30:	01 5c       	subi	r16, 0xC1	; 193
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	fe 01       	movw	r30, r28
    1a36:	ed 5b       	subi	r30, 0xBD	; 189
    1a38:	ff 4f       	sbci	r31, 0xFF	; 255
    1a3a:	60 81       	ld	r22, Z
    1a3c:	71 81       	ldd	r23, Z+1	; 0x01
    1a3e:	82 81       	ldd	r24, Z+2	; 0x02
    1a40:	93 81       	ldd	r25, Z+3	; 0x03
    1a42:	20 e0       	ldi	r18, 0x00	; 0
    1a44:	30 e0       	ldi	r19, 0x00	; 0
    1a46:	4a ef       	ldi	r20, 0xFA	; 250
    1a48:	54 e4       	ldi	r21, 0x44	; 68
    1a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	f8 01       	movw	r30, r16
    1a54:	80 83       	st	Z, r24
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	a2 83       	std	Z+2, r26	; 0x02
    1a5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a5c:	fe 01       	movw	r30, r28
    1a5e:	ff 96       	adiw	r30, 0x3f	; 63
    1a60:	60 81       	ld	r22, Z
    1a62:	71 81       	ldd	r23, Z+1	; 0x01
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	93 81       	ldd	r25, Z+3	; 0x03
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	40 e8       	ldi	r20, 0x80	; 128
    1a6e:	5f e3       	ldi	r21, 0x3F	; 63
    1a70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a74:	88 23       	and	r24, r24
    1a76:	2c f4       	brge	.+10     	; 0x1a82 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	9e af       	std	Y+62, r25	; 0x3e
    1a7e:	8d af       	std	Y+61, r24	; 0x3d
    1a80:	46 c0       	rjmp	.+140    	; 0x1b0e <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a82:	fe 01       	movw	r30, r28
    1a84:	ff 96       	adiw	r30, 0x3f	; 63
    1a86:	60 81       	ld	r22, Z
    1a88:	71 81       	ldd	r23, Z+1	; 0x01
    1a8a:	82 81       	ldd	r24, Z+2	; 0x02
    1a8c:	93 81       	ldd	r25, Z+3	; 0x03
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	64 f5       	brge	.+88     	; 0x1af6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5b       	subi	r30, 0xBD	; 189
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e2       	ldi	r20, 0x20	; 32
    1ab2:	51 e4       	ldi	r21, 0x41	; 65
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	bc 01       	movw	r22, r24
    1abe:	cd 01       	movw	r24, r26
    1ac0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e af       	std	Y+62, r25	; 0x3e
    1aca:	8d af       	std	Y+61, r24	; 0x3d
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <LCD_sendCommand+0x478>
    1ace:	88 ec       	ldi	r24, 0xC8	; 200
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c af       	std	Y+60, r25	; 0x3c
    1ad4:	8b af       	std	Y+59, r24	; 0x3b
    1ad6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ad8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ada:	01 97       	sbiw	r24, 0x01	; 1
    1adc:	f1 f7       	brne	.-4      	; 0x1ada <LCD_sendCommand+0x466>
    1ade:	9c af       	std	Y+60, r25	; 0x3c
    1ae0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ae2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ae4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae6:	01 97       	sbiw	r24, 0x01	; 1
    1ae8:	9e af       	std	Y+62, r25	; 0x3e
    1aea:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aec:	8d ad       	ldd	r24, Y+61	; 0x3d
    1aee:	9e ad       	ldd	r25, Y+62	; 0x3e
    1af0:	00 97       	sbiw	r24, 0x00	; 0
    1af2:	69 f7       	brne	.-38     	; 0x1ace <LCD_sendCommand+0x45a>
    1af4:	16 c0       	rjmp	.+44     	; 0x1b22 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af6:	fe 01       	movw	r30, r28
    1af8:	ff 96       	adiw	r30, 0x3f	; 63
    1afa:	60 81       	ld	r22, Z
    1afc:	71 81       	ldd	r23, Z+1	; 0x01
    1afe:	82 81       	ldd	r24, Z+2	; 0x02
    1b00:	93 81       	ldd	r25, Z+3	; 0x03
    1b02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b06:	dc 01       	movw	r26, r24
    1b08:	cb 01       	movw	r24, r22
    1b0a:	9e af       	std	Y+62, r25	; 0x3e
    1b0c:	8d af       	std	Y+61, r24	; 0x3d
    1b0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b10:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b12:	9a af       	std	Y+58, r25	; 0x3a
    1b14:	89 af       	std	Y+57, r24	; 0x39
    1b16:	89 ad       	ldd	r24, Y+57	; 0x39
    1b18:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	f1 f7       	brne	.-4      	; 0x1b1a <LCD_sendCommand+0x4a6>
    1b1e:	9a af       	std	Y+58, r25	; 0x3a
    1b20:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	40 e0       	ldi	r20, 0x00	; 0
    1b28:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	a0 e8       	ldi	r26, 0x80	; 128
    1b32:	bf e3       	ldi	r27, 0x3F	; 63
    1b34:	8d ab       	std	Y+53, r24	; 0x35
    1b36:	9e ab       	std	Y+54, r25	; 0x36
    1b38:	af ab       	std	Y+55, r26	; 0x37
    1b3a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b3c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b3e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b40:	8f a9       	ldd	r24, Y+55	; 0x37
    1b42:	98 ad       	ldd	r25, Y+56	; 0x38
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	4a ef       	ldi	r20, 0xFA	; 250
    1b4a:	54 e4       	ldi	r21, 0x44	; 68
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	89 ab       	std	Y+49, r24	; 0x31
    1b56:	9a ab       	std	Y+50, r25	; 0x32
    1b58:	ab ab       	std	Y+51, r26	; 0x33
    1b5a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b5c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b5e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b60:	8b a9       	ldd	r24, Y+51	; 0x33
    1b62:	9c a9       	ldd	r25, Y+52	; 0x34
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	40 e8       	ldi	r20, 0x80	; 128
    1b6a:	5f e3       	ldi	r21, 0x3F	; 63
    1b6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b70:	88 23       	and	r24, r24
    1b72:	2c f4       	brge	.+10     	; 0x1b7e <LCD_sendCommand+0x50a>
		__ticks = 1;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	98 ab       	std	Y+48, r25	; 0x30
    1b7a:	8f a7       	std	Y+47, r24	; 0x2f
    1b7c:	3f c0       	rjmp	.+126    	; 0x1bfc <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b7e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b80:	7a a9       	ldd	r23, Y+50	; 0x32
    1b82:	8b a9       	ldd	r24, Y+51	; 0x33
    1b84:	9c a9       	ldd	r25, Y+52	; 0x34
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	3f ef       	ldi	r19, 0xFF	; 255
    1b8a:	4f e7       	ldi	r20, 0x7F	; 127
    1b8c:	57 e4       	ldi	r21, 0x47	; 71
    1b8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	4c f5       	brge	.+82     	; 0x1be8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b96:	6d a9       	ldd	r22, Y+53	; 0x35
    1b98:	7e a9       	ldd	r23, Y+54	; 0x36
    1b9a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b9c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	40 e2       	ldi	r20, 0x20	; 32
    1ba4:	51 e4       	ldi	r21, 0x41	; 65
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	bc 01       	movw	r22, r24
    1bb0:	cd 01       	movw	r24, r26
    1bb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	cb 01       	movw	r24, r22
    1bba:	98 ab       	std	Y+48, r25	; 0x30
    1bbc:	8f a7       	std	Y+47, r24	; 0x2f
    1bbe:	0f c0       	rjmp	.+30     	; 0x1bde <LCD_sendCommand+0x56a>
    1bc0:	88 ec       	ldi	r24, 0xC8	; 200
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	9e a7       	std	Y+46, r25	; 0x2e
    1bc6:	8d a7       	std	Y+45, r24	; 0x2d
    1bc8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bca:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_sendCommand+0x558>
    1bd0:	9e a7       	std	Y+46, r25	; 0x2e
    1bd2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd8:	01 97       	sbiw	r24, 0x01	; 1
    1bda:	98 ab       	std	Y+48, r25	; 0x30
    1bdc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bde:	8f a5       	ldd	r24, Y+47	; 0x2f
    1be0:	98 a9       	ldd	r25, Y+48	; 0x30
    1be2:	00 97       	sbiw	r24, 0x00	; 0
    1be4:	69 f7       	brne	.-38     	; 0x1bc0 <LCD_sendCommand+0x54c>
    1be6:	14 c0       	rjmp	.+40     	; 0x1c10 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bea:	7a a9       	ldd	r23, Y+50	; 0x32
    1bec:	8b a9       	ldd	r24, Y+51	; 0x33
    1bee:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf4:	dc 01       	movw	r26, r24
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	98 ab       	std	Y+48, r25	; 0x30
    1bfa:	8f a7       	std	Y+47, r24	; 0x2f
    1bfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1c00:	9c a7       	std	Y+44, r25	; 0x2c
    1c02:	8b a7       	std	Y+43, r24	; 0x2b
    1c04:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c06:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c08:	01 97       	sbiw	r24, 0x01	; 1
    1c0a:	f1 f7       	brne	.-4      	; 0x1c08 <LCD_sendCommand+0x594>
    1c0c:	9c a7       	std	Y+44, r25	; 0x2c
    1c0e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	62 e0       	ldi	r22, 0x02	; 2
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	a0 e8       	ldi	r26, 0x80	; 128
    1c20:	bf e3       	ldi	r27, 0x3F	; 63
    1c22:	8f a3       	std	Y+39, r24	; 0x27
    1c24:	98 a7       	std	Y+40, r25	; 0x28
    1c26:	a9 a7       	std	Y+41, r26	; 0x29
    1c28:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c2c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c2e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c30:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	4a ef       	ldi	r20, 0xFA	; 250
    1c38:	54 e4       	ldi	r21, 0x44	; 68
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	8b a3       	std	Y+35, r24	; 0x23
    1c44:	9c a3       	std	Y+36, r25	; 0x24
    1c46:	ad a3       	std	Y+37, r26	; 0x25
    1c48:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c4a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c4c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c4e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c50:	9e a1       	ldd	r25, Y+38	; 0x26
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	40 e8       	ldi	r20, 0x80	; 128
    1c58:	5f e3       	ldi	r21, 0x3F	; 63
    1c5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c5e:	88 23       	and	r24, r24
    1c60:	2c f4       	brge	.+10     	; 0x1c6c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9a a3       	std	Y+34, r25	; 0x22
    1c68:	89 a3       	std	Y+33, r24	; 0x21
    1c6a:	3f c0       	rjmp	.+126    	; 0x1cea <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1c6c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c6e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c70:	8d a1       	ldd	r24, Y+37	; 0x25
    1c72:	9e a1       	ldd	r25, Y+38	; 0x26
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	3f ef       	ldi	r19, 0xFF	; 255
    1c78:	4f e7       	ldi	r20, 0x7F	; 127
    1c7a:	57 e4       	ldi	r21, 0x47	; 71
    1c7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c80:	18 16       	cp	r1, r24
    1c82:	4c f5       	brge	.+82     	; 0x1cd6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c84:	6f a1       	ldd	r22, Y+39	; 0x27
    1c86:	78 a5       	ldd	r23, Y+40	; 0x28
    1c88:	89 a5       	ldd	r24, Y+41	; 0x29
    1c8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e2       	ldi	r20, 0x20	; 32
    1c92:	51 e4       	ldi	r21, 0x41	; 65
    1c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c98:	dc 01       	movw	r26, r24
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	bc 01       	movw	r22, r24
    1c9e:	cd 01       	movw	r24, r26
    1ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca4:	dc 01       	movw	r26, r24
    1ca6:	cb 01       	movw	r24, r22
    1ca8:	9a a3       	std	Y+34, r25	; 0x22
    1caa:	89 a3       	std	Y+33, r24	; 0x21
    1cac:	0f c0       	rjmp	.+30     	; 0x1ccc <LCD_sendCommand+0x658>
    1cae:	88 ec       	ldi	r24, 0xC8	; 200
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 a3       	std	Y+32, r25	; 0x20
    1cb4:	8f 8f       	std	Y+31, r24	; 0x1f
    1cb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cb8:	98 a1       	ldd	r25, Y+32	; 0x20
    1cba:	01 97       	sbiw	r24, 0x01	; 1
    1cbc:	f1 f7       	brne	.-4      	; 0x1cba <LCD_sendCommand+0x646>
    1cbe:	98 a3       	std	Y+32, r25	; 0x20
    1cc0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cc4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	9a a3       	std	Y+34, r25	; 0x22
    1cca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cce:	9a a1       	ldd	r25, Y+34	; 0x22
    1cd0:	00 97       	sbiw	r24, 0x00	; 0
    1cd2:	69 f7       	brne	.-38     	; 0x1cae <LCD_sendCommand+0x63a>
    1cd4:	14 c0       	rjmp	.+40     	; 0x1cfe <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	9a a3       	std	Y+34, r25	; 0x22
    1ce8:	89 a3       	std	Y+33, r24	; 0x21
    1cea:	89 a1       	ldd	r24, Y+33	; 0x21
    1cec:	9a a1       	ldd	r25, Y+34	; 0x22
    1cee:	9e 8f       	std	Y+30, r25	; 0x1e
    1cf0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_sendCommand+0x682>
    1cfa:	9e 8f       	std	Y+30, r25	; 0x1e
    1cfc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1cfe:	fe 01       	movw	r30, r28
    1d00:	ed 59       	subi	r30, 0x9D	; 157
    1d02:	ff 4f       	sbci	r31, 0xFF	; 255
    1d04:	80 81       	ld	r24, Z
    1d06:	98 2f       	mov	r25, r24
    1d08:	91 70       	andi	r25, 0x01	; 1
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	63 e0       	ldi	r22, 0x03	; 3
    1d0e:	49 2f       	mov	r20, r25
    1d10:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1d14:	fe 01       	movw	r30, r28
    1d16:	ed 59       	subi	r30, 0x9D	; 157
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	80 81       	ld	r24, Z
    1d1c:	88 2f       	mov	r24, r24
    1d1e:	90 e0       	ldi	r25, 0x00	; 0
    1d20:	82 70       	andi	r24, 0x02	; 2
    1d22:	90 70       	andi	r25, 0x00	; 0
    1d24:	95 95       	asr	r25
    1d26:	87 95       	ror	r24
    1d28:	98 2f       	mov	r25, r24
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	64 e0       	ldi	r22, 0x04	; 4
    1d2e:	49 2f       	mov	r20, r25
    1d30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 59       	subi	r30, 0x9D	; 157
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	88 2f       	mov	r24, r24
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	84 70       	andi	r24, 0x04	; 4
    1d42:	90 70       	andi	r25, 0x00	; 0
    1d44:	95 95       	asr	r25
    1d46:	87 95       	ror	r24
    1d48:	95 95       	asr	r25
    1d4a:	87 95       	ror	r24
    1d4c:	98 2f       	mov	r25, r24
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
    1d50:	65 e0       	ldi	r22, 0x05	; 5
    1d52:	49 2f       	mov	r20, r25
    1d54:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1d58:	fe 01       	movw	r30, r28
    1d5a:	ed 59       	subi	r30, 0x9D	; 157
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	80 81       	ld	r24, Z
    1d60:	88 2f       	mov	r24, r24
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	88 70       	andi	r24, 0x08	; 8
    1d66:	90 70       	andi	r25, 0x00	; 0
    1d68:	95 95       	asr	r25
    1d6a:	87 95       	ror	r24
    1d6c:	95 95       	asr	r25
    1d6e:	87 95       	ror	r24
    1d70:	95 95       	asr	r25
    1d72:	87 95       	ror	r24
    1d74:	98 2f       	mov	r25, r24
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	66 e0       	ldi	r22, 0x06	; 6
    1d7a:	49 2f       	mov	r20, r25
    1d7c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e8       	ldi	r26, 0x80	; 128
    1d86:	bf e3       	ldi	r27, 0x3F	; 63
    1d88:	89 8f       	std	Y+25, r24	; 0x19
    1d8a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d8c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d8e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d90:	69 8d       	ldd	r22, Y+25	; 0x19
    1d92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	4a ef       	ldi	r20, 0xFA	; 250
    1d9e:	54 e4       	ldi	r21, 0x44	; 68
    1da0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da4:	dc 01       	movw	r26, r24
    1da6:	cb 01       	movw	r24, r22
    1da8:	8d 8b       	std	Y+21, r24	; 0x15
    1daa:	9e 8b       	std	Y+22, r25	; 0x16
    1dac:	af 8b       	std	Y+23, r26	; 0x17
    1dae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db0:	6d 89       	ldd	r22, Y+21	; 0x15
    1db2:	7e 89       	ldd	r23, Y+22	; 0x16
    1db4:	8f 89       	ldd	r24, Y+23	; 0x17
    1db6:	98 8d       	ldd	r25, Y+24	; 0x18
    1db8:	20 e0       	ldi	r18, 0x00	; 0
    1dba:	30 e0       	ldi	r19, 0x00	; 0
    1dbc:	40 e8       	ldi	r20, 0x80	; 128
    1dbe:	5f e3       	ldi	r21, 0x3F	; 63
    1dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc4:	88 23       	and	r24, r24
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1dc8:	81 e0       	ldi	r24, 0x01	; 1
    1dca:	90 e0       	ldi	r25, 0x00	; 0
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	3f c0       	rjmp	.+126    	; 0x1e50 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1dd2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dd6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dd8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	3f ef       	ldi	r19, 0xFF	; 255
    1dde:	4f e7       	ldi	r20, 0x7F	; 127
    1de0:	57 e4       	ldi	r21, 0x47	; 71
    1de2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1de6:	18 16       	cp	r1, r24
    1de8:	4c f5       	brge	.+82     	; 0x1e3c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dea:	69 8d       	ldd	r22, Y+25	; 0x19
    1dec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df2:	20 e0       	ldi	r18, 0x00	; 0
    1df4:	30 e0       	ldi	r19, 0x00	; 0
    1df6:	40 e2       	ldi	r20, 0x20	; 32
    1df8:	51 e4       	ldi	r21, 0x41	; 65
    1dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfe:	dc 01       	movw	r26, r24
    1e00:	cb 01       	movw	r24, r22
    1e02:	bc 01       	movw	r22, r24
    1e04:	cd 01       	movw	r24, r26
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <LCD_sendCommand+0x7be>
    1e14:	88 ec       	ldi	r24, 0xC8	; 200
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	9a 8b       	std	Y+18, r25	; 0x12
    1e1a:	89 8b       	std	Y+17, r24	; 0x11
    1e1c:	89 89       	ldd	r24, Y+17	; 0x11
    1e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <LCD_sendCommand+0x7ac>
    1e24:	9a 8b       	std	Y+18, r25	; 0x12
    1e26:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	9c 8b       	std	Y+20, r25	; 0x14
    1e30:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e32:	8b 89       	ldd	r24, Y+19	; 0x13
    1e34:	9c 89       	ldd	r25, Y+20	; 0x14
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	69 f7       	brne	.-38     	; 0x1e14 <LCD_sendCommand+0x7a0>
    1e3a:	14 c0       	rjmp	.+40     	; 0x1e64 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e3c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e3e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e40:	8f 89       	ldd	r24, Y+23	; 0x17
    1e42:	98 8d       	ldd	r25, Y+24	; 0x18
    1e44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9c 8b       	std	Y+20, r25	; 0x14
    1e4e:	8b 8b       	std	Y+19, r24	; 0x13
    1e50:	8b 89       	ldd	r24, Y+19	; 0x13
    1e52:	9c 89       	ldd	r25, Y+20	; 0x14
    1e54:	98 8b       	std	Y+16, r25	; 0x10
    1e56:	8f 87       	std	Y+15, r24	; 0x0f
    1e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5a:	98 89       	ldd	r25, Y+16	; 0x10
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0x7e8>
    1e60:	98 8b       	std	Y+16, r25	; 0x10
    1e62:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 e8       	ldi	r26, 0x80	; 128
    1e74:	bf e3       	ldi	r27, 0x3F	; 63
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_sendCommand+0x8ac>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_sendCommand+0x89a>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_sendCommand+0x88e>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_sendCommand+0x8d6>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f52:	cd 59       	subi	r28, 0x9D	; 157
    1f54:	df 4f       	sbci	r29, 0xFF	; 255
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	f8 94       	cli
    1f5a:	de bf       	out	0x3e, r29	; 62
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	cd bf       	out	0x3d, r28	; 61
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	08 95       	ret

00001f6a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f6a:	0f 93       	push	r16
    1f6c:	1f 93       	push	r17
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	c3 56       	subi	r28, 0x63	; 99
    1f78:	d0 40       	sbci	r29, 0x00	; 0
    1f7a:	0f b6       	in	r0, 0x3f	; 63
    1f7c:	f8 94       	cli
    1f7e:	de bf       	out	0x3e, r29	; 62
    1f80:	0f be       	out	0x3f, r0	; 63
    1f82:	cd bf       	out	0x3d, r28	; 61
    1f84:	fe 01       	movw	r30, r28
    1f86:	ed 59       	subi	r30, 0x9D	; 157
    1f88:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f96:	fe 01       	movw	r30, r28
    1f98:	e1 5a       	subi	r30, 0xA1	; 161
    1f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	a0 e8       	ldi	r26, 0x80	; 128
    1fa2:	bf e3       	ldi	r27, 0x3F	; 63
    1fa4:	80 83       	st	Z, r24
    1fa6:	91 83       	std	Z+1, r25	; 0x01
    1fa8:	a2 83       	std	Z+2, r26	; 0x02
    1faa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fac:	8e 01       	movw	r16, r28
    1fae:	05 5a       	subi	r16, 0xA5	; 165
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	e1 5a       	subi	r30, 0xA1	; 161
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	60 81       	ld	r22, Z
    1fba:	71 81       	ldd	r23, Z+1	; 0x01
    1fbc:	82 81       	ldd	r24, Z+2	; 0x02
    1fbe:	93 81       	ldd	r25, Z+3	; 0x03
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	4a ef       	ldi	r20, 0xFA	; 250
    1fc6:	54 e4       	ldi	r21, 0x44	; 68
    1fc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fcc:	dc 01       	movw	r26, r24
    1fce:	cb 01       	movw	r24, r22
    1fd0:	f8 01       	movw	r30, r16
    1fd2:	80 83       	st	Z, r24
    1fd4:	91 83       	std	Z+1, r25	; 0x01
    1fd6:	a2 83       	std	Z+2, r26	; 0x02
    1fd8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e5 5a       	subi	r30, 0xA5	; 165
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	60 81       	ld	r22, Z
    1fe2:	71 81       	ldd	r23, Z+1	; 0x01
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	20 e0       	ldi	r18, 0x00	; 0
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	40 e8       	ldi	r20, 0x80	; 128
    1fee:	5f e3       	ldi	r21, 0x3F	; 63
    1ff0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff4:	88 23       	and	r24, r24
    1ff6:	44 f4       	brge	.+16     	; 0x2008 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e7 5a       	subi	r30, 0xA7	; 167
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    2006:	64 c0       	rjmp	.+200    	; 0x20d0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2008:	fe 01       	movw	r30, r28
    200a:	e5 5a       	subi	r30, 0xA5	; 165
    200c:	ff 4f       	sbci	r31, 0xFF	; 255
    200e:	60 81       	ld	r22, Z
    2010:	71 81       	ldd	r23, Z+1	; 0x01
    2012:	82 81       	ldd	r24, Z+2	; 0x02
    2014:	93 81       	ldd	r25, Z+3	; 0x03
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	3f ef       	ldi	r19, 0xFF	; 255
    201a:	4f e7       	ldi	r20, 0x7F	; 127
    201c:	57 e4       	ldi	r21, 0x47	; 71
    201e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2022:	18 16       	cp	r1, r24
    2024:	0c f0       	brlt	.+2      	; 0x2028 <LCD_displayCharacter+0xbe>
    2026:	43 c0       	rjmp	.+134    	; 0x20ae <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2028:	fe 01       	movw	r30, r28
    202a:	e1 5a       	subi	r30, 0xA1	; 161
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e2       	ldi	r20, 0x20	; 32
    203c:	51 e4       	ldi	r21, 0x41	; 65
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	8e 01       	movw	r16, r28
    2048:	07 5a       	subi	r16, 0xA7	; 167
    204a:	1f 4f       	sbci	r17, 0xFF	; 255
    204c:	bc 01       	movw	r22, r24
    204e:	cd 01       	movw	r24, r26
    2050:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2054:	dc 01       	movw	r26, r24
    2056:	cb 01       	movw	r24, r22
    2058:	f8 01       	movw	r30, r16
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
    205e:	1f c0       	rjmp	.+62     	; 0x209e <LCD_displayCharacter+0x134>
    2060:	fe 01       	movw	r30, r28
    2062:	e9 5a       	subi	r30, 0xA9	; 169
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	88 ec       	ldi	r24, 0xC8	; 200
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
    206e:	fe 01       	movw	r30, r28
    2070:	e9 5a       	subi	r30, 0xA9	; 169
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	80 81       	ld	r24, Z
    2076:	91 81       	ldd	r25, Z+1	; 0x01
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	f1 f7       	brne	.-4      	; 0x2078 <LCD_displayCharacter+0x10e>
    207c:	fe 01       	movw	r30, r28
    207e:	e9 5a       	subi	r30, 0xA9	; 169
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	91 83       	std	Z+1, r25	; 0x01
    2084:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2086:	de 01       	movw	r26, r28
    2088:	a7 5a       	subi	r26, 0xA7	; 167
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e7 5a       	subi	r30, 0xA7	; 167
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	91 81       	ldd	r25, Z+1	; 0x01
    2096:	01 97       	sbiw	r24, 0x01	; 1
    2098:	11 96       	adiw	r26, 0x01	; 1
    209a:	9c 93       	st	X, r25
    209c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    209e:	fe 01       	movw	r30, r28
    20a0:	e7 5a       	subi	r30, 0xA7	; 167
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	d1 f6       	brne	.-76     	; 0x2060 <LCD_displayCharacter+0xf6>
    20ac:	27 c0       	rjmp	.+78     	; 0x20fc <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ae:	8e 01       	movw	r16, r28
    20b0:	07 5a       	subi	r16, 0xA7	; 167
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	fe 01       	movw	r30, r28
    20b6:	e5 5a       	subi	r30, 0xA5	; 165
    20b8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ba:	60 81       	ld	r22, Z
    20bc:	71 81       	ldd	r23, Z+1	; 0x01
    20be:	82 81       	ldd	r24, Z+2	; 0x02
    20c0:	93 81       	ldd	r25, Z+3	; 0x03
    20c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	f8 01       	movw	r30, r16
    20cc:	91 83       	std	Z+1, r25	; 0x01
    20ce:	80 83       	st	Z, r24
    20d0:	de 01       	movw	r26, r28
    20d2:	ab 5a       	subi	r26, 0xAB	; 171
    20d4:	bf 4f       	sbci	r27, 0xFF	; 255
    20d6:	fe 01       	movw	r30, r28
    20d8:	e7 5a       	subi	r30, 0xA7	; 167
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	8d 93       	st	X+, r24
    20e2:	9c 93       	st	X, r25
    20e4:	fe 01       	movw	r30, r28
    20e6:	eb 5a       	subi	r30, 0xAB	; 171
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_displayCharacter+0x184>
    20f2:	fe 01       	movw	r30, r28
    20f4:	eb 5a       	subi	r30, 0xAB	; 171
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	62 e0       	ldi	r22, 0x02	; 2
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2106:	fe 01       	movw	r30, r28
    2108:	ef 5a       	subi	r30, 0xAF	; 175
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 e0       	ldi	r24, 0x00	; 0
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	a0 e8       	ldi	r26, 0x80	; 128
    2112:	bf e3       	ldi	r27, 0x3F	; 63
    2114:	80 83       	st	Z, r24
    2116:	91 83       	std	Z+1, r25	; 0x01
    2118:	a2 83       	std	Z+2, r26	; 0x02
    211a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211c:	8e 01       	movw	r16, r28
    211e:	03 5b       	subi	r16, 0xB3	; 179
    2120:	1f 4f       	sbci	r17, 0xFF	; 255
    2122:	fe 01       	movw	r30, r28
    2124:	ef 5a       	subi	r30, 0xAF	; 175
    2126:	ff 4f       	sbci	r31, 0xFF	; 255
    2128:	60 81       	ld	r22, Z
    212a:	71 81       	ldd	r23, Z+1	; 0x01
    212c:	82 81       	ldd	r24, Z+2	; 0x02
    212e:	93 81       	ldd	r25, Z+3	; 0x03
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	80 83       	st	Z, r24
    2144:	91 83       	std	Z+1, r25	; 0x01
    2146:	a2 83       	std	Z+2, r26	; 0x02
    2148:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    214a:	fe 01       	movw	r30, r28
    214c:	e3 5b       	subi	r30, 0xB3	; 179
    214e:	ff 4f       	sbci	r31, 0xFF	; 255
    2150:	60 81       	ld	r22, Z
    2152:	71 81       	ldd	r23, Z+1	; 0x01
    2154:	82 81       	ldd	r24, Z+2	; 0x02
    2156:	93 81       	ldd	r25, Z+3	; 0x03
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	44 f4       	brge	.+16     	; 0x2178 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2168:	fe 01       	movw	r30, r28
    216a:	e5 5b       	subi	r30, 0xB5	; 181
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	91 83       	std	Z+1, r25	; 0x01
    2174:	80 83       	st	Z, r24
    2176:	64 c0       	rjmp	.+200    	; 0x2240 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2178:	fe 01       	movw	r30, r28
    217a:	e3 5b       	subi	r30, 0xB3	; 179
    217c:	ff 4f       	sbci	r31, 0xFF	; 255
    217e:	60 81       	ld	r22, Z
    2180:	71 81       	ldd	r23, Z+1	; 0x01
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	93 81       	ldd	r25, Z+3	; 0x03
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	3f ef       	ldi	r19, 0xFF	; 255
    218a:	4f e7       	ldi	r20, 0x7F	; 127
    218c:	57 e4       	ldi	r21, 0x47	; 71
    218e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2192:	18 16       	cp	r1, r24
    2194:	0c f0       	brlt	.+2      	; 0x2198 <LCD_displayCharacter+0x22e>
    2196:	43 c0       	rjmp	.+134    	; 0x221e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2198:	fe 01       	movw	r30, r28
    219a:	ef 5a       	subi	r30, 0xAF	; 175
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e2       	ldi	r20, 0x20	; 32
    21ac:	51 e4       	ldi	r21, 0x41	; 65
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8e 01       	movw	r16, r28
    21b8:	05 5b       	subi	r16, 0xB5	; 181
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	bc 01       	movw	r22, r24
    21be:	cd 01       	movw	r24, r26
    21c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c4:	dc 01       	movw	r26, r24
    21c6:	cb 01       	movw	r24, r22
    21c8:	f8 01       	movw	r30, r16
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
    21ce:	1f c0       	rjmp	.+62     	; 0x220e <LCD_displayCharacter+0x2a4>
    21d0:	fe 01       	movw	r30, r28
    21d2:	e7 5b       	subi	r30, 0xB7	; 183
    21d4:	ff 4f       	sbci	r31, 0xFF	; 255
    21d6:	88 ec       	ldi	r24, 0xC8	; 200
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	fe 01       	movw	r30, r28
    21e0:	e7 5b       	subi	r30, 0xB7	; 183
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	80 81       	ld	r24, Z
    21e6:	91 81       	ldd	r25, Z+1	; 0x01
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	f1 f7       	brne	.-4      	; 0x21e8 <LCD_displayCharacter+0x27e>
    21ec:	fe 01       	movw	r30, r28
    21ee:	e7 5b       	subi	r30, 0xB7	; 183
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	91 83       	std	Z+1, r25	; 0x01
    21f4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f6:	de 01       	movw	r26, r28
    21f8:	a5 5b       	subi	r26, 0xB5	; 181
    21fa:	bf 4f       	sbci	r27, 0xFF	; 255
    21fc:	fe 01       	movw	r30, r28
    21fe:	e5 5b       	subi	r30, 0xB5	; 181
    2200:	ff 4f       	sbci	r31, 0xFF	; 255
    2202:	80 81       	ld	r24, Z
    2204:	91 81       	ldd	r25, Z+1	; 0x01
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	11 96       	adiw	r26, 0x01	; 1
    220a:	9c 93       	st	X, r25
    220c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	fe 01       	movw	r30, r28
    2210:	e5 5b       	subi	r30, 0xB5	; 181
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	80 81       	ld	r24, Z
    2216:	91 81       	ldd	r25, Z+1	; 0x01
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	d1 f6       	brne	.-76     	; 0x21d0 <LCD_displayCharacter+0x266>
    221c:	27 c0       	rjmp	.+78     	; 0x226c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221e:	8e 01       	movw	r16, r28
    2220:	05 5b       	subi	r16, 0xB5	; 181
    2222:	1f 4f       	sbci	r17, 0xFF	; 255
    2224:	fe 01       	movw	r30, r28
    2226:	e3 5b       	subi	r30, 0xB3	; 179
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	60 81       	ld	r22, Z
    222c:	71 81       	ldd	r23, Z+1	; 0x01
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	93 81       	ldd	r25, Z+3	; 0x03
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	f8 01       	movw	r30, r16
    223c:	91 83       	std	Z+1, r25	; 0x01
    223e:	80 83       	st	Z, r24
    2240:	de 01       	movw	r26, r28
    2242:	a9 5b       	subi	r26, 0xB9	; 185
    2244:	bf 4f       	sbci	r27, 0xFF	; 255
    2246:	fe 01       	movw	r30, r28
    2248:	e5 5b       	subi	r30, 0xB5	; 181
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	80 81       	ld	r24, Z
    224e:	91 81       	ldd	r25, Z+1	; 0x01
    2250:	8d 93       	st	X+, r24
    2252:	9c 93       	st	X, r25
    2254:	fe 01       	movw	r30, r28
    2256:	e9 5b       	subi	r30, 0xB9	; 185
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_displayCharacter+0x2f4>
    2262:	fe 01       	movw	r30, r28
    2264:	e9 5b       	subi	r30, 0xB9	; 185
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    226c:	fe 01       	movw	r30, r28
    226e:	ed 59       	subi	r30, 0x9D	; 157
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	80 71       	andi	r24, 0x10	; 16
    227a:	90 70       	andi	r25, 0x00	; 0
    227c:	95 95       	asr	r25
    227e:	87 95       	ror	r24
    2280:	95 95       	asr	r25
    2282:	87 95       	ror	r24
    2284:	95 95       	asr	r25
    2286:	87 95       	ror	r24
    2288:	95 95       	asr	r25
    228a:	87 95       	ror	r24
    228c:	98 2f       	mov	r25, r24
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	63 e0       	ldi	r22, 0x03	; 3
    2292:	49 2f       	mov	r20, r25
    2294:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2298:	fe 01       	movw	r30, r28
    229a:	ed 59       	subi	r30, 0x9D	; 157
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	88 2f       	mov	r24, r24
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	80 72       	andi	r24, 0x20	; 32
    22a6:	90 70       	andi	r25, 0x00	; 0
    22a8:	95 95       	asr	r25
    22aa:	87 95       	ror	r24
    22ac:	95 95       	asr	r25
    22ae:	87 95       	ror	r24
    22b0:	95 95       	asr	r25
    22b2:	87 95       	ror	r24
    22b4:	95 95       	asr	r25
    22b6:	87 95       	ror	r24
    22b8:	95 95       	asr	r25
    22ba:	87 95       	ror	r24
    22bc:	98 2f       	mov	r25, r24
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	64 e0       	ldi	r22, 0x04	; 4
    22c2:	49 2f       	mov	r20, r25
    22c4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    22c8:	fe 01       	movw	r30, r28
    22ca:	ed 59       	subi	r30, 0x9D	; 157
    22cc:	ff 4f       	sbci	r31, 0xFF	; 255
    22ce:	80 81       	ld	r24, Z
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	80 74       	andi	r24, 0x40	; 64
    22d6:	90 70       	andi	r25, 0x00	; 0
    22d8:	08 2e       	mov	r0, r24
    22da:	89 2f       	mov	r24, r25
    22dc:	00 0c       	add	r0, r0
    22de:	88 1f       	adc	r24, r24
    22e0:	99 0b       	sbc	r25, r25
    22e2:	00 0c       	add	r0, r0
    22e4:	88 1f       	adc	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	98 2f       	mov	r25, r24
    22ea:	80 e0       	ldi	r24, 0x00	; 0
    22ec:	65 e0       	ldi	r22, 0x05	; 5
    22ee:	49 2f       	mov	r20, r25
    22f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    22f4:	fe 01       	movw	r30, r28
    22f6:	ed 59       	subi	r30, 0x9D	; 157
    22f8:	ff 4f       	sbci	r31, 0xFF	; 255
    22fa:	80 81       	ld	r24, Z
    22fc:	98 2f       	mov	r25, r24
    22fe:	99 1f       	adc	r25, r25
    2300:	99 27       	eor	r25, r25
    2302:	99 1f       	adc	r25, r25
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	66 e0       	ldi	r22, 0x06	; 6
    2308:	49 2f       	mov	r20, r25
    230a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    230e:	fe 01       	movw	r30, r28
    2310:	ed 5b       	subi	r30, 0xBD	; 189
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 e0       	ldi	r24, 0x00	; 0
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	a0 e8       	ldi	r26, 0x80	; 128
    231a:	bf e3       	ldi	r27, 0x3F	; 63
    231c:	80 83       	st	Z, r24
    231e:	91 83       	std	Z+1, r25	; 0x01
    2320:	a2 83       	std	Z+2, r26	; 0x02
    2322:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2324:	8e 01       	movw	r16, r28
    2326:	01 5c       	subi	r16, 0xC1	; 193
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	ed 5b       	subi	r30, 0xBD	; 189
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	60 81       	ld	r22, Z
    2332:	71 81       	ldd	r23, Z+1	; 0x01
    2334:	82 81       	ldd	r24, Z+2	; 0x02
    2336:	93 81       	ldd	r25, Z+3	; 0x03
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	4a ef       	ldi	r20, 0xFA	; 250
    233e:	54 e4       	ldi	r21, 0x44	; 68
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	f8 01       	movw	r30, r16
    234a:	80 83       	st	Z, r24
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	a2 83       	std	Z+2, r26	; 0x02
    2350:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2352:	fe 01       	movw	r30, r28
    2354:	ff 96       	adiw	r30, 0x3f	; 63
    2356:	60 81       	ld	r22, Z
    2358:	71 81       	ldd	r23, Z+1	; 0x01
    235a:	82 81       	ldd	r24, Z+2	; 0x02
    235c:	93 81       	ldd	r25, Z+3	; 0x03
    235e:	20 e0       	ldi	r18, 0x00	; 0
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	40 e8       	ldi	r20, 0x80	; 128
    2364:	5f e3       	ldi	r21, 0x3F	; 63
    2366:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    236a:	88 23       	and	r24, r24
    236c:	2c f4       	brge	.+10     	; 0x2378 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	9e af       	std	Y+62, r25	; 0x3e
    2374:	8d af       	std	Y+61, r24	; 0x3d
    2376:	46 c0       	rjmp	.+140    	; 0x2404 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2378:	fe 01       	movw	r30, r28
    237a:	ff 96       	adiw	r30, 0x3f	; 63
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	20 e0       	ldi	r18, 0x00	; 0
    2386:	3f ef       	ldi	r19, 0xFF	; 255
    2388:	4f e7       	ldi	r20, 0x7F	; 127
    238a:	57 e4       	ldi	r21, 0x47	; 71
    238c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2390:	18 16       	cp	r1, r24
    2392:	64 f5       	brge	.+88     	; 0x23ec <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2394:	fe 01       	movw	r30, r28
    2396:	ed 5b       	subi	r30, 0xBD	; 189
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e2       	ldi	r20, 0x20	; 32
    23a8:	51 e4       	ldi	r21, 0x41	; 65
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e af       	std	Y+62, r25	; 0x3e
    23c0:	8d af       	std	Y+61, r24	; 0x3d
    23c2:	0f c0       	rjmp	.+30     	; 0x23e2 <LCD_displayCharacter+0x478>
    23c4:	88 ec       	ldi	r24, 0xC8	; 200
    23c6:	90 e0       	ldi	r25, 0x00	; 0
    23c8:	9c af       	std	Y+60, r25	; 0x3c
    23ca:	8b af       	std	Y+59, r24	; 0x3b
    23cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    23ce:	9c ad       	ldd	r25, Y+60	; 0x3c
    23d0:	01 97       	sbiw	r24, 0x01	; 1
    23d2:	f1 f7       	brne	.-4      	; 0x23d0 <LCD_displayCharacter+0x466>
    23d4:	9c af       	std	Y+60, r25	; 0x3c
    23d6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23da:	9e ad       	ldd	r25, Y+62	; 0x3e
    23dc:	01 97       	sbiw	r24, 0x01	; 1
    23de:	9e af       	std	Y+62, r25	; 0x3e
    23e0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e6:	00 97       	sbiw	r24, 0x00	; 0
    23e8:	69 f7       	brne	.-38     	; 0x23c4 <LCD_displayCharacter+0x45a>
    23ea:	16 c0       	rjmp	.+44     	; 0x2418 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ec:	fe 01       	movw	r30, r28
    23ee:	ff 96       	adiw	r30, 0x3f	; 63
    23f0:	60 81       	ld	r22, Z
    23f2:	71 81       	ldd	r23, Z+1	; 0x01
    23f4:	82 81       	ldd	r24, Z+2	; 0x02
    23f6:	93 81       	ldd	r25, Z+3	; 0x03
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e af       	std	Y+62, r25	; 0x3e
    2402:	8d af       	std	Y+61, r24	; 0x3d
    2404:	8d ad       	ldd	r24, Y+61	; 0x3d
    2406:	9e ad       	ldd	r25, Y+62	; 0x3e
    2408:	9a af       	std	Y+58, r25	; 0x3a
    240a:	89 af       	std	Y+57, r24	; 0x39
    240c:	89 ad       	ldd	r24, Y+57	; 0x39
    240e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_displayCharacter+0x4a6>
    2414:	9a af       	std	Y+58, r25	; 0x3a
    2416:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2418:	80 e0       	ldi	r24, 0x00	; 0
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	a0 e8       	ldi	r26, 0x80	; 128
    2428:	bf e3       	ldi	r27, 0x3F	; 63
    242a:	8d ab       	std	Y+53, r24	; 0x35
    242c:	9e ab       	std	Y+54, r25	; 0x36
    242e:	af ab       	std	Y+55, r26	; 0x37
    2430:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2432:	6d a9       	ldd	r22, Y+53	; 0x35
    2434:	7e a9       	ldd	r23, Y+54	; 0x36
    2436:	8f a9       	ldd	r24, Y+55	; 0x37
    2438:	98 ad       	ldd	r25, Y+56	; 0x38
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	4a ef       	ldi	r20, 0xFA	; 250
    2440:	54 e4       	ldi	r21, 0x44	; 68
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	89 ab       	std	Y+49, r24	; 0x31
    244c:	9a ab       	std	Y+50, r25	; 0x32
    244e:	ab ab       	std	Y+51, r26	; 0x33
    2450:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2452:	69 a9       	ldd	r22, Y+49	; 0x31
    2454:	7a a9       	ldd	r23, Y+50	; 0x32
    2456:	8b a9       	ldd	r24, Y+51	; 0x33
    2458:	9c a9       	ldd	r25, Y+52	; 0x34
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e8       	ldi	r20, 0x80	; 128
    2460:	5f e3       	ldi	r21, 0x3F	; 63
    2462:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2466:	88 23       	and	r24, r24
    2468:	2c f4       	brge	.+10     	; 0x2474 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 e0       	ldi	r25, 0x00	; 0
    246e:	98 ab       	std	Y+48, r25	; 0x30
    2470:	8f a7       	std	Y+47, r24	; 0x2f
    2472:	3f c0       	rjmp	.+126    	; 0x24f2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2474:	69 a9       	ldd	r22, Y+49	; 0x31
    2476:	7a a9       	ldd	r23, Y+50	; 0x32
    2478:	8b a9       	ldd	r24, Y+51	; 0x33
    247a:	9c a9       	ldd	r25, Y+52	; 0x34
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	3f ef       	ldi	r19, 0xFF	; 255
    2480:	4f e7       	ldi	r20, 0x7F	; 127
    2482:	57 e4       	ldi	r21, 0x47	; 71
    2484:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2488:	18 16       	cp	r1, r24
    248a:	4c f5       	brge	.+82     	; 0x24de <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    248c:	6d a9       	ldd	r22, Y+53	; 0x35
    248e:	7e a9       	ldd	r23, Y+54	; 0x36
    2490:	8f a9       	ldd	r24, Y+55	; 0x37
    2492:	98 ad       	ldd	r25, Y+56	; 0x38
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e2       	ldi	r20, 0x20	; 32
    249a:	51 e4       	ldi	r21, 0x41	; 65
    249c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	bc 01       	movw	r22, r24
    24a6:	cd 01       	movw	r24, r26
    24a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	98 ab       	std	Y+48, r25	; 0x30
    24b2:	8f a7       	std	Y+47, r24	; 0x2f
    24b4:	0f c0       	rjmp	.+30     	; 0x24d4 <LCD_displayCharacter+0x56a>
    24b6:	88 ec       	ldi	r24, 0xC8	; 200
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9e a7       	std	Y+46, r25	; 0x2e
    24bc:	8d a7       	std	Y+45, r24	; 0x2d
    24be:	8d a5       	ldd	r24, Y+45	; 0x2d
    24c0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24c2:	01 97       	sbiw	r24, 0x01	; 1
    24c4:	f1 f7       	brne	.-4      	; 0x24c2 <LCD_displayCharacter+0x558>
    24c6:	9e a7       	std	Y+46, r25	; 0x2e
    24c8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	01 97       	sbiw	r24, 0x01	; 1
    24d0:	98 ab       	std	Y+48, r25	; 0x30
    24d2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d6:	98 a9       	ldd	r25, Y+48	; 0x30
    24d8:	00 97       	sbiw	r24, 0x00	; 0
    24da:	69 f7       	brne	.-38     	; 0x24b6 <LCD_displayCharacter+0x54c>
    24dc:	14 c0       	rjmp	.+40     	; 0x2506 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24de:	69 a9       	ldd	r22, Y+49	; 0x31
    24e0:	7a a9       	ldd	r23, Y+50	; 0x32
    24e2:	8b a9       	ldd	r24, Y+51	; 0x33
    24e4:	9c a9       	ldd	r25, Y+52	; 0x34
    24e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ea:	dc 01       	movw	r26, r24
    24ec:	cb 01       	movw	r24, r22
    24ee:	98 ab       	std	Y+48, r25	; 0x30
    24f0:	8f a7       	std	Y+47, r24	; 0x2f
    24f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24f4:	98 a9       	ldd	r25, Y+48	; 0x30
    24f6:	9c a7       	std	Y+44, r25	; 0x2c
    24f8:	8b a7       	std	Y+43, r24	; 0x2b
    24fa:	8b a5       	ldd	r24, Y+43	; 0x2b
    24fc:	9c a5       	ldd	r25, Y+44	; 0x2c
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <LCD_displayCharacter+0x594>
    2502:	9c a7       	std	Y+44, r25	; 0x2c
    2504:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	62 e0       	ldi	r22, 0x02	; 2
    250a:	41 e0       	ldi	r20, 0x01	; 1
    250c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2510:	80 e0       	ldi	r24, 0x00	; 0
    2512:	90 e0       	ldi	r25, 0x00	; 0
    2514:	a0 e8       	ldi	r26, 0x80	; 128
    2516:	bf e3       	ldi	r27, 0x3F	; 63
    2518:	8f a3       	std	Y+39, r24	; 0x27
    251a:	98 a7       	std	Y+40, r25	; 0x28
    251c:	a9 a7       	std	Y+41, r26	; 0x29
    251e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2520:	6f a1       	ldd	r22, Y+39	; 0x27
    2522:	78 a5       	ldd	r23, Y+40	; 0x28
    2524:	89 a5       	ldd	r24, Y+41	; 0x29
    2526:	9a a5       	ldd	r25, Y+42	; 0x2a
    2528:	20 e0       	ldi	r18, 0x00	; 0
    252a:	30 e0       	ldi	r19, 0x00	; 0
    252c:	4a ef       	ldi	r20, 0xFA	; 250
    252e:	54 e4       	ldi	r21, 0x44	; 68
    2530:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2534:	dc 01       	movw	r26, r24
    2536:	cb 01       	movw	r24, r22
    2538:	8b a3       	std	Y+35, r24	; 0x23
    253a:	9c a3       	std	Y+36, r25	; 0x24
    253c:	ad a3       	std	Y+37, r26	; 0x25
    253e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2540:	6b a1       	ldd	r22, Y+35	; 0x23
    2542:	7c a1       	ldd	r23, Y+36	; 0x24
    2544:	8d a1       	ldd	r24, Y+37	; 0x25
    2546:	9e a1       	ldd	r25, Y+38	; 0x26
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e8       	ldi	r20, 0x80	; 128
    254e:	5f e3       	ldi	r21, 0x3F	; 63
    2550:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2554:	88 23       	and	r24, r24
    2556:	2c f4       	brge	.+10     	; 0x2562 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9a a3       	std	Y+34, r25	; 0x22
    255e:	89 a3       	std	Y+33, r24	; 0x21
    2560:	3f c0       	rjmp	.+126    	; 0x25e0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2562:	6b a1       	ldd	r22, Y+35	; 0x23
    2564:	7c a1       	ldd	r23, Y+36	; 0x24
    2566:	8d a1       	ldd	r24, Y+37	; 0x25
    2568:	9e a1       	ldd	r25, Y+38	; 0x26
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	3f ef       	ldi	r19, 0xFF	; 255
    256e:	4f e7       	ldi	r20, 0x7F	; 127
    2570:	57 e4       	ldi	r21, 0x47	; 71
    2572:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2576:	18 16       	cp	r1, r24
    2578:	4c f5       	brge	.+82     	; 0x25cc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257a:	6f a1       	ldd	r22, Y+39	; 0x27
    257c:	78 a5       	ldd	r23, Y+40	; 0x28
    257e:	89 a5       	ldd	r24, Y+41	; 0x29
    2580:	9a a5       	ldd	r25, Y+42	; 0x2a
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e2       	ldi	r20, 0x20	; 32
    2588:	51 e4       	ldi	r21, 0x41	; 65
    258a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258e:	dc 01       	movw	r26, r24
    2590:	cb 01       	movw	r24, r22
    2592:	bc 01       	movw	r22, r24
    2594:	cd 01       	movw	r24, r26
    2596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	9a a3       	std	Y+34, r25	; 0x22
    25a0:	89 a3       	std	Y+33, r24	; 0x21
    25a2:	0f c0       	rjmp	.+30     	; 0x25c2 <LCD_displayCharacter+0x658>
    25a4:	88 ec       	ldi	r24, 0xC8	; 200
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	98 a3       	std	Y+32, r25	; 0x20
    25aa:	8f 8f       	std	Y+31, r24	; 0x1f
    25ac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ae:	98 a1       	ldd	r25, Y+32	; 0x20
    25b0:	01 97       	sbiw	r24, 0x01	; 1
    25b2:	f1 f7       	brne	.-4      	; 0x25b0 <LCD_displayCharacter+0x646>
    25b4:	98 a3       	std	Y+32, r25	; 0x20
    25b6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25b8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ba:	9a a1       	ldd	r25, Y+34	; 0x22
    25bc:	01 97       	sbiw	r24, 0x01	; 1
    25be:	9a a3       	std	Y+34, r25	; 0x22
    25c0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	00 97       	sbiw	r24, 0x00	; 0
    25c8:	69 f7       	brne	.-38     	; 0x25a4 <LCD_displayCharacter+0x63a>
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25cc:	6b a1       	ldd	r22, Y+35	; 0x23
    25ce:	7c a1       	ldd	r23, Y+36	; 0x24
    25d0:	8d a1       	ldd	r24, Y+37	; 0x25
    25d2:	9e a1       	ldd	r25, Y+38	; 0x26
    25d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d8:	dc 01       	movw	r26, r24
    25da:	cb 01       	movw	r24, r22
    25dc:	9a a3       	std	Y+34, r25	; 0x22
    25de:	89 a3       	std	Y+33, r24	; 0x21
    25e0:	89 a1       	ldd	r24, Y+33	; 0x21
    25e2:	9a a1       	ldd	r25, Y+34	; 0x22
    25e4:	9e 8f       	std	Y+30, r25	; 0x1e
    25e6:	8d 8f       	std	Y+29, r24	; 0x1d
    25e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ec:	01 97       	sbiw	r24, 0x01	; 1
    25ee:	f1 f7       	brne	.-4      	; 0x25ec <LCD_displayCharacter+0x682>
    25f0:	9e 8f       	std	Y+30, r25	; 0x1e
    25f2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    25f4:	fe 01       	movw	r30, r28
    25f6:	ed 59       	subi	r30, 0x9D	; 157
    25f8:	ff 4f       	sbci	r31, 0xFF	; 255
    25fa:	80 81       	ld	r24, Z
    25fc:	98 2f       	mov	r25, r24
    25fe:	91 70       	andi	r25, 0x01	; 1
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	63 e0       	ldi	r22, 0x03	; 3
    2604:	49 2f       	mov	r20, r25
    2606:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    260a:	fe 01       	movw	r30, r28
    260c:	ed 59       	subi	r30, 0x9D	; 157
    260e:	ff 4f       	sbci	r31, 0xFF	; 255
    2610:	80 81       	ld	r24, Z
    2612:	88 2f       	mov	r24, r24
    2614:	90 e0       	ldi	r25, 0x00	; 0
    2616:	82 70       	andi	r24, 0x02	; 2
    2618:	90 70       	andi	r25, 0x00	; 0
    261a:	95 95       	asr	r25
    261c:	87 95       	ror	r24
    261e:	98 2f       	mov	r25, r24
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	64 e0       	ldi	r22, 0x04	; 4
    2624:	49 2f       	mov	r20, r25
    2626:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    262a:	fe 01       	movw	r30, r28
    262c:	ed 59       	subi	r30, 0x9D	; 157
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	80 81       	ld	r24, Z
    2632:	88 2f       	mov	r24, r24
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	84 70       	andi	r24, 0x04	; 4
    2638:	90 70       	andi	r25, 0x00	; 0
    263a:	95 95       	asr	r25
    263c:	87 95       	ror	r24
    263e:	95 95       	asr	r25
    2640:	87 95       	ror	r24
    2642:	98 2f       	mov	r25, r24
    2644:	80 e0       	ldi	r24, 0x00	; 0
    2646:	65 e0       	ldi	r22, 0x05	; 5
    2648:	49 2f       	mov	r20, r25
    264a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    264e:	fe 01       	movw	r30, r28
    2650:	ed 59       	subi	r30, 0x9D	; 157
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	80 81       	ld	r24, Z
    2656:	88 2f       	mov	r24, r24
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	88 70       	andi	r24, 0x08	; 8
    265c:	90 70       	andi	r25, 0x00	; 0
    265e:	95 95       	asr	r25
    2660:	87 95       	ror	r24
    2662:	95 95       	asr	r25
    2664:	87 95       	ror	r24
    2666:	95 95       	asr	r25
    2668:	87 95       	ror	r24
    266a:	98 2f       	mov	r25, r24
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	66 e0       	ldi	r22, 0x06	; 6
    2670:	49 2f       	mov	r20, r25
    2672:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	a0 e8       	ldi	r26, 0x80	; 128
    267c:	bf e3       	ldi	r27, 0x3F	; 63
    267e:	89 8f       	std	Y+25, r24	; 0x19
    2680:	9a 8f       	std	Y+26, r25	; 0x1a
    2682:	ab 8f       	std	Y+27, r26	; 0x1b
    2684:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2686:	69 8d       	ldd	r22, Y+25	; 0x19
    2688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    268a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    268c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	4a ef       	ldi	r20, 0xFA	; 250
    2694:	54 e4       	ldi	r21, 0x44	; 68
    2696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    269a:	dc 01       	movw	r26, r24
    269c:	cb 01       	movw	r24, r22
    269e:	8d 8b       	std	Y+21, r24	; 0x15
    26a0:	9e 8b       	std	Y+22, r25	; 0x16
    26a2:	af 8b       	std	Y+23, r26	; 0x17
    26a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26a6:	6d 89       	ldd	r22, Y+21	; 0x15
    26a8:	7e 89       	ldd	r23, Y+22	; 0x16
    26aa:	8f 89       	ldd	r24, Y+23	; 0x17
    26ac:	98 8d       	ldd	r25, Y+24	; 0x18
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	5f e3       	ldi	r21, 0x3F	; 63
    26b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ba:	88 23       	and	r24, r24
    26bc:	2c f4       	brge	.+10     	; 0x26c8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	9c 8b       	std	Y+20, r25	; 0x14
    26c4:	8b 8b       	std	Y+19, r24	; 0x13
    26c6:	3f c0       	rjmp	.+126    	; 0x2746 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    26c8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ca:	7e 89       	ldd	r23, Y+22	; 0x16
    26cc:	8f 89       	ldd	r24, Y+23	; 0x17
    26ce:	98 8d       	ldd	r25, Y+24	; 0x18
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26dc:	18 16       	cp	r1, r24
    26de:	4c f5       	brge	.+82     	; 0x2732 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e0:	69 8d       	ldd	r22, Y+25	; 0x19
    26e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	30 e0       	ldi	r19, 0x00	; 0
    26ec:	40 e2       	ldi	r20, 0x20	; 32
    26ee:	51 e4       	ldi	r21, 0x41	; 65
    26f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	bc 01       	movw	r22, r24
    26fa:	cd 01       	movw	r24, r26
    26fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2700:	dc 01       	movw	r26, r24
    2702:	cb 01       	movw	r24, r22
    2704:	9c 8b       	std	Y+20, r25	; 0x14
    2706:	8b 8b       	std	Y+19, r24	; 0x13
    2708:	0f c0       	rjmp	.+30     	; 0x2728 <LCD_displayCharacter+0x7be>
    270a:	88 ec       	ldi	r24, 0xC8	; 200
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	9a 8b       	std	Y+18, r25	; 0x12
    2710:	89 8b       	std	Y+17, r24	; 0x11
    2712:	89 89       	ldd	r24, Y+17	; 0x11
    2714:	9a 89       	ldd	r25, Y+18	; 0x12
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	f1 f7       	brne	.-4      	; 0x2716 <LCD_displayCharacter+0x7ac>
    271a:	9a 8b       	std	Y+18, r25	; 0x12
    271c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    271e:	8b 89       	ldd	r24, Y+19	; 0x13
    2720:	9c 89       	ldd	r25, Y+20	; 0x14
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	9c 8b       	std	Y+20, r25	; 0x14
    2726:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2728:	8b 89       	ldd	r24, Y+19	; 0x13
    272a:	9c 89       	ldd	r25, Y+20	; 0x14
    272c:	00 97       	sbiw	r24, 0x00	; 0
    272e:	69 f7       	brne	.-38     	; 0x270a <LCD_displayCharacter+0x7a0>
    2730:	14 c0       	rjmp	.+40     	; 0x275a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2732:	6d 89       	ldd	r22, Y+21	; 0x15
    2734:	7e 89       	ldd	r23, Y+22	; 0x16
    2736:	8f 89       	ldd	r24, Y+23	; 0x17
    2738:	98 8d       	ldd	r25, Y+24	; 0x18
    273a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    273e:	dc 01       	movw	r26, r24
    2740:	cb 01       	movw	r24, r22
    2742:	9c 8b       	std	Y+20, r25	; 0x14
    2744:	8b 8b       	std	Y+19, r24	; 0x13
    2746:	8b 89       	ldd	r24, Y+19	; 0x13
    2748:	9c 89       	ldd	r25, Y+20	; 0x14
    274a:	98 8b       	std	Y+16, r25	; 0x10
    274c:	8f 87       	std	Y+15, r24	; 0x0f
    274e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2750:	98 89       	ldd	r25, Y+16	; 0x10
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	f1 f7       	brne	.-4      	; 0x2752 <LCD_displayCharacter+0x7e8>
    2756:	98 8b       	std	Y+16, r25	; 0x10
    2758:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	62 e0       	ldi	r22, 0x02	; 2
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e8       	ldi	r26, 0x80	; 128
    276a:	bf e3       	ldi	r27, 0x3F	; 63
    276c:	8b 87       	std	Y+11, r24	; 0x0b
    276e:	9c 87       	std	Y+12, r25	; 0x0c
    2770:	ad 87       	std	Y+13, r26	; 0x0d
    2772:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2774:	6b 85       	ldd	r22, Y+11	; 0x0b
    2776:	7c 85       	ldd	r23, Y+12	; 0x0c
    2778:	8d 85       	ldd	r24, Y+13	; 0x0d
    277a:	9e 85       	ldd	r25, Y+14	; 0x0e
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	4a ef       	ldi	r20, 0xFA	; 250
    2782:	54 e4       	ldi	r21, 0x44	; 68
    2784:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2788:	dc 01       	movw	r26, r24
    278a:	cb 01       	movw	r24, r22
    278c:	8f 83       	std	Y+7, r24	; 0x07
    278e:	98 87       	std	Y+8, r25	; 0x08
    2790:	a9 87       	std	Y+9, r26	; 0x09
    2792:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2794:	6f 81       	ldd	r22, Y+7	; 0x07
    2796:	78 85       	ldd	r23, Y+8	; 0x08
    2798:	89 85       	ldd	r24, Y+9	; 0x09
    279a:	9a 85       	ldd	r25, Y+10	; 0x0a
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	40 e8       	ldi	r20, 0x80	; 128
    27a2:	5f e3       	ldi	r21, 0x3F	; 63
    27a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27a8:	88 23       	and	r24, r24
    27aa:	2c f4       	brge	.+10     	; 0x27b6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    27ac:	81 e0       	ldi	r24, 0x01	; 1
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	9e 83       	std	Y+6, r25	; 0x06
    27b2:	8d 83       	std	Y+5, r24	; 0x05
    27b4:	3f c0       	rjmp	.+126    	; 0x2834 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    27b6:	6f 81       	ldd	r22, Y+7	; 0x07
    27b8:	78 85       	ldd	r23, Y+8	; 0x08
    27ba:	89 85       	ldd	r24, Y+9	; 0x09
    27bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	3f ef       	ldi	r19, 0xFF	; 255
    27c2:	4f e7       	ldi	r20, 0x7F	; 127
    27c4:	57 e4       	ldi	r21, 0x47	; 71
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	4c f5       	brge	.+82     	; 0x2820 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    27d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d6:	20 e0       	ldi	r18, 0x00	; 0
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	40 e2       	ldi	r20, 0x20	; 32
    27dc:	51 e4       	ldi	r21, 0x41	; 65
    27de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	bc 01       	movw	r22, r24
    27e8:	cd 01       	movw	r24, r26
    27ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	9e 83       	std	Y+6, r25	; 0x06
    27f4:	8d 83       	std	Y+5, r24	; 0x05
    27f6:	0f c0       	rjmp	.+30     	; 0x2816 <LCD_displayCharacter+0x8ac>
    27f8:	88 ec       	ldi	r24, 0xC8	; 200
    27fa:	90 e0       	ldi	r25, 0x00	; 0
    27fc:	9c 83       	std	Y+4, r25	; 0x04
    27fe:	8b 83       	std	Y+3, r24	; 0x03
    2800:	8b 81       	ldd	r24, Y+3	; 0x03
    2802:	9c 81       	ldd	r25, Y+4	; 0x04
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	f1 f7       	brne	.-4      	; 0x2804 <LCD_displayCharacter+0x89a>
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	01 97       	sbiw	r24, 0x01	; 1
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	00 97       	sbiw	r24, 0x00	; 0
    281c:	69 f7       	brne	.-38     	; 0x27f8 <LCD_displayCharacter+0x88e>
    281e:	14 c0       	rjmp	.+40     	; 0x2848 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2820:	6f 81       	ldd	r22, Y+7	; 0x07
    2822:	78 85       	ldd	r23, Y+8	; 0x08
    2824:	89 85       	ldd	r24, Y+9	; 0x09
    2826:	9a 85       	ldd	r25, Y+10	; 0x0a
    2828:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	9e 83       	std	Y+6, r25	; 0x06
    2832:	8d 83       	std	Y+5, r24	; 0x05
    2834:	8d 81       	ldd	r24, Y+5	; 0x05
    2836:	9e 81       	ldd	r25, Y+6	; 0x06
    2838:	9a 83       	std	Y+2, r25	; 0x02
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	89 81       	ldd	r24, Y+1	; 0x01
    283e:	9a 81       	ldd	r25, Y+2	; 0x02
    2840:	01 97       	sbiw	r24, 0x01	; 1
    2842:	f1 f7       	brne	.-4      	; 0x2840 <LCD_displayCharacter+0x8d6>
    2844:	9a 83       	std	Y+2, r25	; 0x02
    2846:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2848:	cd 59       	subi	r28, 0x9D	; 157
    284a:	df 4f       	sbci	r29, 0xFF	; 255
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	08 95       	ret

00002860 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2860:	df 93       	push	r29
    2862:	cf 93       	push	r28
    2864:	00 d0       	rcall	.+0      	; 0x2866 <LCD_displayString+0x6>
    2866:	0f 92       	push	r0
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	9b 83       	std	Y+3, r25	; 0x03
    286e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2870:	19 82       	std	Y+1, r1	; 0x01
    2872:	0e c0       	rjmp	.+28     	; 0x2890 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2874:	89 81       	ldd	r24, Y+1	; 0x01
    2876:	28 2f       	mov	r18, r24
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	9b 81       	ldd	r25, Y+3	; 0x03
    287e:	fc 01       	movw	r30, r24
    2880:	e2 0f       	add	r30, r18
    2882:	f3 1f       	adc	r31, r19
    2884:	80 81       	ld	r24, Z
    2886:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>
		i++;
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	8f 5f       	subi	r24, 0xFF	; 255
    288e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2890:	89 81       	ldd	r24, Y+1	; 0x01
    2892:	28 2f       	mov	r18, r24
    2894:	30 e0       	ldi	r19, 0x00	; 0
    2896:	8a 81       	ldd	r24, Y+2	; 0x02
    2898:	9b 81       	ldd	r25, Y+3	; 0x03
    289a:	fc 01       	movw	r30, r24
    289c:	e2 0f       	add	r30, r18
    289e:	f3 1f       	adc	r31, r19
    28a0:	80 81       	ld	r24, Z
    28a2:	88 23       	and	r24, r24
    28a4:	39 f7       	brne	.-50     	; 0x2874 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	cf 91       	pop	r28
    28ae:	df 91       	pop	r29
    28b0:	08 95       	ret

000028b2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <LCD_moveCursor+0x6>
    28b8:	00 d0       	rcall	.+0      	; 0x28ba <LCD_moveCursor+0x8>
    28ba:	0f 92       	push	r0
    28bc:	cd b7       	in	r28, 0x3d	; 61
    28be:	de b7       	in	r29, 0x3e	; 62
    28c0:	8a 83       	std	Y+2, r24	; 0x02
    28c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	28 2f       	mov	r18, r24
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	3d 83       	std	Y+5, r19	; 0x05
    28cc:	2c 83       	std	Y+4, r18	; 0x04
    28ce:	8c 81       	ldd	r24, Y+4	; 0x04
    28d0:	9d 81       	ldd	r25, Y+5	; 0x05
    28d2:	81 30       	cpi	r24, 0x01	; 1
    28d4:	91 05       	cpc	r25, r1
    28d6:	c1 f0       	breq	.+48     	; 0x2908 <LCD_moveCursor+0x56>
    28d8:	2c 81       	ldd	r18, Y+4	; 0x04
    28da:	3d 81       	ldd	r19, Y+5	; 0x05
    28dc:	22 30       	cpi	r18, 0x02	; 2
    28de:	31 05       	cpc	r19, r1
    28e0:	2c f4       	brge	.+10     	; 0x28ec <LCD_moveCursor+0x3a>
    28e2:	8c 81       	ldd	r24, Y+4	; 0x04
    28e4:	9d 81       	ldd	r25, Y+5	; 0x05
    28e6:	00 97       	sbiw	r24, 0x00	; 0
    28e8:	61 f0       	breq	.+24     	; 0x2902 <LCD_moveCursor+0x50>
    28ea:	19 c0       	rjmp	.+50     	; 0x291e <LCD_moveCursor+0x6c>
    28ec:	2c 81       	ldd	r18, Y+4	; 0x04
    28ee:	3d 81       	ldd	r19, Y+5	; 0x05
    28f0:	22 30       	cpi	r18, 0x02	; 2
    28f2:	31 05       	cpc	r19, r1
    28f4:	69 f0       	breq	.+26     	; 0x2910 <LCD_moveCursor+0x5e>
    28f6:	8c 81       	ldd	r24, Y+4	; 0x04
    28f8:	9d 81       	ldd	r25, Y+5	; 0x05
    28fa:	83 30       	cpi	r24, 0x03	; 3
    28fc:	91 05       	cpc	r25, r1
    28fe:	61 f0       	breq	.+24     	; 0x2918 <LCD_moveCursor+0x66>
    2900:	0e c0       	rjmp	.+28     	; 0x291e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	0b c0       	rjmp	.+22     	; 0x291e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	80 5c       	subi	r24, 0xC0	; 192
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	07 c0       	rjmp	.+14     	; 0x291e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2910:	8b 81       	ldd	r24, Y+3	; 0x03
    2912:	80 5f       	subi	r24, 0xF0	; 240
    2914:	89 83       	std	Y+1, r24	; 0x01
    2916:	03 c0       	rjmp	.+6      	; 0x291e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	80 5b       	subi	r24, 0xB0	; 176
    291c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	80 68       	ori	r24, 0x80	; 128
    2922:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	0f 90       	pop	r0
    2930:	cf 91       	pop	r28
    2932:	df 91       	pop	r29
    2934:	08 95       	ret

00002936 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	00 d0       	rcall	.+0      	; 0x293c <LCD_displayStringRowColumn+0x6>
    293c:	00 d0       	rcall	.+0      	; 0x293e <LCD_displayStringRowColumn+0x8>
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	6a 83       	std	Y+2, r22	; 0x02
    2946:	5c 83       	std	Y+4, r21	; 0x04
    2948:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    294a:	89 81       	ldd	r24, Y+1	; 0x01
    294c:	6a 81       	ldd	r22, Y+2	; 0x02
    294e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2952:	8b 81       	ldd	r24, Y+3	; 0x03
    2954:	9c 81       	ldd	r25, Y+4	; 0x04
    2956:	0e 94 30 14 	call	0x2860	; 0x2860 <LCD_displayString>
}
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	cf 91       	pop	r28
    2964:	df 91       	pop	r29
    2966:	08 95       	ret

00002968 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2968:	df 93       	push	r29
    296a:	cf 93       	push	r28
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	62 97       	sbiw	r28, 0x12	; 18
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	9a 8b       	std	Y+18, r25	; 0x12
    297e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2980:	89 89       	ldd	r24, Y+17	; 0x11
    2982:	9a 89       	ldd	r25, Y+18	; 0x12
    2984:	9e 01       	movw	r18, r28
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	b9 01       	movw	r22, r18
    298c:	4a e0       	ldi	r20, 0x0A	; 10
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	0e 94 2e 20 	call	0x405c	; 0x405c <itoa>
   LCD_displayString(buff); /* Display the string */
    2994:	ce 01       	movw	r24, r28
    2996:	01 96       	adiw	r24, 0x01	; 1
    2998:	0e 94 30 14 	call	0x2860	; 0x2860 <LCD_displayString>
}
    299c:	62 96       	adiw	r28, 0x12	; 18
    299e:	0f b6       	in	r0, 0x3f	; 63
    29a0:	f8 94       	cli
    29a2:	de bf       	out	0x3e, r29	; 62
    29a4:	0f be       	out	0x3f, r0	; 63
    29a6:	cd bf       	out	0x3d, r28	; 61
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_sendCommand>
}
    29bc:	cf 91       	pop	r28
    29be:	df 91       	pop	r29
    29c0:	08 95       	ret

000029c2 <main>:
uint8 val_check = 0;
uint8 pass_flag = 1;
uint8 i;
uint8 counter = 0;
uint8 ticks = 0;
int main(void) {
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	ca 59       	subi	r28, 0x9A	; 154
    29d0:	d0 40       	sbci	r29, 0x00	; 0
    29d2:	0f b6       	in	r0, 0x3f	; 63
    29d4:	f8 94       	cli
    29d6:	de bf       	out	0x3e, r29	; 62
    29d8:	0f be       	out	0x3f, r0	; 63
    29da:	cd bf       	out	0x3d, r28	; 61
	//uint8 Str[20];

	LCD_init();
    29dc:	0e 94 88 0a 	call	0x1510	; 0x1510 <LCD_init>
	UART_init(&UART_configerations);
    29e0:	87 ef       	ldi	r24, 0xF7	; 247
    29e2:	90 e0       	ldi	r25, 0x00	; 0
    29e4:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <UART_init>
	Timer1_setCallBack(callback_function);
    29e8:	80 e8       	ldi	r24, 0x80	; 128
    29ea:	9d e1       	ldi	r25, 0x1D	; 29
    29ec:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <Timer1_setCallBack>

	UART_sendByte(MC2_READY);
    29f0:	80 e1       	ldi	r24, 0x10	; 16
    29f2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    29f6:	ca c1       	rjmp	.+916    	; 0x2d8c <main+0x3ca>
	while (pass_flag != 0) {
		LCD_clearScreen();
    29f8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
    29fc:	20 e6       	ldi	r18, 0x60	; 96
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	a9 01       	movw	r20, r18
    2a06:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0); /* Move the cursor to the second row */
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	60 e0       	ldi	r22, 0x00	; 0
    2a0e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>

		for (i = 0; i < PASS_SIZE; i++) {
    2a12:	10 92 17 01 	sts	0x0117, r1
    2a16:	bf c0       	rjmp	.+382    	; 0x2b96 <main+0x1d4>

			UART_sendByte(KEYPAD_getPressedKey());
    2a18:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2a1c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e9 56       	subi	r30, 0x69	; 105
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	a6 e1       	ldi	r26, 0x16	; 22
    2a2c:	b4 e4       	ldi	r27, 0x44	; 68
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a36:	8e 01       	movw	r16, r28
    2a38:	0d 56       	subi	r16, 0x6D	; 109
    2a3a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e9 56       	subi	r30, 0x69	; 105
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	60 81       	ld	r22, Z
    2a44:	71 81       	ldd	r23, Z+1	; 0x01
    2a46:	82 81       	ldd	r24, Z+2	; 0x02
    2a48:	93 81       	ldd	r25, Z+3	; 0x03
    2a4a:	20 e0       	ldi	r18, 0x00	; 0
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	4a ef       	ldi	r20, 0xFA	; 250
    2a50:	54 e4       	ldi	r21, 0x44	; 68
    2a52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	f8 01       	movw	r30, r16
    2a5c:	80 83       	st	Z, r24
    2a5e:	91 83       	std	Z+1, r25	; 0x01
    2a60:	a2 83       	std	Z+2, r26	; 0x02
    2a62:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a64:	fe 01       	movw	r30, r28
    2a66:	ed 56       	subi	r30, 0x6D	; 109
    2a68:	ff 4f       	sbci	r31, 0xFF	; 255
    2a6a:	60 81       	ld	r22, Z
    2a6c:	71 81       	ldd	r23, Z+1	; 0x01
    2a6e:	82 81       	ldd	r24, Z+2	; 0x02
    2a70:	93 81       	ldd	r25, Z+3	; 0x03
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	30 e0       	ldi	r19, 0x00	; 0
    2a76:	40 e8       	ldi	r20, 0x80	; 128
    2a78:	5f e3       	ldi	r21, 0x3F	; 63
    2a7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a7e:	88 23       	and	r24, r24
    2a80:	44 f4       	brge	.+16     	; 0x2a92 <main+0xd0>
		__ticks = 1;
    2a82:	fe 01       	movw	r30, r28
    2a84:	ef 56       	subi	r30, 0x6F	; 111
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	90 e0       	ldi	r25, 0x00	; 0
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
    2a90:	64 c0       	rjmp	.+200    	; 0x2b5a <main+0x198>
	else if (__tmp > 65535)
    2a92:	fe 01       	movw	r30, r28
    2a94:	ed 56       	subi	r30, 0x6D	; 109
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	60 81       	ld	r22, Z
    2a9a:	71 81       	ldd	r23, Z+1	; 0x01
    2a9c:	82 81       	ldd	r24, Z+2	; 0x02
    2a9e:	93 81       	ldd	r25, Z+3	; 0x03
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	3f ef       	ldi	r19, 0xFF	; 255
    2aa4:	4f e7       	ldi	r20, 0x7F	; 127
    2aa6:	57 e4       	ldi	r21, 0x47	; 71
    2aa8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2aac:	18 16       	cp	r1, r24
    2aae:	0c f0       	brlt	.+2      	; 0x2ab2 <main+0xf0>
    2ab0:	43 c0       	rjmp	.+134    	; 0x2b38 <main+0x176>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	e9 56       	subi	r30, 0x69	; 105
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	60 81       	ld	r22, Z
    2aba:	71 81       	ldd	r23, Z+1	; 0x01
    2abc:	82 81       	ldd	r24, Z+2	; 0x02
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	40 e2       	ldi	r20, 0x20	; 32
    2ac6:	51 e4       	ldi	r21, 0x41	; 65
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	8e 01       	movw	r16, r28
    2ad2:	0f 56       	subi	r16, 0x6F	; 111
    2ad4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ad6:	bc 01       	movw	r22, r24
    2ad8:	cd 01       	movw	r24, r26
    2ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ade:	dc 01       	movw	r26, r24
    2ae0:	cb 01       	movw	r24, r22
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	91 83       	std	Z+1, r25	; 0x01
    2ae6:	80 83       	st	Z, r24
    2ae8:	1f c0       	rjmp	.+62     	; 0x2b28 <main+0x166>
    2aea:	fe 01       	movw	r30, r28
    2aec:	e1 57       	subi	r30, 0x71	; 113
    2aee:	ff 4f       	sbci	r31, 0xFF	; 255
    2af0:	88 ec       	ldi	r24, 0xC8	; 200
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	91 83       	std	Z+1, r25	; 0x01
    2af6:	80 83       	st	Z, r24
    2af8:	fe 01       	movw	r30, r28
    2afa:	e1 57       	subi	r30, 0x71	; 113
    2afc:	ff 4f       	sbci	r31, 0xFF	; 255
    2afe:	80 81       	ld	r24, Z
    2b00:	91 81       	ldd	r25, Z+1	; 0x01
    2b02:	01 97       	sbiw	r24, 0x01	; 1
    2b04:	f1 f7       	brne	.-4      	; 0x2b02 <main+0x140>
    2b06:	fe 01       	movw	r30, r28
    2b08:	e1 57       	subi	r30, 0x71	; 113
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	91 83       	std	Z+1, r25	; 0x01
    2b0e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b10:	de 01       	movw	r26, r28
    2b12:	af 56       	subi	r26, 0x6F	; 111
    2b14:	bf 4f       	sbci	r27, 0xFF	; 255
    2b16:	fe 01       	movw	r30, r28
    2b18:	ef 56       	subi	r30, 0x6F	; 111
    2b1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1c:	80 81       	ld	r24, Z
    2b1e:	91 81       	ldd	r25, Z+1	; 0x01
    2b20:	01 97       	sbiw	r24, 0x01	; 1
    2b22:	11 96       	adiw	r26, 0x01	; 1
    2b24:	9c 93       	st	X, r25
    2b26:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b28:	fe 01       	movw	r30, r28
    2b2a:	ef 56       	subi	r30, 0x6F	; 111
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	80 81       	ld	r24, Z
    2b30:	91 81       	ldd	r25, Z+1	; 0x01
    2b32:	00 97       	sbiw	r24, 0x00	; 0
    2b34:	d1 f6       	brne	.-76     	; 0x2aea <main+0x128>
    2b36:	27 c0       	rjmp	.+78     	; 0x2b86 <main+0x1c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b38:	8e 01       	movw	r16, r28
    2b3a:	0f 56       	subi	r16, 0x6F	; 111
    2b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b3e:	fe 01       	movw	r30, r28
    2b40:	ed 56       	subi	r30, 0x6D	; 109
    2b42:	ff 4f       	sbci	r31, 0xFF	; 255
    2b44:	60 81       	ld	r22, Z
    2b46:	71 81       	ldd	r23, Z+1	; 0x01
    2b48:	82 81       	ldd	r24, Z+2	; 0x02
    2b4a:	93 81       	ldd	r25, Z+3	; 0x03
    2b4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	f8 01       	movw	r30, r16
    2b56:	91 83       	std	Z+1, r25	; 0x01
    2b58:	80 83       	st	Z, r24
    2b5a:	de 01       	movw	r26, r28
    2b5c:	a3 57       	subi	r26, 0x73	; 115
    2b5e:	bf 4f       	sbci	r27, 0xFF	; 255
    2b60:	fe 01       	movw	r30, r28
    2b62:	ef 56       	subi	r30, 0x6F	; 111
    2b64:	ff 4f       	sbci	r31, 0xFF	; 255
    2b66:	80 81       	ld	r24, Z
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	8d 93       	st	X+, r24
    2b6c:	9c 93       	st	X, r25
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e3 57       	subi	r30, 0x73	; 115
    2b72:	ff 4f       	sbci	r31, 0xFF	; 255
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <main+0x1b6>
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e3 57       	subi	r30, 0x73	; 115
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	91 83       	std	Z+1, r25	; 0x01
    2b84:	80 83       	st	Z, r24
			_delay_ms(600); /*Key pressed delay*/
			LCD_displayCharacter('*');
    2b86:	8a e2       	ldi	r24, 0x2A	; 42
    2b88:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>
	while (pass_flag != 0) {
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
		LCD_moveCursor(1, 0); /* Move the cursor to the second row */

		for (i = 0; i < PASS_SIZE; i++) {
    2b8c:	80 91 17 01 	lds	r24, 0x0117
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	80 93 17 01 	sts	0x0117, r24
    2b96:	80 91 17 01 	lds	r24, 0x0117
    2b9a:	85 30       	cpi	r24, 0x05	; 5
    2b9c:	08 f4       	brcc	.+2      	; 0x2ba0 <main+0x1de>
    2b9e:	3c cf       	rjmp	.-392    	; 0x2a18 <main+0x56>
			UART_sendByte(KEYPAD_getPressedKey());
			_delay_ms(600); /*Key pressed delay*/
			LCD_displayCharacter('*');

		}
		while (KEYPAD_getPressedKey() != 13)
    2ba0:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2ba4:	8d 30       	cpi	r24, 0x0D	; 13
    2ba6:	e1 f7       	brne	.-8      	; 0x2ba0 <main+0x1de>
			;

		LCD_clearScreen();
    2ba8:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "Pls Re-Enter the");
    2bac:	20 e7       	ldi	r18, 0x70	; 112
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	60 e0       	ldi	r22, 0x00	; 0
    2bb4:	a9 01       	movw	r20, r18
    2bb6:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "same Pass:");
    2bba:	21 e8       	ldi	r18, 0x81	; 129
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	60 e0       	ldi	r22, 0x00	; 0
    2bc2:	a9 01       	movw	r20, r18
    2bc4:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>

		for (i = 0; i < PASS_SIZE; i++) {
    2bc8:	10 92 17 01 	sts	0x0117, r1
    2bcc:	c2 c0       	rjmp	.+388    	; 0x2d52 <main+0x390>
			UART_sendByte(MC2_READY);
    2bce:	80 e1       	ldi	r24, 0x10	; 16
    2bd0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
			UART_sendByte(KEYPAD_getPressedKey());
    2bd4:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2bd8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    2bdc:	fe 01       	movw	r30, r28
    2bde:	e7 57       	subi	r30, 0x77	; 119
    2be0:	ff 4f       	sbci	r31, 0xFF	; 255
    2be2:	80 e0       	ldi	r24, 0x00	; 0
    2be4:	90 e0       	ldi	r25, 0x00	; 0
    2be6:	a6 e1       	ldi	r26, 0x16	; 22
    2be8:	b4 e4       	ldi	r27, 0x44	; 68
    2bea:	80 83       	st	Z, r24
    2bec:	91 83       	std	Z+1, r25	; 0x01
    2bee:	a2 83       	std	Z+2, r26	; 0x02
    2bf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bf2:	8e 01       	movw	r16, r28
    2bf4:	0b 57       	subi	r16, 0x7B	; 123
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	e7 57       	subi	r30, 0x77	; 119
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	60 81       	ld	r22, Z
    2c00:	71 81       	ldd	r23, Z+1	; 0x01
    2c02:	82 81       	ldd	r24, Z+2	; 0x02
    2c04:	93 81       	ldd	r25, Z+3	; 0x03
    2c06:	20 e0       	ldi	r18, 0x00	; 0
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	4a ef       	ldi	r20, 0xFA	; 250
    2c0c:	54 e4       	ldi	r21, 0x44	; 68
    2c0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c12:	dc 01       	movw	r26, r24
    2c14:	cb 01       	movw	r24, r22
    2c16:	f8 01       	movw	r30, r16
    2c18:	80 83       	st	Z, r24
    2c1a:	91 83       	std	Z+1, r25	; 0x01
    2c1c:	a2 83       	std	Z+2, r26	; 0x02
    2c1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c20:	fe 01       	movw	r30, r28
    2c22:	eb 57       	subi	r30, 0x7B	; 123
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e8       	ldi	r20, 0x80	; 128
    2c34:	5f e3       	ldi	r21, 0x3F	; 63
    2c36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c3a:	88 23       	and	r24, r24
    2c3c:	44 f4       	brge	.+16     	; 0x2c4e <main+0x28c>
		__ticks = 1;
    2c3e:	fe 01       	movw	r30, r28
    2c40:	ed 57       	subi	r30, 0x7D	; 125
    2c42:	ff 4f       	sbci	r31, 0xFF	; 255
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	91 83       	std	Z+1, r25	; 0x01
    2c4a:	80 83       	st	Z, r24
    2c4c:	64 c0       	rjmp	.+200    	; 0x2d16 <main+0x354>
	else if (__tmp > 65535)
    2c4e:	fe 01       	movw	r30, r28
    2c50:	eb 57       	subi	r30, 0x7B	; 123
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	60 81       	ld	r22, Z
    2c56:	71 81       	ldd	r23, Z+1	; 0x01
    2c58:	82 81       	ldd	r24, Z+2	; 0x02
    2c5a:	93 81       	ldd	r25, Z+3	; 0x03
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	0c f0       	brlt	.+2      	; 0x2c6e <main+0x2ac>
    2c6c:	43 c0       	rjmp	.+134    	; 0x2cf4 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6e:	fe 01       	movw	r30, r28
    2c70:	e7 57       	subi	r30, 0x77	; 119
    2c72:	ff 4f       	sbci	r31, 0xFF	; 255
    2c74:	60 81       	ld	r22, Z
    2c76:	71 81       	ldd	r23, Z+1	; 0x01
    2c78:	82 81       	ldd	r24, Z+2	; 0x02
    2c7a:	93 81       	ldd	r25, Z+3	; 0x03
    2c7c:	20 e0       	ldi	r18, 0x00	; 0
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	40 e2       	ldi	r20, 0x20	; 32
    2c82:	51 e4       	ldi	r21, 0x41	; 65
    2c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	8e 01       	movw	r16, r28
    2c8e:	0d 57       	subi	r16, 0x7D	; 125
    2c90:	1f 4f       	sbci	r17, 0xFF	; 255
    2c92:	bc 01       	movw	r22, r24
    2c94:	cd 01       	movw	r24, r26
    2c96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	cb 01       	movw	r24, r22
    2c9e:	f8 01       	movw	r30, r16
    2ca0:	91 83       	std	Z+1, r25	; 0x01
    2ca2:	80 83       	st	Z, r24
    2ca4:	1f c0       	rjmp	.+62     	; 0x2ce4 <main+0x322>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	ef 57       	subi	r30, 0x7F	; 127
    2caa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cac:	88 ec       	ldi	r24, 0xC8	; 200
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	91 83       	std	Z+1, r25	; 0x01
    2cb2:	80 83       	st	Z, r24
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ef 57       	subi	r30, 0x7F	; 127
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	91 81       	ldd	r25, Z+1	; 0x01
    2cbe:	01 97       	sbiw	r24, 0x01	; 1
    2cc0:	f1 f7       	brne	.-4      	; 0x2cbe <main+0x2fc>
    2cc2:	fe 01       	movw	r30, r28
    2cc4:	ef 57       	subi	r30, 0x7F	; 127
    2cc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ccc:	de 01       	movw	r26, r28
    2cce:	ad 57       	subi	r26, 0x7D	; 125
    2cd0:	bf 4f       	sbci	r27, 0xFF	; 255
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	ed 57       	subi	r30, 0x7D	; 125
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	91 81       	ldd	r25, Z+1	; 0x01
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	11 96       	adiw	r26, 0x01	; 1
    2ce0:	9c 93       	st	X, r25
    2ce2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ed 57       	subi	r30, 0x7D	; 125
    2ce8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cea:	80 81       	ld	r24, Z
    2cec:	91 81       	ldd	r25, Z+1	; 0x01
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	d1 f6       	brne	.-76     	; 0x2ca6 <main+0x2e4>
    2cf2:	27 c0       	rjmp	.+78     	; 0x2d42 <main+0x380>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	8e 01       	movw	r16, r28
    2cf6:	0d 57       	subi	r16, 0x7D	; 125
    2cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	eb 57       	subi	r30, 0x7B	; 123
    2cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2d00:	60 81       	ld	r22, Z
    2d02:	71 81       	ldd	r23, Z+1	; 0x01
    2d04:	82 81       	ldd	r24, Z+2	; 0x02
    2d06:	93 81       	ldd	r25, Z+3	; 0x03
    2d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d0c:	dc 01       	movw	r26, r24
    2d0e:	cb 01       	movw	r24, r22
    2d10:	f8 01       	movw	r30, r16
    2d12:	91 83       	std	Z+1, r25	; 0x01
    2d14:	80 83       	st	Z, r24
    2d16:	de 01       	movw	r26, r28
    2d18:	a1 58       	subi	r26, 0x81	; 129
    2d1a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d1c:	fe 01       	movw	r30, r28
    2d1e:	ed 57       	subi	r30, 0x7D	; 125
    2d20:	ff 4f       	sbci	r31, 0xFF	; 255
    2d22:	80 81       	ld	r24, Z
    2d24:	91 81       	ldd	r25, Z+1	; 0x01
    2d26:	8d 93       	st	X+, r24
    2d28:	9c 93       	st	X, r25
    2d2a:	fe 01       	movw	r30, r28
    2d2c:	e1 58       	subi	r30, 0x81	; 129
    2d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d30:	80 81       	ld	r24, Z
    2d32:	91 81       	ldd	r25, Z+1	; 0x01
    2d34:	01 97       	sbiw	r24, 0x01	; 1
    2d36:	f1 f7       	brne	.-4      	; 0x2d34 <main+0x372>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	e1 58       	subi	r30, 0x81	; 129
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	91 83       	std	Z+1, r25	; 0x01
    2d40:	80 83       	st	Z, r24
			_delay_ms(600); /*Key pressed delay*/
			LCD_displayCharacter('*');
    2d42:	8a e2       	ldi	r24, 0x2A	; 42
    2d44:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>

		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "Pls Re-Enter the");
		LCD_displayStringRowColumn(1, 0, "same Pass:");

		for (i = 0; i < PASS_SIZE; i++) {
    2d48:	80 91 17 01 	lds	r24, 0x0117
    2d4c:	8f 5f       	subi	r24, 0xFF	; 255
    2d4e:	80 93 17 01 	sts	0x0117, r24
    2d52:	80 91 17 01 	lds	r24, 0x0117
    2d56:	85 30       	cpi	r24, 0x05	; 5
    2d58:	08 f4       	brcc	.+2      	; 0x2d5c <main+0x39a>
    2d5a:	39 cf       	rjmp	.-398    	; 0x2bce <main+0x20c>
			UART_sendByte(MC2_READY);
			UART_sendByte(KEYPAD_getPressedKey());
			_delay_ms(600); /*Key pressed delay*/
			LCD_displayCharacter('*');
		}
		while (KEYPAD_getPressedKey() != 13)
    2d5c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2d60:	8d 30       	cpi	r24, 0x0D	; 13
    2d62:	e1 f7       	brne	.-8      	; 0x2d5c <main+0x39a>
			;

		UART_sendByte(MC2_READY);
    2d64:	80 e1       	ldi	r24, 0x10	; 16
    2d66:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>

		val_check = UART_recieveByte();
    2d6a:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    2d6e:	80 93 fe 00 	sts	0x00FE, r24

		if (val_check == 1) {
    2d72:	80 91 fe 00 	lds	r24, 0x00FE
    2d76:	81 30       	cpi	r24, 0x01	; 1
    2d78:	49 f4       	brne	.+18     	; 0x2d8c <main+0x3ca>
			pass_flag = 0;
    2d7a:	10 92 f0 00 	sts	0x00F0, r1
			UART_sendByte(MC2_READY);
    2d7e:	80 e1       	ldi	r24, 0x10	; 16
    2d80:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
			UART_sendByte(pass_flag);
    2d84:	80 91 f0 00 	lds	r24, 0x00F0
    2d88:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
	LCD_init();
	UART_init(&UART_configerations);
	Timer1_setCallBack(callback_function);

	UART_sendByte(MC2_READY);
	while (pass_flag != 0) {
    2d8c:	80 91 f0 00 	lds	r24, 0x00F0
    2d90:	88 23       	and	r24, r24
    2d92:	09 f0       	breq	.+2      	; 0x2d96 <main+0x3d4>
    2d94:	31 ce       	rjmp	.-926    	; 0x29f8 <main+0x36>
			UART_sendByte(MC2_READY);
			UART_sendByte(pass_flag);
		}

	}
	pass_flag = 0;
    2d96:	10 92 f0 00 	sts	0x00F0, r1
	for (;;) {
		LCD_clearScreen();
    2d9a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "+ : Open Door");
    2d9e:	2c e8       	ldi	r18, 0x8C	; 140
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	60 e0       	ldi	r22, 0x00	; 0
    2da6:	a9 01       	movw	r20, r18
    2da8:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "- : Change Pass");
    2dac:	2a e9       	ldi	r18, 0x9A	; 154
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	60 e0       	ldi	r22, 0x00	; 0
    2db4:	a9 01       	movw	r20, r18
    2db6:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
		if (KEYPAD_getPressedKey() == '+') {
    2dba:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2dbe:	8b 32       	cpi	r24, 0x2B	; 43
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <main+0x402>
    2dc2:	1c c4       	rjmp	.+2104   	; 0x35fc <main+0xc3a>

			UART_sendByte(MC2_READY);
    2dc4:	80 e1       	ldi	r24, 0x10	; 16
    2dc6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
			UART_sendByte(KEYPAD_getPressedKey());
    2dca:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2dce:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>

			LCD_clearScreen();
    2dd2:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
    2dd6:	20 e6       	ldi	r18, 0x60	; 96
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	60 e0       	ldi	r22, 0x00	; 0
    2dde:	a9 01       	movw	r20, r18
    2de0:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
			LCD_moveCursor(1, 0); /* Move the cursor to the second row */
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	60 e0       	ldi	r22, 0x00	; 0
    2de8:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>

			for (i = 0; i < PASS_SIZE; i++) {
    2dec:	10 92 17 01 	sts	0x0117, r1
    2df0:	c2 c0       	rjmp	.+388    	; 0x2f76 <main+0x5b4>
				UART_sendByte(MC2_READY);
    2df2:	80 e1       	ldi	r24, 0x10	; 16
    2df4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
				UART_sendByte(KEYPAD_getPressedKey());
    2df8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2dfc:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    2e00:	fe 01       	movw	r30, r28
    2e02:	e5 58       	subi	r30, 0x85	; 133
    2e04:	ff 4f       	sbci	r31, 0xFF	; 255
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	af e2       	ldi	r26, 0x2F	; 47
    2e0c:	b4 e4       	ldi	r27, 0x44	; 68
    2e0e:	80 83       	st	Z, r24
    2e10:	91 83       	std	Z+1, r25	; 0x01
    2e12:	a2 83       	std	Z+2, r26	; 0x02
    2e14:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e16:	8e 01       	movw	r16, r28
    2e18:	09 58       	subi	r16, 0x89	; 137
    2e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2e1c:	fe 01       	movw	r30, r28
    2e1e:	e5 58       	subi	r30, 0x85	; 133
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	60 81       	ld	r22, Z
    2e24:	71 81       	ldd	r23, Z+1	; 0x01
    2e26:	82 81       	ldd	r24, Z+2	; 0x02
    2e28:	93 81       	ldd	r25, Z+3	; 0x03
    2e2a:	20 e0       	ldi	r18, 0x00	; 0
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	4a ef       	ldi	r20, 0xFA	; 250
    2e30:	54 e4       	ldi	r21, 0x44	; 68
    2e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e36:	dc 01       	movw	r26, r24
    2e38:	cb 01       	movw	r24, r22
    2e3a:	f8 01       	movw	r30, r16
    2e3c:	80 83       	st	Z, r24
    2e3e:	91 83       	std	Z+1, r25	; 0x01
    2e40:	a2 83       	std	Z+2, r26	; 0x02
    2e42:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e44:	fe 01       	movw	r30, r28
    2e46:	e9 58       	subi	r30, 0x89	; 137
    2e48:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4a:	60 81       	ld	r22, Z
    2e4c:	71 81       	ldd	r23, Z+1	; 0x01
    2e4e:	82 81       	ldd	r24, Z+2	; 0x02
    2e50:	93 81       	ldd	r25, Z+3	; 0x03
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	40 e8       	ldi	r20, 0x80	; 128
    2e58:	5f e3       	ldi	r21, 0x3F	; 63
    2e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e5e:	88 23       	and	r24, r24
    2e60:	44 f4       	brge	.+16     	; 0x2e72 <main+0x4b0>
		__ticks = 1;
    2e62:	fe 01       	movw	r30, r28
    2e64:	eb 58       	subi	r30, 0x8B	; 139
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	64 c0       	rjmp	.+200    	; 0x2f3a <main+0x578>
	else if (__tmp > 65535)
    2e72:	fe 01       	movw	r30, r28
    2e74:	e9 58       	subi	r30, 0x89	; 137
    2e76:	ff 4f       	sbci	r31, 0xFF	; 255
    2e78:	60 81       	ld	r22, Z
    2e7a:	71 81       	ldd	r23, Z+1	; 0x01
    2e7c:	82 81       	ldd	r24, Z+2	; 0x02
    2e7e:	93 81       	ldd	r25, Z+3	; 0x03
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	3f ef       	ldi	r19, 0xFF	; 255
    2e84:	4f e7       	ldi	r20, 0x7F	; 127
    2e86:	57 e4       	ldi	r21, 0x47	; 71
    2e88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e8c:	18 16       	cp	r1, r24
    2e8e:	0c f0       	brlt	.+2      	; 0x2e92 <main+0x4d0>
    2e90:	43 c0       	rjmp	.+134    	; 0x2f18 <main+0x556>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	fe 01       	movw	r30, r28
    2e94:	e5 58       	subi	r30, 0x85	; 133
    2e96:	ff 4f       	sbci	r31, 0xFF	; 255
    2e98:	60 81       	ld	r22, Z
    2e9a:	71 81       	ldd	r23, Z+1	; 0x01
    2e9c:	82 81       	ldd	r24, Z+2	; 0x02
    2e9e:	93 81       	ldd	r25, Z+3	; 0x03
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	30 e0       	ldi	r19, 0x00	; 0
    2ea4:	40 e2       	ldi	r20, 0x20	; 32
    2ea6:	51 e4       	ldi	r21, 0x41	; 65
    2ea8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eac:	dc 01       	movw	r26, r24
    2eae:	cb 01       	movw	r24, r22
    2eb0:	8e 01       	movw	r16, r28
    2eb2:	0b 58       	subi	r16, 0x8B	; 139
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	bc 01       	movw	r22, r24
    2eb8:	cd 01       	movw	r24, r26
    2eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ebe:	dc 01       	movw	r26, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	f8 01       	movw	r30, r16
    2ec4:	91 83       	std	Z+1, r25	; 0x01
    2ec6:	80 83       	st	Z, r24
    2ec8:	1f c0       	rjmp	.+62     	; 0x2f08 <main+0x546>
    2eca:	fe 01       	movw	r30, r28
    2ecc:	ed 58       	subi	r30, 0x8D	; 141
    2ece:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed0:	88 ec       	ldi	r24, 0xC8	; 200
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	91 83       	std	Z+1, r25	; 0x01
    2ed6:	80 83       	st	Z, r24
    2ed8:	fe 01       	movw	r30, r28
    2eda:	ed 58       	subi	r30, 0x8D	; 141
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	01 97       	sbiw	r24, 0x01	; 1
    2ee4:	f1 f7       	brne	.-4      	; 0x2ee2 <main+0x520>
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 58       	subi	r30, 0x8D	; 141
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	91 83       	std	Z+1, r25	; 0x01
    2eee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	de 01       	movw	r26, r28
    2ef2:	ab 58       	subi	r26, 0x8B	; 139
    2ef4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ef6:	fe 01       	movw	r30, r28
    2ef8:	eb 58       	subi	r30, 0x8B	; 139
    2efa:	ff 4f       	sbci	r31, 0xFF	; 255
    2efc:	80 81       	ld	r24, Z
    2efe:	91 81       	ldd	r25, Z+1	; 0x01
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	11 96       	adiw	r26, 0x01	; 1
    2f04:	9c 93       	st	X, r25
    2f06:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f08:	fe 01       	movw	r30, r28
    2f0a:	eb 58       	subi	r30, 0x8B	; 139
    2f0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0e:	80 81       	ld	r24, Z
    2f10:	91 81       	ldd	r25, Z+1	; 0x01
    2f12:	00 97       	sbiw	r24, 0x00	; 0
    2f14:	d1 f6       	brne	.-76     	; 0x2eca <main+0x508>
    2f16:	27 c0       	rjmp	.+78     	; 0x2f66 <main+0x5a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f18:	8e 01       	movw	r16, r28
    2f1a:	0b 58       	subi	r16, 0x8B	; 139
    2f1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e9 58       	subi	r30, 0x89	; 137
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	60 81       	ld	r22, Z
    2f26:	71 81       	ldd	r23, Z+1	; 0x01
    2f28:	82 81       	ldd	r24, Z+2	; 0x02
    2f2a:	93 81       	ldd	r25, Z+3	; 0x03
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	f8 01       	movw	r30, r16
    2f36:	91 83       	std	Z+1, r25	; 0x01
    2f38:	80 83       	st	Z, r24
    2f3a:	de 01       	movw	r26, r28
    2f3c:	af 58       	subi	r26, 0x8F	; 143
    2f3e:	bf 4f       	sbci	r27, 0xFF	; 255
    2f40:	fe 01       	movw	r30, r28
    2f42:	eb 58       	subi	r30, 0x8B	; 139
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	91 81       	ldd	r25, Z+1	; 0x01
    2f4a:	8d 93       	st	X+, r24
    2f4c:	9c 93       	st	X, r25
    2f4e:	fe 01       	movw	r30, r28
    2f50:	ef 58       	subi	r30, 0x8F	; 143
    2f52:	ff 4f       	sbci	r31, 0xFF	; 255
    2f54:	80 81       	ld	r24, Z
    2f56:	91 81       	ldd	r25, Z+1	; 0x01
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <main+0x596>
    2f5c:	fe 01       	movw	r30, r28
    2f5e:	ef 58       	subi	r30, 0x8F	; 143
    2f60:	ff 4f       	sbci	r31, 0xFF	; 255
    2f62:	91 83       	std	Z+1, r25	; 0x01
    2f64:	80 83       	st	Z, r24
				_delay_ms(700); /*Key pressed delay*/
				LCD_displayCharacter('*');
    2f66:	8a e2       	ldi	r24, 0x2A	; 42
    2f68:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>

			LCD_clearScreen();
			LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
			LCD_moveCursor(1, 0); /* Move the cursor to the second row */

			for (i = 0; i < PASS_SIZE; i++) {
    2f6c:	80 91 17 01 	lds	r24, 0x0117
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	80 93 17 01 	sts	0x0117, r24
    2f76:	80 91 17 01 	lds	r24, 0x0117
    2f7a:	85 30       	cpi	r24, 0x05	; 5
    2f7c:	08 f4       	brcc	.+2      	; 0x2f80 <main+0x5be>
    2f7e:	39 cf       	rjmp	.-398    	; 0x2df2 <main+0x430>
				UART_sendByte(KEYPAD_getPressedKey());
				_delay_ms(700); /*Key pressed delay*/
				LCD_displayCharacter('*');

			}
			while (KEYPAD_getPressedKey() != 13)
    2f80:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    2f84:	8d 30       	cpi	r24, 0x0D	; 13
    2f86:	e1 f7       	brne	.-8      	; 0x2f80 <main+0x5be>
				;

			//UART_sendByte(MC2_READY);
			val_check = UART_recieveByte();
    2f88:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    2f8c:	80 93 fe 00 	sts	0x00FE, r24

			if(counter<2){
    2f90:	80 91 ff 00 	lds	r24, 0x00FF
    2f94:	82 30       	cpi	r24, 0x02	; 2
    2f96:	08 f0       	brcs	.+2      	; 0x2f9a <main+0x5d8>
    2f98:	9c c2       	rjmp	.+1336   	; 0x34d2 <main+0xb10>
			if (val_check == 0) {
    2f9a:	80 91 fe 00 	lds	r24, 0x00FE
    2f9e:	88 23       	and	r24, r24
    2fa0:	09 f0       	breq	.+2      	; 0x2fa4 <main+0x5e2>
    2fa2:	d1 c0       	rjmp	.+418    	; 0x3146 <main+0x784>
				counter++;
    2fa4:	80 91 ff 00 	lds	r24, 0x00FF
    2fa8:	8f 5f       	subi	r24, 0xFF	; 255
    2faa:	80 93 ff 00 	sts	0x00FF, r24
				//pass_flag = 1;
				LCD_clearScreen();
    2fae:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
				LCD_moveCursor(0,0);
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>
				LCD_intgerToString((3-counter));
    2fba:	80 91 ff 00 	lds	r24, 0x00FF
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	83 e0       	ldi	r24, 0x03	; 3
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	82 1b       	sub	r24, r18
    2fc8:	93 0b       	sbc	r25, r19
    2fca:	0e 94 b4 14 	call	0x2968	; 0x2968 <LCD_intgerToString>
				LCD_displayStringRowColumn(0, 3, "trial left");
    2fce:	2a ea       	ldi	r18, 0xAA	; 170
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	80 e0       	ldi	r24, 0x00	; 0
    2fd4:	63 e0       	ldi	r22, 0x03	; 3
    2fd6:	a9 01       	movw	r20, r18
    2fd8:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e3 59       	subi	r30, 0x93	; 147
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	aa ef       	ldi	r26, 0xFA	; 250
    2fe8:	b4 e4       	ldi	r27, 0x44	; 68
    2fea:	80 83       	st	Z, r24
    2fec:	91 83       	std	Z+1, r25	; 0x01
    2fee:	a2 83       	std	Z+2, r26	; 0x02
    2ff0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	8e 01       	movw	r16, r28
    2ff4:	07 59       	subi	r16, 0x97	; 151
    2ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff8:	fe 01       	movw	r30, r28
    2ffa:	e3 59       	subi	r30, 0x93	; 147
    2ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ffe:	60 81       	ld	r22, Z
    3000:	71 81       	ldd	r23, Z+1	; 0x01
    3002:	82 81       	ldd	r24, Z+2	; 0x02
    3004:	93 81       	ldd	r25, Z+3	; 0x03
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	30 e0       	ldi	r19, 0x00	; 0
    300a:	4a ef       	ldi	r20, 0xFA	; 250
    300c:	54 e4       	ldi	r21, 0x44	; 68
    300e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	80 83       	st	Z, r24
    301a:	91 83       	std	Z+1, r25	; 0x01
    301c:	a2 83       	std	Z+2, r26	; 0x02
    301e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3020:	fe 01       	movw	r30, r28
    3022:	e7 59       	subi	r30, 0x97	; 151
    3024:	ff 4f       	sbci	r31, 0xFF	; 255
    3026:	60 81       	ld	r22, Z
    3028:	71 81       	ldd	r23, Z+1	; 0x01
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e8       	ldi	r20, 0x80	; 128
    3034:	5f e3       	ldi	r21, 0x3F	; 63
    3036:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    303a:	88 23       	and	r24, r24
    303c:	44 f4       	brge	.+16     	; 0x304e <main+0x68c>
		__ticks = 1;
    303e:	fe 01       	movw	r30, r28
    3040:	e9 59       	subi	r30, 0x99	; 153
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	91 83       	std	Z+1, r25	; 0x01
    304a:	80 83       	st	Z, r24
    304c:	64 c0       	rjmp	.+200    	; 0x3116 <main+0x754>
	else if (__tmp > 65535)
    304e:	fe 01       	movw	r30, r28
    3050:	e7 59       	subi	r30, 0x97	; 151
    3052:	ff 4f       	sbci	r31, 0xFF	; 255
    3054:	60 81       	ld	r22, Z
    3056:	71 81       	ldd	r23, Z+1	; 0x01
    3058:	82 81       	ldd	r24, Z+2	; 0x02
    305a:	93 81       	ldd	r25, Z+3	; 0x03
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	3f ef       	ldi	r19, 0xFF	; 255
    3060:	4f e7       	ldi	r20, 0x7F	; 127
    3062:	57 e4       	ldi	r21, 0x47	; 71
    3064:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3068:	18 16       	cp	r1, r24
    306a:	0c f0       	brlt	.+2      	; 0x306e <main+0x6ac>
    306c:	43 c0       	rjmp	.+134    	; 0x30f4 <main+0x732>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    306e:	fe 01       	movw	r30, r28
    3070:	e3 59       	subi	r30, 0x93	; 147
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e2       	ldi	r20, 0x20	; 32
    3082:	51 e4       	ldi	r21, 0x41	; 65
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	8e 01       	movw	r16, r28
    308e:	09 59       	subi	r16, 0x99	; 153
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	bc 01       	movw	r22, r24
    3094:	cd 01       	movw	r24, r26
    3096:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    309a:	dc 01       	movw	r26, r24
    309c:	cb 01       	movw	r24, r22
    309e:	f8 01       	movw	r30, r16
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
    30a4:	1f c0       	rjmp	.+62     	; 0x30e4 <main+0x722>
    30a6:	fe 01       	movw	r30, r28
    30a8:	eb 59       	subi	r30, 0x9B	; 155
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	88 ec       	ldi	r24, 0xC8	; 200
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	80 83       	st	Z, r24
    30b4:	fe 01       	movw	r30, r28
    30b6:	eb 59       	subi	r30, 0x9B	; 155
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	80 81       	ld	r24, Z
    30bc:	91 81       	ldd	r25, Z+1	; 0x01
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <main+0x6fc>
    30c2:	fe 01       	movw	r30, r28
    30c4:	eb 59       	subi	r30, 0x9B	; 155
    30c6:	ff 4f       	sbci	r31, 0xFF	; 255
    30c8:	91 83       	std	Z+1, r25	; 0x01
    30ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30cc:	de 01       	movw	r26, r28
    30ce:	a9 59       	subi	r26, 0x99	; 153
    30d0:	bf 4f       	sbci	r27, 0xFF	; 255
    30d2:	fe 01       	movw	r30, r28
    30d4:	e9 59       	subi	r30, 0x99	; 153
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	80 81       	ld	r24, Z
    30da:	91 81       	ldd	r25, Z+1	; 0x01
    30dc:	01 97       	sbiw	r24, 0x01	; 1
    30de:	11 96       	adiw	r26, 0x01	; 1
    30e0:	9c 93       	st	X, r25
    30e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e4:	fe 01       	movw	r30, r28
    30e6:	e9 59       	subi	r30, 0x99	; 153
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	80 81       	ld	r24, Z
    30ec:	91 81       	ldd	r25, Z+1	; 0x01
    30ee:	00 97       	sbiw	r24, 0x00	; 0
    30f0:	d1 f6       	brne	.-76     	; 0x30a6 <main+0x6e4>
    30f2:	53 ce       	rjmp	.-858    	; 0x2d9a <main+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f4:	8e 01       	movw	r16, r28
    30f6:	09 59       	subi	r16, 0x99	; 153
    30f8:	1f 4f       	sbci	r17, 0xFF	; 255
    30fa:	fe 01       	movw	r30, r28
    30fc:	e7 59       	subi	r30, 0x97	; 151
    30fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3100:	60 81       	ld	r22, Z
    3102:	71 81       	ldd	r23, Z+1	; 0x01
    3104:	82 81       	ldd	r24, Z+2	; 0x02
    3106:	93 81       	ldd	r25, Z+3	; 0x03
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	f8 01       	movw	r30, r16
    3112:	91 83       	std	Z+1, r25	; 0x01
    3114:	80 83       	st	Z, r24
    3116:	de 01       	movw	r26, r28
    3118:	ad 59       	subi	r26, 0x9D	; 157
    311a:	bf 4f       	sbci	r27, 0xFF	; 255
    311c:	fe 01       	movw	r30, r28
    311e:	e9 59       	subi	r30, 0x99	; 153
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	11 96       	adiw	r26, 0x01	; 1
    3128:	9c 93       	st	X, r25
    312a:	8e 93       	st	-X, r24
    312c:	fe 01       	movw	r30, r28
    312e:	ed 59       	subi	r30, 0x9D	; 157
    3130:	ff 4f       	sbci	r31, 0xFF	; 255
    3132:	80 81       	ld	r24, Z
    3134:	91 81       	ldd	r25, Z+1	; 0x01
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <main+0x774>
    313a:	fe 01       	movw	r30, r28
    313c:	ed 59       	subi	r30, 0x9D	; 157
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	91 83       	std	Z+1, r25	; 0x01
    3142:	80 83       	st	Z, r24
    3144:	2a ce       	rjmp	.-940    	; 0x2d9a <main+0x3d8>
				_delay_ms(2000);

			} else if (val_check == 1) {
    3146:	80 91 fe 00 	lds	r24, 0x00FE
    314a:	81 30       	cpi	r24, 0x01	; 1
    314c:	09 f0       	breq	.+2      	; 0x3150 <main+0x78e>
    314e:	25 ce       	rjmp	.-950    	; 0x2d9a <main+0x3d8>
				Timer1_init(&TIMER1_Configerations);
    3150:	81 ef       	ldi	r24, 0xF1	; 241
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <Timer1_init>
				SREG |= (1 << 7);
    3158:	af e5       	ldi	r26, 0x5F	; 95
    315a:	b0 e0       	ldi	r27, 0x00	; 0
    315c:	ef e5       	ldi	r30, 0x5F	; 95
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	80 68       	ori	r24, 0x80	; 128
    3164:	8c 93       	st	X, r24

				while(ticks == 0){}
    3166:	80 91 00 01 	lds	r24, 0x0100
    316a:	88 23       	and	r24, r24
    316c:	e1 f3       	breq	.-8      	; 0x3166 <main+0x7a4>
    316e:	fe 01       	movw	r30, r28
    3170:	e1 5a       	subi	r30, 0xA1	; 161
    3172:	ff 4f       	sbci	r31, 0xFF	; 255
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	a8 e4       	ldi	r26, 0x48	; 72
    317a:	b3 e4       	ldi	r27, 0x43	; 67
    317c:	80 83       	st	Z, r24
    317e:	91 83       	std	Z+1, r25	; 0x01
    3180:	a2 83       	std	Z+2, r26	; 0x02
    3182:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3184:	8e 01       	movw	r16, r28
    3186:	05 5a       	subi	r16, 0xA5	; 165
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	fe 01       	movw	r30, r28
    318c:	e1 5a       	subi	r30, 0xA1	; 161
    318e:	ff 4f       	sbci	r31, 0xFF	; 255
    3190:	60 81       	ld	r22, Z
    3192:	71 81       	ldd	r23, Z+1	; 0x01
    3194:	82 81       	ldd	r24, Z+2	; 0x02
    3196:	93 81       	ldd	r25, Z+3	; 0x03
    3198:	20 e0       	ldi	r18, 0x00	; 0
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	4a ef       	ldi	r20, 0xFA	; 250
    319e:	54 e4       	ldi	r21, 0x44	; 68
    31a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31a4:	dc 01       	movw	r26, r24
    31a6:	cb 01       	movw	r24, r22
    31a8:	f8 01       	movw	r30, r16
    31aa:	80 83       	st	Z, r24
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	a2 83       	std	Z+2, r26	; 0x02
    31b0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31b2:	fe 01       	movw	r30, r28
    31b4:	e5 5a       	subi	r30, 0xA5	; 165
    31b6:	ff 4f       	sbci	r31, 0xFF	; 255
    31b8:	60 81       	ld	r22, Z
    31ba:	71 81       	ldd	r23, Z+1	; 0x01
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	20 e0       	ldi	r18, 0x00	; 0
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e8       	ldi	r20, 0x80	; 128
    31c6:	5f e3       	ldi	r21, 0x3F	; 63
    31c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31cc:	88 23       	and	r24, r24
    31ce:	44 f4       	brge	.+16     	; 0x31e0 <main+0x81e>
		__ticks = 1;
    31d0:	fe 01       	movw	r30, r28
    31d2:	e7 5a       	subi	r30, 0xA7	; 167
    31d4:	ff 4f       	sbci	r31, 0xFF	; 255
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	91 83       	std	Z+1, r25	; 0x01
    31dc:	80 83       	st	Z, r24
    31de:	64 c0       	rjmp	.+200    	; 0x32a8 <main+0x8e6>
	else if (__tmp > 65535)
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 5a       	subi	r30, 0xA5	; 165
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	3f ef       	ldi	r19, 0xFF	; 255
    31f2:	4f e7       	ldi	r20, 0x7F	; 127
    31f4:	57 e4       	ldi	r21, 0x47	; 71
    31f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31fa:	18 16       	cp	r1, r24
    31fc:	0c f0       	brlt	.+2      	; 0x3200 <main+0x83e>
    31fe:	43 c0       	rjmp	.+134    	; 0x3286 <main+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3200:	fe 01       	movw	r30, r28
    3202:	e1 5a       	subi	r30, 0xA1	; 161
    3204:	ff 4f       	sbci	r31, 0xFF	; 255
    3206:	60 81       	ld	r22, Z
    3208:	71 81       	ldd	r23, Z+1	; 0x01
    320a:	82 81       	ldd	r24, Z+2	; 0x02
    320c:	93 81       	ldd	r25, Z+3	; 0x03
    320e:	20 e0       	ldi	r18, 0x00	; 0
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	40 e2       	ldi	r20, 0x20	; 32
    3214:	51 e4       	ldi	r21, 0x41	; 65
    3216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	8e 01       	movw	r16, r28
    3220:	07 5a       	subi	r16, 0xA7	; 167
    3222:	1f 4f       	sbci	r17, 0xFF	; 255
    3224:	bc 01       	movw	r22, r24
    3226:	cd 01       	movw	r24, r26
    3228:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    322c:	dc 01       	movw	r26, r24
    322e:	cb 01       	movw	r24, r22
    3230:	f8 01       	movw	r30, r16
    3232:	91 83       	std	Z+1, r25	; 0x01
    3234:	80 83       	st	Z, r24
    3236:	1f c0       	rjmp	.+62     	; 0x3276 <main+0x8b4>
    3238:	fe 01       	movw	r30, r28
    323a:	e9 5a       	subi	r30, 0xA9	; 169
    323c:	ff 4f       	sbci	r31, 0xFF	; 255
    323e:	88 ec       	ldi	r24, 0xC8	; 200
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	91 83       	std	Z+1, r25	; 0x01
    3244:	80 83       	st	Z, r24
    3246:	fe 01       	movw	r30, r28
    3248:	e9 5a       	subi	r30, 0xA9	; 169
    324a:	ff 4f       	sbci	r31, 0xFF	; 255
    324c:	80 81       	ld	r24, Z
    324e:	91 81       	ldd	r25, Z+1	; 0x01
    3250:	01 97       	sbiw	r24, 0x01	; 1
    3252:	f1 f7       	brne	.-4      	; 0x3250 <main+0x88e>
    3254:	fe 01       	movw	r30, r28
    3256:	e9 5a       	subi	r30, 0xA9	; 169
    3258:	ff 4f       	sbci	r31, 0xFF	; 255
    325a:	91 83       	std	Z+1, r25	; 0x01
    325c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325e:	de 01       	movw	r26, r28
    3260:	a7 5a       	subi	r26, 0xA7	; 167
    3262:	bf 4f       	sbci	r27, 0xFF	; 255
    3264:	fe 01       	movw	r30, r28
    3266:	e7 5a       	subi	r30, 0xA7	; 167
    3268:	ff 4f       	sbci	r31, 0xFF	; 255
    326a:	80 81       	ld	r24, Z
    326c:	91 81       	ldd	r25, Z+1	; 0x01
    326e:	01 97       	sbiw	r24, 0x01	; 1
    3270:	11 96       	adiw	r26, 0x01	; 1
    3272:	9c 93       	st	X, r25
    3274:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	fe 01       	movw	r30, r28
    3278:	e7 5a       	subi	r30, 0xA7	; 167
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	80 81       	ld	r24, Z
    327e:	91 81       	ldd	r25, Z+1	; 0x01
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	d1 f6       	brne	.-76     	; 0x3238 <main+0x876>
    3284:	20 c1       	rjmp	.+576    	; 0x34c6 <main+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	8e 01       	movw	r16, r28
    3288:	07 5a       	subi	r16, 0xA7	; 167
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	fe 01       	movw	r30, r28
    328e:	e5 5a       	subi	r30, 0xA5	; 165
    3290:	ff 4f       	sbci	r31, 0xFF	; 255
    3292:	60 81       	ld	r22, Z
    3294:	71 81       	ldd	r23, Z+1	; 0x01
    3296:	82 81       	ldd	r24, Z+2	; 0x02
    3298:	93 81       	ldd	r25, Z+3	; 0x03
    329a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	f8 01       	movw	r30, r16
    32a4:	91 83       	std	Z+1, r25	; 0x01
    32a6:	80 83       	st	Z, r24
    32a8:	de 01       	movw	r26, r28
    32aa:	ab 5a       	subi	r26, 0xAB	; 171
    32ac:	bf 4f       	sbci	r27, 0xFF	; 255
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	80 81       	ld	r24, Z
    32b6:	91 81       	ldd	r25, Z+1	; 0x01
    32b8:	11 96       	adiw	r26, 0x01	; 1
    32ba:	9c 93       	st	X, r25
    32bc:	8e 93       	st	-X, r24
    32be:	fe 01       	movw	r30, r28
    32c0:	eb 5a       	subi	r30, 0xAB	; 171
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 81       	ld	r24, Z
    32c6:	91 81       	ldd	r25, Z+1	; 0x01
    32c8:	01 97       	sbiw	r24, 0x01	; 1
    32ca:	f1 f7       	brne	.-4      	; 0x32c8 <main+0x906>
    32cc:	fe 01       	movw	r30, r28
    32ce:	eb 5a       	subi	r30, 0xAB	; 171
    32d0:	ff 4f       	sbci	r31, 0xFF	; 255
    32d2:	91 83       	std	Z+1, r25	; 0x01
    32d4:	80 83       	st	Z, r24
    32d6:	f7 c0       	rjmp	.+494    	; 0x34c6 <main+0xb04>
				_delay_ms(200);
				while(ticks != 0){
    32d8:	fe 01       	movw	r30, r28
    32da:	ef 5a       	subi	r30, 0xAF	; 175
    32dc:	ff 4f       	sbci	r31, 0xFF	; 255
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	90 e0       	ldi	r25, 0x00	; 0
    32e2:	a6 e1       	ldi	r26, 0x16	; 22
    32e4:	b4 e4       	ldi	r27, 0x44	; 68
    32e6:	80 83       	st	Z, r24
    32e8:	91 83       	std	Z+1, r25	; 0x01
    32ea:	a2 83       	std	Z+2, r26	; 0x02
    32ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ee:	8e 01       	movw	r16, r28
    32f0:	03 5b       	subi	r16, 0xB3	; 179
    32f2:	1f 4f       	sbci	r17, 0xFF	; 255
    32f4:	fe 01       	movw	r30, r28
    32f6:	ef 5a       	subi	r30, 0xAF	; 175
    32f8:	ff 4f       	sbci	r31, 0xFF	; 255
    32fa:	60 81       	ld	r22, Z
    32fc:	71 81       	ldd	r23, Z+1	; 0x01
    32fe:	82 81       	ldd	r24, Z+2	; 0x02
    3300:	93 81       	ldd	r25, Z+3	; 0x03
    3302:	20 e0       	ldi	r18, 0x00	; 0
    3304:	30 e0       	ldi	r19, 0x00	; 0
    3306:	4a ef       	ldi	r20, 0xFA	; 250
    3308:	54 e4       	ldi	r21, 0x44	; 68
    330a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    330e:	dc 01       	movw	r26, r24
    3310:	cb 01       	movw	r24, r22
    3312:	f8 01       	movw	r30, r16
    3314:	80 83       	st	Z, r24
    3316:	91 83       	std	Z+1, r25	; 0x01
    3318:	a2 83       	std	Z+2, r26	; 0x02
    331a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    331c:	fe 01       	movw	r30, r28
    331e:	e3 5b       	subi	r30, 0xB3	; 179
    3320:	ff 4f       	sbci	r31, 0xFF	; 255
    3322:	60 81       	ld	r22, Z
    3324:	71 81       	ldd	r23, Z+1	; 0x01
    3326:	82 81       	ldd	r24, Z+2	; 0x02
    3328:	93 81       	ldd	r25, Z+3	; 0x03
    332a:	20 e0       	ldi	r18, 0x00	; 0
    332c:	30 e0       	ldi	r19, 0x00	; 0
    332e:	40 e8       	ldi	r20, 0x80	; 128
    3330:	5f e3       	ldi	r21, 0x3F	; 63
    3332:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3336:	88 23       	and	r24, r24
    3338:	44 f4       	brge	.+16     	; 0x334a <main+0x988>
		__ticks = 1;
    333a:	fe 01       	movw	r30, r28
    333c:	e5 5b       	subi	r30, 0xB5	; 181
    333e:	ff 4f       	sbci	r31, 0xFF	; 255
    3340:	81 e0       	ldi	r24, 0x01	; 1
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	91 83       	std	Z+1, r25	; 0x01
    3346:	80 83       	st	Z, r24
    3348:	64 c0       	rjmp	.+200    	; 0x3412 <main+0xa50>
	else if (__tmp > 65535)
    334a:	fe 01       	movw	r30, r28
    334c:	e3 5b       	subi	r30, 0xB3	; 179
    334e:	ff 4f       	sbci	r31, 0xFF	; 255
    3350:	60 81       	ld	r22, Z
    3352:	71 81       	ldd	r23, Z+1	; 0x01
    3354:	82 81       	ldd	r24, Z+2	; 0x02
    3356:	93 81       	ldd	r25, Z+3	; 0x03
    3358:	20 e0       	ldi	r18, 0x00	; 0
    335a:	3f ef       	ldi	r19, 0xFF	; 255
    335c:	4f e7       	ldi	r20, 0x7F	; 127
    335e:	57 e4       	ldi	r21, 0x47	; 71
    3360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3364:	18 16       	cp	r1, r24
    3366:	0c f0       	brlt	.+2      	; 0x336a <main+0x9a8>
    3368:	43 c0       	rjmp	.+134    	; 0x33f0 <main+0xa2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336a:	fe 01       	movw	r30, r28
    336c:	ef 5a       	subi	r30, 0xAF	; 175
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	30 e0       	ldi	r19, 0x00	; 0
    337c:	40 e2       	ldi	r20, 0x20	; 32
    337e:	51 e4       	ldi	r21, 0x41	; 65
    3380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3384:	dc 01       	movw	r26, r24
    3386:	cb 01       	movw	r24, r22
    3388:	8e 01       	movw	r16, r28
    338a:	05 5b       	subi	r16, 0xB5	; 181
    338c:	1f 4f       	sbci	r17, 0xFF	; 255
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	f8 01       	movw	r30, r16
    339c:	91 83       	std	Z+1, r25	; 0x01
    339e:	80 83       	st	Z, r24
    33a0:	1f c0       	rjmp	.+62     	; 0x33e0 <main+0xa1e>
    33a2:	fe 01       	movw	r30, r28
    33a4:	e7 5b       	subi	r30, 0xB7	; 183
    33a6:	ff 4f       	sbci	r31, 0xFF	; 255
    33a8:	88 ec       	ldi	r24, 0xC8	; 200
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
    33b0:	fe 01       	movw	r30, r28
    33b2:	e7 5b       	subi	r30, 0xB7	; 183
    33b4:	ff 4f       	sbci	r31, 0xFF	; 255
    33b6:	80 81       	ld	r24, Z
    33b8:	91 81       	ldd	r25, Z+1	; 0x01
    33ba:	01 97       	sbiw	r24, 0x01	; 1
    33bc:	f1 f7       	brne	.-4      	; 0x33ba <main+0x9f8>
    33be:	fe 01       	movw	r30, r28
    33c0:	e7 5b       	subi	r30, 0xB7	; 183
    33c2:	ff 4f       	sbci	r31, 0xFF	; 255
    33c4:	91 83       	std	Z+1, r25	; 0x01
    33c6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c8:	de 01       	movw	r26, r28
    33ca:	a5 5b       	subi	r26, 0xB5	; 181
    33cc:	bf 4f       	sbci	r27, 0xFF	; 255
    33ce:	fe 01       	movw	r30, r28
    33d0:	e5 5b       	subi	r30, 0xB5	; 181
    33d2:	ff 4f       	sbci	r31, 0xFF	; 255
    33d4:	80 81       	ld	r24, Z
    33d6:	91 81       	ldd	r25, Z+1	; 0x01
    33d8:	01 97       	sbiw	r24, 0x01	; 1
    33da:	11 96       	adiw	r26, 0x01	; 1
    33dc:	9c 93       	st	X, r25
    33de:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e0:	fe 01       	movw	r30, r28
    33e2:	e5 5b       	subi	r30, 0xB5	; 181
    33e4:	ff 4f       	sbci	r31, 0xFF	; 255
    33e6:	80 81       	ld	r24, Z
    33e8:	91 81       	ldd	r25, Z+1	; 0x01
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	d1 f6       	brne	.-76     	; 0x33a2 <main+0x9e0>
    33ee:	28 c0       	rjmp	.+80     	; 0x3440 <main+0xa7e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f0:	8e 01       	movw	r16, r28
    33f2:	05 5b       	subi	r16, 0xB5	; 181
    33f4:	1f 4f       	sbci	r17, 0xFF	; 255
    33f6:	fe 01       	movw	r30, r28
    33f8:	e3 5b       	subi	r30, 0xB3	; 179
    33fa:	ff 4f       	sbci	r31, 0xFF	; 255
    33fc:	60 81       	ld	r22, Z
    33fe:	71 81       	ldd	r23, Z+1	; 0x01
    3400:	82 81       	ldd	r24, Z+2	; 0x02
    3402:	93 81       	ldd	r25, Z+3	; 0x03
    3404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3408:	dc 01       	movw	r26, r24
    340a:	cb 01       	movw	r24, r22
    340c:	f8 01       	movw	r30, r16
    340e:	91 83       	std	Z+1, r25	; 0x01
    3410:	80 83       	st	Z, r24
    3412:	de 01       	movw	r26, r28
    3414:	a9 5b       	subi	r26, 0xB9	; 185
    3416:	bf 4f       	sbci	r27, 0xFF	; 255
    3418:	fe 01       	movw	r30, r28
    341a:	e5 5b       	subi	r30, 0xB5	; 181
    341c:	ff 4f       	sbci	r31, 0xFF	; 255
    341e:	80 81       	ld	r24, Z
    3420:	91 81       	ldd	r25, Z+1	; 0x01
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	9c 93       	st	X, r25
    3426:	8e 93       	st	-X, r24
    3428:	fe 01       	movw	r30, r28
    342a:	e9 5b       	subi	r30, 0xB9	; 185
    342c:	ff 4f       	sbci	r31, 0xFF	; 255
    342e:	80 81       	ld	r24, Z
    3430:	91 81       	ldd	r25, Z+1	; 0x01
    3432:	01 97       	sbiw	r24, 0x01	; 1
    3434:	f1 f7       	brne	.-4      	; 0x3432 <main+0xa70>
    3436:	fe 01       	movw	r30, r28
    3438:	e9 5b       	subi	r30, 0xB9	; 185
    343a:	ff 4f       	sbci	r31, 0xFF	; 255
    343c:	91 83       	std	Z+1, r25	; 0x01
    343e:	80 83       	st	Z, r24
					_delay_ms(600);
					if (ticks == 2) {
    3440:	80 91 00 01 	lds	r24, 0x0100
    3444:	82 30       	cpi	r24, 0x02	; 2
    3446:	69 f4       	brne	.+26     	; 0x3462 <main+0xaa0>

						LCD_clearScreen();
    3448:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Door is Unlocking");
    344c:	25 eb       	ldi	r18, 0xB5	; 181
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	80 e0       	ldi	r24, 0x00	; 0
    3452:	60 e0       	ldi	r22, 0x00	; 0
    3454:	a9 01       	movw	r20, r18
    3456:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>

						UART_sendByte(1);
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    3460:	32 c0       	rjmp	.+100    	; 0x34c6 <main+0xb04>
					} else if (ticks == 17) {
    3462:	80 91 00 01 	lds	r24, 0x0100
    3466:	81 31       	cpi	r24, 0x11	; 17
    3468:	69 f4       	brne	.+26     	; 0x3484 <main+0xac2>
						LCD_clearScreen();
    346a:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "hold");
    346e:	27 ec       	ldi	r18, 0xC7	; 199
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	60 e0       	ldi	r22, 0x00	; 0
    3476:	a9 01       	movw	r20, r18
    3478:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>

						UART_sendByte(2);
    347c:	82 e0       	ldi	r24, 0x02	; 2
    347e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    3482:	21 c0       	rjmp	.+66     	; 0x34c6 <main+0xb04>
					} else if (ticks == 20) {
    3484:	80 91 00 01 	lds	r24, 0x0100
    3488:	84 31       	cpi	r24, 0x14	; 20
    348a:	69 f4       	brne	.+26     	; 0x34a6 <main+0xae4>
						LCD_clearScreen();
    348c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Door is locking");
    3490:	2c ec       	ldi	r18, 0xCC	; 204
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	a9 01       	movw	r20, r18
    349a:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
						//_delay_ms(500);
						UART_sendByte(3);
    349e:	83 e0       	ldi	r24, 0x03	; 3
    34a0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    34a4:	10 c0       	rjmp	.+32     	; 0x34c6 <main+0xb04>
					} else if (ticks == 35) {
    34a6:	80 91 00 01 	lds	r24, 0x0100
    34aa:	83 32       	cpi	r24, 0x23	; 35
    34ac:	61 f4       	brne	.+24     	; 0x34c6 <main+0xb04>

						SREG &= ~(1 << 7);
    34ae:	af e5       	ldi	r26, 0x5F	; 95
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ef e5       	ldi	r30, 0x5F	; 95
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	8f 77       	andi	r24, 0x7F	; 127
    34ba:	8c 93       	st	X, r24
						ticks = 0;
    34bc:	10 92 00 01 	sts	0x0100, r1
						UART_sendByte(4);
    34c0:	84 e0       	ldi	r24, 0x04	; 4
    34c2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
				Timer1_init(&TIMER1_Configerations);
				SREG |= (1 << 7);

				while(ticks == 0){}
				_delay_ms(200);
				while(ticks != 0){
    34c6:	80 91 00 01 	lds	r24, 0x0100
    34ca:	88 23       	and	r24, r24
    34cc:	09 f0       	breq	.+2      	; 0x34d0 <main+0xb0e>
    34ce:	04 cf       	rjmp	.-504    	; 0x32d8 <main+0x916>
    34d0:	64 cc       	rjmp	.-1848   	; 0x2d9a <main+0x3d8>
				}

			}
			//pass_flag = 0;
			}
			else if (counter>=2)
    34d2:	80 91 ff 00 	lds	r24, 0x00FF
    34d6:	82 30       	cpi	r24, 0x02	; 2
    34d8:	08 f4       	brcc	.+2      	; 0x34dc <main+0xb1a>
    34da:	5f cc       	rjmp	.-1858   	; 0x2d9a <main+0x3d8>
			{

				UART_sendByte(5);
    34dc:	85 e0       	ldi	r24, 0x05	; 5
    34de:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
				LCD_displayStringRowColumn(0, 0,"ERROR");
    34e2:	2c ed       	ldi	r18, 0xDC	; 220
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	60 e0       	ldi	r22, 0x00	; 0
    34ea:	a9 01       	movw	r20, r18
    34ec:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
    34f0:	fe 01       	movw	r30, r28
    34f2:	ed 5b       	subi	r30, 0xBD	; 189
    34f4:	ff 4f       	sbci	r31, 0xFF	; 255
    34f6:	80 e0       	ldi	r24, 0x00	; 0
    34f8:	90 e6       	ldi	r25, 0x60	; 96
    34fa:	aa e6       	ldi	r26, 0x6A	; 106
    34fc:	b7 e4       	ldi	r27, 0x47	; 71
    34fe:	80 83       	st	Z, r24
    3500:	91 83       	std	Z+1, r25	; 0x01
    3502:	a2 83       	std	Z+2, r26	; 0x02
    3504:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3506:	8e 01       	movw	r16, r28
    3508:	01 5c       	subi	r16, 0xC1	; 193
    350a:	1f 4f       	sbci	r17, 0xFF	; 255
    350c:	fe 01       	movw	r30, r28
    350e:	ed 5b       	subi	r30, 0xBD	; 189
    3510:	ff 4f       	sbci	r31, 0xFF	; 255
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	82 81       	ldd	r24, Z+2	; 0x02
    3518:	93 81       	ldd	r25, Z+3	; 0x03
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	30 e0       	ldi	r19, 0x00	; 0
    351e:	4a ef       	ldi	r20, 0xFA	; 250
    3520:	54 e4       	ldi	r21, 0x44	; 68
    3522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3526:	dc 01       	movw	r26, r24
    3528:	cb 01       	movw	r24, r22
    352a:	f8 01       	movw	r30, r16
    352c:	80 83       	st	Z, r24
    352e:	91 83       	std	Z+1, r25	; 0x01
    3530:	a2 83       	std	Z+2, r26	; 0x02
    3532:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3534:	fe 01       	movw	r30, r28
    3536:	ff 96       	adiw	r30, 0x3f	; 63
    3538:	60 81       	ld	r22, Z
    353a:	71 81       	ldd	r23, Z+1	; 0x01
    353c:	82 81       	ldd	r24, Z+2	; 0x02
    353e:	93 81       	ldd	r25, Z+3	; 0x03
    3540:	20 e0       	ldi	r18, 0x00	; 0
    3542:	30 e0       	ldi	r19, 0x00	; 0
    3544:	40 e8       	ldi	r20, 0x80	; 128
    3546:	5f e3       	ldi	r21, 0x3F	; 63
    3548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    354c:	88 23       	and	r24, r24
    354e:	2c f4       	brge	.+10     	; 0x355a <main+0xb98>
		__ticks = 1;
    3550:	81 e0       	ldi	r24, 0x01	; 1
    3552:	90 e0       	ldi	r25, 0x00	; 0
    3554:	9e af       	std	Y+62, r25	; 0x3e
    3556:	8d af       	std	Y+61, r24	; 0x3d
    3558:	46 c0       	rjmp	.+140    	; 0x35e6 <main+0xc24>
	else if (__tmp > 65535)
    355a:	fe 01       	movw	r30, r28
    355c:	ff 96       	adiw	r30, 0x3f	; 63
    355e:	60 81       	ld	r22, Z
    3560:	71 81       	ldd	r23, Z+1	; 0x01
    3562:	82 81       	ldd	r24, Z+2	; 0x02
    3564:	93 81       	ldd	r25, Z+3	; 0x03
    3566:	20 e0       	ldi	r18, 0x00	; 0
    3568:	3f ef       	ldi	r19, 0xFF	; 255
    356a:	4f e7       	ldi	r20, 0x7F	; 127
    356c:	57 e4       	ldi	r21, 0x47	; 71
    356e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3572:	18 16       	cp	r1, r24
    3574:	64 f5       	brge	.+88     	; 0x35ce <main+0xc0c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3576:	fe 01       	movw	r30, r28
    3578:	ed 5b       	subi	r30, 0xBD	; 189
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	60 81       	ld	r22, Z
    357e:	71 81       	ldd	r23, Z+1	; 0x01
    3580:	82 81       	ldd	r24, Z+2	; 0x02
    3582:	93 81       	ldd	r25, Z+3	; 0x03
    3584:	20 e0       	ldi	r18, 0x00	; 0
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	40 e2       	ldi	r20, 0x20	; 32
    358a:	51 e4       	ldi	r21, 0x41	; 65
    358c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3590:	dc 01       	movw	r26, r24
    3592:	cb 01       	movw	r24, r22
    3594:	bc 01       	movw	r22, r24
    3596:	cd 01       	movw	r24, r26
    3598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    359c:	dc 01       	movw	r26, r24
    359e:	cb 01       	movw	r24, r22
    35a0:	9e af       	std	Y+62, r25	; 0x3e
    35a2:	8d af       	std	Y+61, r24	; 0x3d
    35a4:	0f c0       	rjmp	.+30     	; 0x35c4 <main+0xc02>
    35a6:	88 ec       	ldi	r24, 0xC8	; 200
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	9c af       	std	Y+60, r25	; 0x3c
    35ac:	8b af       	std	Y+59, r24	; 0x3b
    35ae:	8b ad       	ldd	r24, Y+59	; 0x3b
    35b0:	9c ad       	ldd	r25, Y+60	; 0x3c
    35b2:	01 97       	sbiw	r24, 0x01	; 1
    35b4:	f1 f7       	brne	.-4      	; 0x35b2 <main+0xbf0>
    35b6:	9c af       	std	Y+60, r25	; 0x3c
    35b8:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    35bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    35be:	01 97       	sbiw	r24, 0x01	; 1
    35c0:	9e af       	std	Y+62, r25	; 0x3e
    35c2:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35c4:	8d ad       	ldd	r24, Y+61	; 0x3d
    35c6:	9e ad       	ldd	r25, Y+62	; 0x3e
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	69 f7       	brne	.-38     	; 0x35a6 <main+0xbe4>
    35cc:	e6 cb       	rjmp	.-2100   	; 0x2d9a <main+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ce:	fe 01       	movw	r30, r28
    35d0:	ff 96       	adiw	r30, 0x3f	; 63
    35d2:	60 81       	ld	r22, Z
    35d4:	71 81       	ldd	r23, Z+1	; 0x01
    35d6:	82 81       	ldd	r24, Z+2	; 0x02
    35d8:	93 81       	ldd	r25, Z+3	; 0x03
    35da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35de:	dc 01       	movw	r26, r24
    35e0:	cb 01       	movw	r24, r22
    35e2:	9e af       	std	Y+62, r25	; 0x3e
    35e4:	8d af       	std	Y+61, r24	; 0x3d
    35e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    35e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    35ea:	9a af       	std	Y+58, r25	; 0x3a
    35ec:	89 af       	std	Y+57, r24	; 0x39
    35ee:	89 ad       	ldd	r24, Y+57	; 0x39
    35f0:	9a ad       	ldd	r25, Y+58	; 0x3a
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	f1 f7       	brne	.-4      	; 0x35f2 <main+0xc30>
    35f6:	9a af       	std	Y+58, r25	; 0x3a
    35f8:	89 af       	std	Y+57, r24	; 0x39
    35fa:	cf cb       	rjmp	.-2146   	; 0x2d9a <main+0x3d8>
				_delay_ms(60000);
			}
		}

		else if (KEYPAD_getPressedKey() == '-') {
    35fc:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    3600:	8d 32       	cpi	r24, 0x2D	; 45
    3602:	09 f0       	breq	.+2      	; 0x3606 <main+0xc44>
    3604:	ca cb       	rjmp	.-2156   	; 0x2d9a <main+0x3d8>

			UART_sendByte(MC2_READY);
    3606:	80 e1       	ldi	r24, 0x10	; 16
    3608:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
						UART_sendByte(KEYPAD_getPressedKey());
    360c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    3610:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>

						LCD_clearScreen();
    3614:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
						LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
    3618:	20 e6       	ldi	r18, 0x60	; 96
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	60 e0       	ldi	r22, 0x00	; 0
    3620:	a9 01       	movw	r20, r18
    3622:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
						LCD_moveCursor(1, 0); /* Move the cursor to the second row */
    3626:	81 e0       	ldi	r24, 0x01	; 1
    3628:	60 e0       	ldi	r22, 0x00	; 0
    362a:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>

						for (i = 0; i < PASS_SIZE; i++) {
    362e:	10 92 17 01 	sts	0x0117, r1
    3632:	81 c0       	rjmp	.+258    	; 0x3736 <main+0xd74>
							UART_sendByte(MC2_READY);
    3634:	80 e1       	ldi	r24, 0x10	; 16
    3636:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
							UART_sendByte(KEYPAD_getPressedKey());
    363a:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    363e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	aa e7       	ldi	r26, 0x7A	; 122
    3648:	b4 e4       	ldi	r27, 0x44	; 68
    364a:	8d ab       	std	Y+53, r24	; 0x35
    364c:	9e ab       	std	Y+54, r25	; 0x36
    364e:	af ab       	std	Y+55, r26	; 0x37
    3650:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3652:	6d a9       	ldd	r22, Y+53	; 0x35
    3654:	7e a9       	ldd	r23, Y+54	; 0x36
    3656:	8f a9       	ldd	r24, Y+55	; 0x37
    3658:	98 ad       	ldd	r25, Y+56	; 0x38
    365a:	20 e0       	ldi	r18, 0x00	; 0
    365c:	30 e0       	ldi	r19, 0x00	; 0
    365e:	4a ef       	ldi	r20, 0xFA	; 250
    3660:	54 e4       	ldi	r21, 0x44	; 68
    3662:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3666:	dc 01       	movw	r26, r24
    3668:	cb 01       	movw	r24, r22
    366a:	89 ab       	std	Y+49, r24	; 0x31
    366c:	9a ab       	std	Y+50, r25	; 0x32
    366e:	ab ab       	std	Y+51, r26	; 0x33
    3670:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3672:	69 a9       	ldd	r22, Y+49	; 0x31
    3674:	7a a9       	ldd	r23, Y+50	; 0x32
    3676:	8b a9       	ldd	r24, Y+51	; 0x33
    3678:	9c a9       	ldd	r25, Y+52	; 0x34
    367a:	20 e0       	ldi	r18, 0x00	; 0
    367c:	30 e0       	ldi	r19, 0x00	; 0
    367e:	40 e8       	ldi	r20, 0x80	; 128
    3680:	5f e3       	ldi	r21, 0x3F	; 63
    3682:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3686:	88 23       	and	r24, r24
    3688:	2c f4       	brge	.+10     	; 0x3694 <main+0xcd2>
		__ticks = 1;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	98 ab       	std	Y+48, r25	; 0x30
    3690:	8f a7       	std	Y+47, r24	; 0x2f
    3692:	3f c0       	rjmp	.+126    	; 0x3712 <main+0xd50>
	else if (__tmp > 65535)
    3694:	69 a9       	ldd	r22, Y+49	; 0x31
    3696:	7a a9       	ldd	r23, Y+50	; 0x32
    3698:	8b a9       	ldd	r24, Y+51	; 0x33
    369a:	9c a9       	ldd	r25, Y+52	; 0x34
    369c:	20 e0       	ldi	r18, 0x00	; 0
    369e:	3f ef       	ldi	r19, 0xFF	; 255
    36a0:	4f e7       	ldi	r20, 0x7F	; 127
    36a2:	57 e4       	ldi	r21, 0x47	; 71
    36a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36a8:	18 16       	cp	r1, r24
    36aa:	4c f5       	brge	.+82     	; 0x36fe <main+0xd3c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    36ac:	6d a9       	ldd	r22, Y+53	; 0x35
    36ae:	7e a9       	ldd	r23, Y+54	; 0x36
    36b0:	8f a9       	ldd	r24, Y+55	; 0x37
    36b2:	98 ad       	ldd	r25, Y+56	; 0x38
    36b4:	20 e0       	ldi	r18, 0x00	; 0
    36b6:	30 e0       	ldi	r19, 0x00	; 0
    36b8:	40 e2       	ldi	r20, 0x20	; 32
    36ba:	51 e4       	ldi	r21, 0x41	; 65
    36bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c0:	dc 01       	movw	r26, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	bc 01       	movw	r22, r24
    36c6:	cd 01       	movw	r24, r26
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	98 ab       	std	Y+48, r25	; 0x30
    36d2:	8f a7       	std	Y+47, r24	; 0x2f
    36d4:	0f c0       	rjmp	.+30     	; 0x36f4 <main+0xd32>
    36d6:	88 ec       	ldi	r24, 0xC8	; 200
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	9e a7       	std	Y+46, r25	; 0x2e
    36dc:	8d a7       	std	Y+45, r24	; 0x2d
    36de:	8d a5       	ldd	r24, Y+45	; 0x2d
    36e0:	9e a5       	ldd	r25, Y+46	; 0x2e
    36e2:	01 97       	sbiw	r24, 0x01	; 1
    36e4:	f1 f7       	brne	.-4      	; 0x36e2 <main+0xd20>
    36e6:	9e a7       	std	Y+46, r25	; 0x2e
    36e8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    36ec:	98 a9       	ldd	r25, Y+48	; 0x30
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	98 ab       	std	Y+48, r25	; 0x30
    36f2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    36f6:	98 a9       	ldd	r25, Y+48	; 0x30
    36f8:	00 97       	sbiw	r24, 0x00	; 0
    36fa:	69 f7       	brne	.-38     	; 0x36d6 <main+0xd14>
    36fc:	14 c0       	rjmp	.+40     	; 0x3726 <main+0xd64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36fe:	69 a9       	ldd	r22, Y+49	; 0x31
    3700:	7a a9       	ldd	r23, Y+50	; 0x32
    3702:	8b a9       	ldd	r24, Y+51	; 0x33
    3704:	9c a9       	ldd	r25, Y+52	; 0x34
    3706:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    370a:	dc 01       	movw	r26, r24
    370c:	cb 01       	movw	r24, r22
    370e:	98 ab       	std	Y+48, r25	; 0x30
    3710:	8f a7       	std	Y+47, r24	; 0x2f
    3712:	8f a5       	ldd	r24, Y+47	; 0x2f
    3714:	98 a9       	ldd	r25, Y+48	; 0x30
    3716:	9c a7       	std	Y+44, r25	; 0x2c
    3718:	8b a7       	std	Y+43, r24	; 0x2b
    371a:	8b a5       	ldd	r24, Y+43	; 0x2b
    371c:	9c a5       	ldd	r25, Y+44	; 0x2c
    371e:	01 97       	sbiw	r24, 0x01	; 1
    3720:	f1 f7       	brne	.-4      	; 0x371e <main+0xd5c>
    3722:	9c a7       	std	Y+44, r25	; 0x2c
    3724:	8b a7       	std	Y+43, r24	; 0x2b
							_delay_ms(1000); /*Key pressed delay*/
							LCD_displayCharacter('*');
    3726:	8a e2       	ldi	r24, 0x2A	; 42
    3728:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>

						LCD_clearScreen();
						LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
						LCD_moveCursor(1, 0); /* Move the cursor to the second row */

						for (i = 0; i < PASS_SIZE; i++) {
    372c:	80 91 17 01 	lds	r24, 0x0117
    3730:	8f 5f       	subi	r24, 0xFF	; 255
    3732:	80 93 17 01 	sts	0x0117, r24
    3736:	80 91 17 01 	lds	r24, 0x0117
    373a:	85 30       	cpi	r24, 0x05	; 5
    373c:	08 f4       	brcc	.+2      	; 0x3740 <main+0xd7e>
    373e:	7a cf       	rjmp	.-268    	; 0x3634 <main+0xc72>
							UART_sendByte(KEYPAD_getPressedKey());
							_delay_ms(1000); /*Key pressed delay*/
							LCD_displayCharacter('*');

						}
						while (KEYPAD_getPressedKey() != 13)
    3740:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    3744:	8d 30       	cpi	r24, 0x0D	; 13
    3746:	e1 f7       	brne	.-8      	; 0x3740 <main+0xd7e>
							;

						UART_sendByte(MC2_READY);
    3748:	80 e1       	ldi	r24, 0x10	; 16
    374a:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
						val_check = UART_recieveByte();
    374e:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    3752:	80 93 fe 00 	sts	0x00FE, r24


			if (val_check == 1) {pass_flag = 1;
    3756:	80 91 fe 00 	lds	r24, 0x00FE
    375a:	81 30       	cpi	r24, 0x01	; 1
    375c:	09 f0       	breq	.+2      	; 0x3760 <main+0xd9e>
    375e:	54 c1       	rjmp	.+680    	; 0x3a08 <main+0x1046>
    3760:	81 e0       	ldi	r24, 0x01	; 1
    3762:	80 93 f0 00 	sts	0x00F0, r24
    3766:	48 c1       	rjmp	.+656    	; 0x39f8 <main+0x1036>
				while (pass_flag != 0) {
					LCD_clearScreen();
    3768:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
    376c:	20 e6       	ldi	r18, 0x60	; 96
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	80 e0       	ldi	r24, 0x00	; 0
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	a9 01       	movw	r20, r18
    3776:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
					LCD_moveCursor(1, 0); /* Move the cursor to the second row */
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	60 e0       	ldi	r22, 0x00	; 0
    377e:	0e 94 59 14 	call	0x28b2	; 0x28b2 <LCD_moveCursor>

					for (i = 0; i < PASS_SIZE; i++) {
    3782:	10 92 17 01 	sts	0x0117, r1
    3786:	7e c0       	rjmp	.+252    	; 0x3884 <main+0xec2>

						UART_sendByte(KEYPAD_getPressedKey());
    3788:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    378c:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	aa e7       	ldi	r26, 0x7A	; 122
    3796:	b4 e4       	ldi	r27, 0x44	; 68
    3798:	8f a3       	std	Y+39, r24	; 0x27
    379a:	98 a7       	std	Y+40, r25	; 0x28
    379c:	a9 a7       	std	Y+41, r26	; 0x29
    379e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a0:	6f a1       	ldd	r22, Y+39	; 0x27
    37a2:	78 a5       	ldd	r23, Y+40	; 0x28
    37a4:	89 a5       	ldd	r24, Y+41	; 0x29
    37a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a ef       	ldi	r20, 0xFA	; 250
    37ae:	54 e4       	ldi	r21, 0x44	; 68
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	8b a3       	std	Y+35, r24	; 0x23
    37ba:	9c a3       	std	Y+36, r25	; 0x24
    37bc:	ad a3       	std	Y+37, r26	; 0x25
    37be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37c0:	6b a1       	ldd	r22, Y+35	; 0x23
    37c2:	7c a1       	ldd	r23, Y+36	; 0x24
    37c4:	8d a1       	ldd	r24, Y+37	; 0x25
    37c6:	9e a1       	ldd	r25, Y+38	; 0x26
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	2c f4       	brge	.+10     	; 0x37e2 <main+0xe20>
		__ticks = 1;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9a a3       	std	Y+34, r25	; 0x22
    37de:	89 a3       	std	Y+33, r24	; 0x21
    37e0:	3f c0       	rjmp	.+126    	; 0x3860 <main+0xe9e>
	else if (__tmp > 65535)
    37e2:	6b a1       	ldd	r22, Y+35	; 0x23
    37e4:	7c a1       	ldd	r23, Y+36	; 0x24
    37e6:	8d a1       	ldd	r24, Y+37	; 0x25
    37e8:	9e a1       	ldd	r25, Y+38	; 0x26
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	3f ef       	ldi	r19, 0xFF	; 255
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	57 e4       	ldi	r21, 0x47	; 71
    37f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    37f6:	18 16       	cp	r1, r24
    37f8:	4c f5       	brge	.+82     	; 0x384c <main+0xe8a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fa:	6f a1       	ldd	r22, Y+39	; 0x27
    37fc:	78 a5       	ldd	r23, Y+40	; 0x28
    37fe:	89 a5       	ldd	r24, Y+41	; 0x29
    3800:	9a a5       	ldd	r25, Y+42	; 0x2a
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e2       	ldi	r20, 0x20	; 32
    3808:	51 e4       	ldi	r21, 0x41	; 65
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	9a a3       	std	Y+34, r25	; 0x22
    3820:	89 a3       	std	Y+33, r24	; 0x21
    3822:	0f c0       	rjmp	.+30     	; 0x3842 <main+0xe80>
    3824:	88 ec       	ldi	r24, 0xC8	; 200
    3826:	90 e0       	ldi	r25, 0x00	; 0
    3828:	98 a3       	std	Y+32, r25	; 0x20
    382a:	8f 8f       	std	Y+31, r24	; 0x1f
    382c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    382e:	98 a1       	ldd	r25, Y+32	; 0x20
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <main+0xe6e>
    3834:	98 a3       	std	Y+32, r25	; 0x20
    3836:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3838:	89 a1       	ldd	r24, Y+33	; 0x21
    383a:	9a a1       	ldd	r25, Y+34	; 0x22
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	9a a3       	std	Y+34, r25	; 0x22
    3840:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3842:	89 a1       	ldd	r24, Y+33	; 0x21
    3844:	9a a1       	ldd	r25, Y+34	; 0x22
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	69 f7       	brne	.-38     	; 0x3824 <main+0xe62>
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <main+0xeb2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384c:	6b a1       	ldd	r22, Y+35	; 0x23
    384e:	7c a1       	ldd	r23, Y+36	; 0x24
    3850:	8d a1       	ldd	r24, Y+37	; 0x25
    3852:	9e a1       	ldd	r25, Y+38	; 0x26
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9a a3       	std	Y+34, r25	; 0x22
    385e:	89 a3       	std	Y+33, r24	; 0x21
    3860:	89 a1       	ldd	r24, Y+33	; 0x21
    3862:	9a a1       	ldd	r25, Y+34	; 0x22
    3864:	9e 8f       	std	Y+30, r25	; 0x1e
    3866:	8d 8f       	std	Y+29, r24	; 0x1d
    3868:	8d 8d       	ldd	r24, Y+29	; 0x1d
    386a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <main+0xeaa>
    3870:	9e 8f       	std	Y+30, r25	; 0x1e
    3872:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(1000); /*Key pressed delay*/
						LCD_displayCharacter('*');
    3874:	8a e2       	ldi	r24, 0x2A	; 42
    3876:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>
				while (pass_flag != 0) {
					LCD_clearScreen();
					LCD_displayStringRowColumn(0, 0, "Pls Enter Pass:");
					LCD_moveCursor(1, 0); /* Move the cursor to the second row */

					for (i = 0; i < PASS_SIZE; i++) {
    387a:	80 91 17 01 	lds	r24, 0x0117
    387e:	8f 5f       	subi	r24, 0xFF	; 255
    3880:	80 93 17 01 	sts	0x0117, r24
    3884:	80 91 17 01 	lds	r24, 0x0117
    3888:	85 30       	cpi	r24, 0x05	; 5
    388a:	08 f4       	brcc	.+2      	; 0x388e <main+0xecc>
    388c:	7d cf       	rjmp	.-262    	; 0x3788 <main+0xdc6>
						UART_sendByte(KEYPAD_getPressedKey());
						_delay_ms(1000); /*Key pressed delay*/
						LCD_displayCharacter('*');

					}
					while (KEYPAD_getPressedKey() != 13)
    388e:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    3892:	8d 30       	cpi	r24, 0x0D	; 13
    3894:	e1 f7       	brne	.-8      	; 0x388e <main+0xecc>
						;

					LCD_clearScreen();
    3896:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
					LCD_displayStringRowColumn(0, 0, "Pls Re-Enter the");
    389a:	20 e7       	ldi	r18, 0x70	; 112
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	80 e0       	ldi	r24, 0x00	; 0
    38a0:	60 e0       	ldi	r22, 0x00	; 0
    38a2:	a9 01       	movw	r20, r18
    38a4:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1, 0, "same Pass:");
    38a8:	21 e8       	ldi	r18, 0x81	; 129
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	81 e0       	ldi	r24, 0x01	; 1
    38ae:	60 e0       	ldi	r22, 0x00	; 0
    38b0:	a9 01       	movw	r20, r18
    38b2:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>

					for (i = 0; i < PASS_SIZE; i++) {
    38b6:	10 92 17 01 	sts	0x0117, r1
    38ba:	81 c0       	rjmp	.+258    	; 0x39be <main+0xffc>
						UART_sendByte(MC2_READY);
    38bc:	80 e1       	ldi	r24, 0x10	; 16
    38be:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
						UART_sendByte(KEYPAD_getPressedKey());
    38c2:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    38c6:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
    38ca:	80 e0       	ldi	r24, 0x00	; 0
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	aa e7       	ldi	r26, 0x7A	; 122
    38d0:	b4 e4       	ldi	r27, 0x44	; 68
    38d2:	89 8f       	std	Y+25, r24	; 0x19
    38d4:	9a 8f       	std	Y+26, r25	; 0x1a
    38d6:	ab 8f       	std	Y+27, r26	; 0x1b
    38d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38da:	69 8d       	ldd	r22, Y+25	; 0x19
    38dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    38de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    38e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	4a ef       	ldi	r20, 0xFA	; 250
    38e8:	54 e4       	ldi	r21, 0x44	; 68
    38ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38ee:	dc 01       	movw	r26, r24
    38f0:	cb 01       	movw	r24, r22
    38f2:	8d 8b       	std	Y+21, r24	; 0x15
    38f4:	9e 8b       	std	Y+22, r25	; 0x16
    38f6:	af 8b       	std	Y+23, r26	; 0x17
    38f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    38fa:	6d 89       	ldd	r22, Y+21	; 0x15
    38fc:	7e 89       	ldd	r23, Y+22	; 0x16
    38fe:	8f 89       	ldd	r24, Y+23	; 0x17
    3900:	98 8d       	ldd	r25, Y+24	; 0x18
    3902:	20 e0       	ldi	r18, 0x00	; 0
    3904:	30 e0       	ldi	r19, 0x00	; 0
    3906:	40 e8       	ldi	r20, 0x80	; 128
    3908:	5f e3       	ldi	r21, 0x3F	; 63
    390a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    390e:	88 23       	and	r24, r24
    3910:	2c f4       	brge	.+10     	; 0x391c <main+0xf5a>
		__ticks = 1;
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	9c 8b       	std	Y+20, r25	; 0x14
    3918:	8b 8b       	std	Y+19, r24	; 0x13
    391a:	3f c0       	rjmp	.+126    	; 0x399a <main+0xfd8>
	else if (__tmp > 65535)
    391c:	6d 89       	ldd	r22, Y+21	; 0x15
    391e:	7e 89       	ldd	r23, Y+22	; 0x16
    3920:	8f 89       	ldd	r24, Y+23	; 0x17
    3922:	98 8d       	ldd	r25, Y+24	; 0x18
    3924:	20 e0       	ldi	r18, 0x00	; 0
    3926:	3f ef       	ldi	r19, 0xFF	; 255
    3928:	4f e7       	ldi	r20, 0x7F	; 127
    392a:	57 e4       	ldi	r21, 0x47	; 71
    392c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3930:	18 16       	cp	r1, r24
    3932:	4c f5       	brge	.+82     	; 0x3986 <main+0xfc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3934:	69 8d       	ldd	r22, Y+25	; 0x19
    3936:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3938:	8b 8d       	ldd	r24, Y+27	; 0x1b
    393a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    393c:	20 e0       	ldi	r18, 0x00	; 0
    393e:	30 e0       	ldi	r19, 0x00	; 0
    3940:	40 e2       	ldi	r20, 0x20	; 32
    3942:	51 e4       	ldi	r21, 0x41	; 65
    3944:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3948:	dc 01       	movw	r26, r24
    394a:	cb 01       	movw	r24, r22
    394c:	bc 01       	movw	r22, r24
    394e:	cd 01       	movw	r24, r26
    3950:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3954:	dc 01       	movw	r26, r24
    3956:	cb 01       	movw	r24, r22
    3958:	9c 8b       	std	Y+20, r25	; 0x14
    395a:	8b 8b       	std	Y+19, r24	; 0x13
    395c:	0f c0       	rjmp	.+30     	; 0x397c <main+0xfba>
    395e:	88 ec       	ldi	r24, 0xC8	; 200
    3960:	90 e0       	ldi	r25, 0x00	; 0
    3962:	9a 8b       	std	Y+18, r25	; 0x12
    3964:	89 8b       	std	Y+17, r24	; 0x11
    3966:	89 89       	ldd	r24, Y+17	; 0x11
    3968:	9a 89       	ldd	r25, Y+18	; 0x12
    396a:	01 97       	sbiw	r24, 0x01	; 1
    396c:	f1 f7       	brne	.-4      	; 0x396a <main+0xfa8>
    396e:	9a 8b       	std	Y+18, r25	; 0x12
    3970:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3972:	8b 89       	ldd	r24, Y+19	; 0x13
    3974:	9c 89       	ldd	r25, Y+20	; 0x14
    3976:	01 97       	sbiw	r24, 0x01	; 1
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    397c:	8b 89       	ldd	r24, Y+19	; 0x13
    397e:	9c 89       	ldd	r25, Y+20	; 0x14
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	69 f7       	brne	.-38     	; 0x395e <main+0xf9c>
    3984:	14 c0       	rjmp	.+40     	; 0x39ae <main+0xfec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3986:	6d 89       	ldd	r22, Y+21	; 0x15
    3988:	7e 89       	ldd	r23, Y+22	; 0x16
    398a:	8f 89       	ldd	r24, Y+23	; 0x17
    398c:	98 8d       	ldd	r25, Y+24	; 0x18
    398e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3992:	dc 01       	movw	r26, r24
    3994:	cb 01       	movw	r24, r22
    3996:	9c 8b       	std	Y+20, r25	; 0x14
    3998:	8b 8b       	std	Y+19, r24	; 0x13
    399a:	8b 89       	ldd	r24, Y+19	; 0x13
    399c:	9c 89       	ldd	r25, Y+20	; 0x14
    399e:	98 8b       	std	Y+16, r25	; 0x10
    39a0:	8f 87       	std	Y+15, r24	; 0x0f
    39a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a4:	98 89       	ldd	r25, Y+16	; 0x10
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	f1 f7       	brne	.-4      	; 0x39a6 <main+0xfe4>
    39aa:	98 8b       	std	Y+16, r25	; 0x10
    39ac:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000); /*Key pressed delay*/
						LCD_displayCharacter('*');
    39ae:	8a e2       	ldi	r24, 0x2A	; 42
    39b0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <LCD_displayCharacter>

					LCD_clearScreen();
					LCD_displayStringRowColumn(0, 0, "Pls Re-Enter the");
					LCD_displayStringRowColumn(1, 0, "same Pass:");

					for (i = 0; i < PASS_SIZE; i++) {
    39b4:	80 91 17 01 	lds	r24, 0x0117
    39b8:	8f 5f       	subi	r24, 0xFF	; 255
    39ba:	80 93 17 01 	sts	0x0117, r24
    39be:	80 91 17 01 	lds	r24, 0x0117
    39c2:	85 30       	cpi	r24, 0x05	; 5
    39c4:	08 f4       	brcc	.+2      	; 0x39c8 <main+0x1006>
    39c6:	7a cf       	rjmp	.-268    	; 0x38bc <main+0xefa>
						UART_sendByte(MC2_READY);
						UART_sendByte(KEYPAD_getPressedKey());
						_delay_ms(1000); /*Key pressed delay*/
						LCD_displayCharacter('*');
					}
					while (KEYPAD_getPressedKey() != 13)
    39c8:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <KEYPAD_getPressedKey>
    39cc:	8d 30       	cpi	r24, 0x0D	; 13
    39ce:	e1 f7       	brne	.-8      	; 0x39c8 <main+0x1006>
						;

					UART_sendByte(MC2_READY);
    39d0:	80 e1       	ldi	r24, 0x10	; 16
    39d2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>

					val_check = UART_recieveByte();
    39d6:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    39da:	80 93 fe 00 	sts	0x00FE, r24

					if (val_check == 1) {
    39de:	80 91 fe 00 	lds	r24, 0x00FE
    39e2:	81 30       	cpi	r24, 0x01	; 1
    39e4:	49 f4       	brne	.+18     	; 0x39f8 <main+0x1036>
						pass_flag = 0;
    39e6:	10 92 f0 00 	sts	0x00F0, r1
						UART_sendByte(MC2_READY);
    39ea:	80 e1       	ldi	r24, 0x10	; 16
    39ec:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
						UART_sendByte(pass_flag);
    39f0:	80 91 f0 00 	lds	r24, 0x00F0
    39f4:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
						UART_sendByte(MC2_READY);
						val_check = UART_recieveByte();


			if (val_check == 1) {pass_flag = 1;
				while (pass_flag != 0) {
    39f8:	80 91 f0 00 	lds	r24, 0x00F0
    39fc:	88 23       	and	r24, r24
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <main+0x1040>
    3a00:	b3 ce       	rjmp	.-666    	; 0x3768 <main+0xda6>
						UART_sendByte(MC2_READY);
						UART_sendByte(pass_flag);
					}

				}
				pass_flag = 0;
    3a02:	10 92 f0 00 	sts	0x00F0, r1
    3a06:	c9 c9       	rjmp	.-3182   	; 0x2d9a <main+0x3d8>
			}
			else{
				LCD_clearScreen();
    3a08:	0e 94 d7 14 	call	0x29ae	; 0x29ae <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "wrong");
    3a0c:	22 ee       	ldi	r18, 0xE2	; 226
    3a0e:	30 e0       	ldi	r19, 0x00	; 0
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	60 e0       	ldi	r22, 0x00	; 0
    3a14:	a9 01       	movw	r20, r18
    3a16:	0e 94 9b 14 	call	0x2936	; 0x2936 <LCD_displayStringRowColumn>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	aa ef       	ldi	r26, 0xFA	; 250
    3a20:	b4 e4       	ldi	r27, 0x44	; 68
    3a22:	8b 87       	std	Y+11, r24	; 0x0b
    3a24:	9c 87       	std	Y+12, r25	; 0x0c
    3a26:	ad 87       	std	Y+13, r26	; 0x0d
    3a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8f 83       	std	Y+7, r24	; 0x07
    3a44:	98 87       	std	Y+8, r25	; 0x08
    3a46:	a9 87       	std	Y+9, r26	; 0x09
    3a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4c:	78 85       	ldd	r23, Y+8	; 0x08
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <main+0x10aa>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9e 83       	std	Y+6, r25	; 0x06
    3a68:	8d 83       	std	Y+5, r24	; 0x05
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <main+0x1128>
	else if (__tmp > 65535)
    3a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6e:	78 85       	ldd	r23, Y+8	; 0x08
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <main+0x1114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <main+0x110a>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9c 83       	std	Y+4, r25	; 0x04
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <main+0x10f8>
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
    3aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <main+0x10ec>
    3ad4:	62 c9       	rjmp	.-3388   	; 0x2d9a <main+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad8:	78 85       	ldd	r23, Y+8	; 0x08
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <main+0x1134>
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
    3afe:	4d c9       	rjmp	.-3430   	; 0x2d9a <main+0x3d8>

00003b00 <callback_function>:
		}
	}
	return 0;
}

void callback_function(void) {
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	cd b7       	in	r28, 0x3d	; 61
    3b06:	de b7       	in	r29, 0x3e	; 62
	ticks++;
    3b08:	80 91 00 01 	lds	r24, 0x0100
    3b0c:	8f 5f       	subi	r24, 0xFF	; 255
    3b0e:	80 93 00 01 	sts	0x0100, r24
}
    3b12:	cf 91       	pop	r28
    3b14:	df 91       	pop	r29
    3b16:	08 95       	ret

00003b18 <Timer1_init>:

static volatile void (*g_callBackPtr)(void) = NULL_PTR;

Timer1_ConfigType TIMER1_Configerations ={0,7813,F_CPU_1024,CTC_OCR1A_NONPWM};

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3b18:	df 93       	push	r29
    3b1a:	cf 93       	push	r28
    3b1c:	00 d0       	rcall	.+0      	; 0x3b1e <Timer1_init+0x6>
    3b1e:	0f 92       	push	r0
    3b20:	cd b7       	in	r28, 0x3d	; 61
    3b22:	de b7       	in	r29, 0x3e	; 62
    3b24:	9b 83       	std	Y+3, r25	; 0x03
    3b26:	8a 83       	std	Y+2, r24	; 0x02
	uint8 mode_selector =(Config_Ptr->mode);
    3b28:	ea 81       	ldd	r30, Y+2	; 0x02
    3b2a:	fb 81       	ldd	r31, Y+3	; 0x03
    3b2c:	85 81       	ldd	r24, Z+5	; 0x05
    3b2e:	89 83       	std	Y+1, r24	; 0x01
	if(mode_selector==NORMALMODE){
    3b30:	89 81       	ldd	r24, Y+1	; 0x01
    3b32:	88 23       	and	r24, r24
    3b34:	b9 f4       	brne	.+46     	; 0x3b64 <Timer1_init+0x4c>
		TCCR1A=0;
    3b36:	ef e4       	ldi	r30, 0x4F	; 79
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	10 82       	st	Z, r1
		TCCR1B=0|((Config_Ptr->prescaler));
    3b3c:	ae e4       	ldi	r26, 0x4E	; 78
    3b3e:	b0 e0       	ldi	r27, 0x00	; 0
    3b40:	ea 81       	ldd	r30, Y+2	; 0x02
    3b42:	fb 81       	ldd	r31, Y+3	; 0x03
    3b44:	84 81       	ldd	r24, Z+4	; 0x04
    3b46:	8c 93       	st	X, r24
		TCNT1 = Config_Ptr-> initial_value;
    3b48:	ac e4       	ldi	r26, 0x4C	; 76
    3b4a:	b0 e0       	ldi	r27, 0x00	; 0
    3b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b50:	80 81       	ld	r24, Z
    3b52:	91 81       	ldd	r25, Z+1	; 0x01
    3b54:	11 96       	adiw	r26, 0x01	; 1
    3b56:	9c 93       	st	X, r25
    3b58:	8e 93       	st	-X, r24
		TIMSK =(1<<TOIE1);
    3b5a:	e9 e5       	ldi	r30, 0x59	; 89
    3b5c:	f0 e0       	ldi	r31, 0x00	; 0
    3b5e:	84 e0       	ldi	r24, 0x04	; 4
    3b60:	80 83       	st	Z, r24
    3b62:	6f c0       	rjmp	.+222    	; 0x3c42 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1A_NONPWM){
    3b64:	89 81       	ldd	r24, Y+1	; 0x01
    3b66:	81 30       	cpi	r24, 0x01	; 1
    3b68:	c9 f4       	brne	.+50     	; 0x3b9c <Timer1_init+0x84>
		TCCR1A=(0XF0);    //راجع ال data sheet
    3b6a:	ef e4       	ldi	r30, 0x4F	; 79
    3b6c:	f0 e0       	ldi	r31, 0x00	; 0
    3b6e:	80 ef       	ldi	r24, 0xF0	; 240
    3b70:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12)|((Config_Ptr->prescaler));
    3b72:	ae e4       	ldi	r26, 0x4E	; 78
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	ea 81       	ldd	r30, Y+2	; 0x02
    3b78:	fb 81       	ldd	r31, Y+3	; 0x03
    3b7a:	84 81       	ldd	r24, Z+4	; 0x04
    3b7c:	88 60       	ori	r24, 0x08	; 8
    3b7e:	8c 93       	st	X, r24
		OCR1A= Config_Ptr-> compare_value;
    3b80:	aa e4       	ldi	r26, 0x4A	; 74
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	ea 81       	ldd	r30, Y+2	; 0x02
    3b86:	fb 81       	ldd	r31, Y+3	; 0x03
    3b88:	82 81       	ldd	r24, Z+2	; 0x02
    3b8a:	93 81       	ldd	r25, Z+3	; 0x03
    3b8c:	11 96       	adiw	r26, 0x01	; 1
    3b8e:	9c 93       	st	X, r25
    3b90:	8e 93       	st	-X, r24
		TIMSK =(1<<OCIE1A);
    3b92:	e9 e5       	ldi	r30, 0x59	; 89
    3b94:	f0 e0       	ldi	r31, 0x00	; 0
    3b96:	80 e1       	ldi	r24, 0x10	; 16
    3b98:	80 83       	st	Z, r24
    3b9a:	53 c0       	rjmp	.+166    	; 0x3c42 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1A_FASTPWM){
    3b9c:	89 81       	ldd	r24, Y+1	; 0x01
    3b9e:	82 30       	cpi	r24, 0x02	; 2
    3ba0:	c9 f4       	brne	.+50     	; 0x3bd4 <Timer1_init+0xbc>
		TCCR1A=(0XF0); /*Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM, (inverting mode)*/
    3ba2:	ef e4       	ldi	r30, 0x4F	; 79
    3ba4:	f0 e0       	ldi	r31, 0x00	; 0
    3ba6:	80 ef       	ldi	r24, 0xF0	; 240
    3ba8:	80 83       	st	Z, r24
		TCCR1B=(1<<WGM12)|(1<<WGM13)|((Config_Ptr->prescaler));
    3baa:	ae e4       	ldi	r26, 0x4E	; 78
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	ea 81       	ldd	r30, Y+2	; 0x02
    3bb0:	fb 81       	ldd	r31, Y+3	; 0x03
    3bb2:	84 81       	ldd	r24, Z+4	; 0x04
    3bb4:	88 61       	ori	r24, 0x18	; 24
    3bb6:	8c 93       	st	X, r24
		OCR1A= Config_Ptr-> compare_value;
    3bb8:	aa e4       	ldi	r26, 0x4A	; 74
    3bba:	b0 e0       	ldi	r27, 0x00	; 0
    3bbc:	ea 81       	ldd	r30, Y+2	; 0x02
    3bbe:	fb 81       	ldd	r31, Y+3	; 0x03
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	11 96       	adiw	r26, 0x01	; 1
    3bc6:	9c 93       	st	X, r25
    3bc8:	8e 93       	st	-X, r24
		TIMSK =(1<<OCIE1A);
    3bca:	e9 e5       	ldi	r30, 0x59	; 89
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	80 e1       	ldi	r24, 0x10	; 16
    3bd0:	80 83       	st	Z, r24
    3bd2:	37 c0       	rjmp	.+110    	; 0x3c42 <Timer1_init+0x12a>
	}
	else if(mode_selector==CTC_OCR1B_NONPWM){
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	83 30       	cpi	r24, 0x03	; 3
    3bd8:	c9 f4       	brne	.+50     	; 0x3c0c <Timer1_init+0xf4>
			TCCR1A=(0XF0);    //راجع ال data sheet
    3bda:	ef e4       	ldi	r30, 0x4F	; 79
    3bdc:	f0 e0       	ldi	r31, 0x00	; 0
    3bde:	80 ef       	ldi	r24, 0xF0	; 240
    3be0:	80 83       	st	Z, r24
			TCCR1B=(1<<WGM12)|((Config_Ptr->prescaler));
    3be2:	ae e4       	ldi	r26, 0x4E	; 78
    3be4:	b0 e0       	ldi	r27, 0x00	; 0
    3be6:	ea 81       	ldd	r30, Y+2	; 0x02
    3be8:	fb 81       	ldd	r31, Y+3	; 0x03
    3bea:	84 81       	ldd	r24, Z+4	; 0x04
    3bec:	88 60       	ori	r24, 0x08	; 8
    3bee:	8c 93       	st	X, r24
			OCR1B= Config_Ptr-> compare_value;
    3bf0:	a8 e4       	ldi	r26, 0x48	; 72
    3bf2:	b0 e0       	ldi	r27, 0x00	; 0
    3bf4:	ea 81       	ldd	r30, Y+2	; 0x02
    3bf6:	fb 81       	ldd	r31, Y+3	; 0x03
    3bf8:	82 81       	ldd	r24, Z+2	; 0x02
    3bfa:	93 81       	ldd	r25, Z+3	; 0x03
    3bfc:	11 96       	adiw	r26, 0x01	; 1
    3bfe:	9c 93       	st	X, r25
    3c00:	8e 93       	st	-X, r24
			TIMSK =(1<<OCIE1B);
    3c02:	e9 e5       	ldi	r30, 0x59	; 89
    3c04:	f0 e0       	ldi	r31, 0x00	; 0
    3c06:	88 e0       	ldi	r24, 0x08	; 8
    3c08:	80 83       	st	Z, r24
    3c0a:	1b c0       	rjmp	.+54     	; 0x3c42 <Timer1_init+0x12a>
		}
	else if(mode_selector==CTC_OCR1B_FASTPWM){
    3c0c:	89 81       	ldd	r24, Y+1	; 0x01
    3c0e:	84 30       	cpi	r24, 0x04	; 4
    3c10:	c1 f4       	brne	.+48     	; 0x3c42 <Timer1_init+0x12a>
			TCCR1A=(0XF0); /*Set OC1A/OC1B on compare match, clear OC1A/OC1B at BOTTOM, (inverting mode)*/
    3c12:	ef e4       	ldi	r30, 0x4F	; 79
    3c14:	f0 e0       	ldi	r31, 0x00	; 0
    3c16:	80 ef       	ldi	r24, 0xF0	; 240
    3c18:	80 83       	st	Z, r24
			TCCR1B=(1<<WGM12)|(1<<WGM13)|((Config_Ptr->prescaler));
    3c1a:	ae e4       	ldi	r26, 0x4E	; 78
    3c1c:	b0 e0       	ldi	r27, 0x00	; 0
    3c1e:	ea 81       	ldd	r30, Y+2	; 0x02
    3c20:	fb 81       	ldd	r31, Y+3	; 0x03
    3c22:	84 81       	ldd	r24, Z+4	; 0x04
    3c24:	88 61       	ori	r24, 0x18	; 24
    3c26:	8c 93       	st	X, r24
			OCR1B= Config_Ptr-> compare_value;
    3c28:	a8 e4       	ldi	r26, 0x48	; 72
    3c2a:	b0 e0       	ldi	r27, 0x00	; 0
    3c2c:	ea 81       	ldd	r30, Y+2	; 0x02
    3c2e:	fb 81       	ldd	r31, Y+3	; 0x03
    3c30:	82 81       	ldd	r24, Z+2	; 0x02
    3c32:	93 81       	ldd	r25, Z+3	; 0x03
    3c34:	11 96       	adiw	r26, 0x01	; 1
    3c36:	9c 93       	st	X, r25
    3c38:	8e 93       	st	-X, r24
			TIMSK =(1<<OCIE1B);
    3c3a:	e9 e5       	ldi	r30, 0x59	; 89
    3c3c:	f0 e0       	ldi	r31, 0x00	; 0
    3c3e:	88 e0       	ldi	r24, 0x08	; 8
    3c40:	80 83       	st	Z, r24
		}

}
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	0f 90       	pop	r0
    3c48:	cf 91       	pop	r28
    3c4a:	df 91       	pop	r29
    3c4c:	08 95       	ret

00003c4e <Timer1_deInit>:

void Timer1_deInit(void){
    3c4e:	df 93       	push	r29
    3c50:	cf 93       	push	r28
    3c52:	cd b7       	in	r28, 0x3d	; 61
    3c54:	de b7       	in	r29, 0x3e	; 62
	TCCR1A=0;
    3c56:	ef e4       	ldi	r30, 0x4F	; 79
    3c58:	f0 e0       	ldi	r31, 0x00	; 0
    3c5a:	10 82       	st	Z, r1
	TCCR1B=0;
    3c5c:	ee e4       	ldi	r30, 0x4E	; 78
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	10 82       	st	Z, r1
	TIMSK =0;
    3c62:	e9 e5       	ldi	r30, 0x59	; 89
    3c64:	f0 e0       	ldi	r31, 0x00	; 0
    3c66:	10 82       	st	Z, r1
}
    3c68:	cf 91       	pop	r28
    3c6a:	df 91       	pop	r29
    3c6c:	08 95       	ret

00003c6e <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void)){
    3c6e:	df 93       	push	r29
    3c70:	cf 93       	push	r28
    3c72:	00 d0       	rcall	.+0      	; 0x3c74 <Timer1_setCallBack+0x6>
    3c74:	cd b7       	in	r28, 0x3d	; 61
    3c76:	de b7       	in	r29, 0x3e	; 62
    3c78:	9a 83       	std	Y+2, r25	; 0x02
    3c7a:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    3c7c:	89 81       	ldd	r24, Y+1	; 0x01
    3c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c80:	90 93 02 01 	sts	0x0102, r25
    3c84:	80 93 01 01 	sts	0x0101, r24
}
    3c88:	0f 90       	pop	r0
    3c8a:	0f 90       	pop	r0
    3c8c:	cf 91       	pop	r28
    3c8e:	df 91       	pop	r29
    3c90:	08 95       	ret

00003c92 <__vector_9>:

ISR(TIMER1_OVF_vect){
    3c92:	1f 92       	push	r1
    3c94:	0f 92       	push	r0
    3c96:	0f b6       	in	r0, 0x3f	; 63
    3c98:	0f 92       	push	r0
    3c9a:	11 24       	eor	r1, r1
    3c9c:	2f 93       	push	r18
    3c9e:	3f 93       	push	r19
    3ca0:	4f 93       	push	r20
    3ca2:	5f 93       	push	r21
    3ca4:	6f 93       	push	r22
    3ca6:	7f 93       	push	r23
    3ca8:	8f 93       	push	r24
    3caa:	9f 93       	push	r25
    3cac:	af 93       	push	r26
    3cae:	bf 93       	push	r27
    3cb0:	ef 93       	push	r30
    3cb2:	ff 93       	push	r31
    3cb4:	df 93       	push	r29
    3cb6:	cf 93       	push	r28
    3cb8:	cd b7       	in	r28, 0x3d	; 61
    3cba:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3cbc:	80 91 01 01 	lds	r24, 0x0101
    3cc0:	90 91 02 01 	lds	r25, 0x0102
    3cc4:	00 97       	sbiw	r24, 0x00	; 0
    3cc6:	29 f0       	breq	.+10     	; 0x3cd2 <__vector_9+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3cc8:	e0 91 01 01 	lds	r30, 0x0101
    3ccc:	f0 91 02 01 	lds	r31, 0x0102
    3cd0:	09 95       	icall
		}
}
    3cd2:	cf 91       	pop	r28
    3cd4:	df 91       	pop	r29
    3cd6:	ff 91       	pop	r31
    3cd8:	ef 91       	pop	r30
    3cda:	bf 91       	pop	r27
    3cdc:	af 91       	pop	r26
    3cde:	9f 91       	pop	r25
    3ce0:	8f 91       	pop	r24
    3ce2:	7f 91       	pop	r23
    3ce4:	6f 91       	pop	r22
    3ce6:	5f 91       	pop	r21
    3ce8:	4f 91       	pop	r20
    3cea:	3f 91       	pop	r19
    3cec:	2f 91       	pop	r18
    3cee:	0f 90       	pop	r0
    3cf0:	0f be       	out	0x3f, r0	; 63
    3cf2:	0f 90       	pop	r0
    3cf4:	1f 90       	pop	r1
    3cf6:	18 95       	reti

00003cf8 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    3cf8:	1f 92       	push	r1
    3cfa:	0f 92       	push	r0
    3cfc:	0f b6       	in	r0, 0x3f	; 63
    3cfe:	0f 92       	push	r0
    3d00:	11 24       	eor	r1, r1
    3d02:	2f 93       	push	r18
    3d04:	3f 93       	push	r19
    3d06:	4f 93       	push	r20
    3d08:	5f 93       	push	r21
    3d0a:	6f 93       	push	r22
    3d0c:	7f 93       	push	r23
    3d0e:	8f 93       	push	r24
    3d10:	9f 93       	push	r25
    3d12:	af 93       	push	r26
    3d14:	bf 93       	push	r27
    3d16:	ef 93       	push	r30
    3d18:	ff 93       	push	r31
    3d1a:	df 93       	push	r29
    3d1c:	cf 93       	push	r28
    3d1e:	cd b7       	in	r28, 0x3d	; 61
    3d20:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3d22:	80 91 01 01 	lds	r24, 0x0101
    3d26:	90 91 02 01 	lds	r25, 0x0102
    3d2a:	00 97       	sbiw	r24, 0x00	; 0
    3d2c:	29 f0       	breq	.+10     	; 0x3d38 <__vector_7+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3d2e:	e0 91 01 01 	lds	r30, 0x0101
    3d32:	f0 91 02 01 	lds	r31, 0x0102
    3d36:	09 95       	icall
		}
}
    3d38:	cf 91       	pop	r28
    3d3a:	df 91       	pop	r29
    3d3c:	ff 91       	pop	r31
    3d3e:	ef 91       	pop	r30
    3d40:	bf 91       	pop	r27
    3d42:	af 91       	pop	r26
    3d44:	9f 91       	pop	r25
    3d46:	8f 91       	pop	r24
    3d48:	7f 91       	pop	r23
    3d4a:	6f 91       	pop	r22
    3d4c:	5f 91       	pop	r21
    3d4e:	4f 91       	pop	r20
    3d50:	3f 91       	pop	r19
    3d52:	2f 91       	pop	r18
    3d54:	0f 90       	pop	r0
    3d56:	0f be       	out	0x3f, r0	; 63
    3d58:	0f 90       	pop	r0
    3d5a:	1f 90       	pop	r1
    3d5c:	18 95       	reti

00003d5e <__vector_8>:
ISR(TIMER1_COMPB_vect){
    3d5e:	1f 92       	push	r1
    3d60:	0f 92       	push	r0
    3d62:	0f b6       	in	r0, 0x3f	; 63
    3d64:	0f 92       	push	r0
    3d66:	11 24       	eor	r1, r1
    3d68:	2f 93       	push	r18
    3d6a:	3f 93       	push	r19
    3d6c:	4f 93       	push	r20
    3d6e:	5f 93       	push	r21
    3d70:	6f 93       	push	r22
    3d72:	7f 93       	push	r23
    3d74:	8f 93       	push	r24
    3d76:	9f 93       	push	r25
    3d78:	af 93       	push	r26
    3d7a:	bf 93       	push	r27
    3d7c:	ef 93       	push	r30
    3d7e:	ff 93       	push	r31
    3d80:	df 93       	push	r29
    3d82:	cf 93       	push	r28
    3d84:	cd b7       	in	r28, 0x3d	; 61
    3d86:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3d88:	80 91 01 01 	lds	r24, 0x0101
    3d8c:	90 91 02 01 	lds	r25, 0x0102
    3d90:	00 97       	sbiw	r24, 0x00	; 0
    3d92:	29 f0       	breq	.+10     	; 0x3d9e <__vector_8+0x40>
		{
			/* Call the Call Back function in the application after the edge is detected */
			(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3d94:	e0 91 01 01 	lds	r30, 0x0101
    3d98:	f0 91 02 01 	lds	r31, 0x0102
    3d9c:	09 95       	icall
		}
}
    3d9e:	cf 91       	pop	r28
    3da0:	df 91       	pop	r29
    3da2:	ff 91       	pop	r31
    3da4:	ef 91       	pop	r30
    3da6:	bf 91       	pop	r27
    3da8:	af 91       	pop	r26
    3daa:	9f 91       	pop	r25
    3dac:	8f 91       	pop	r24
    3dae:	7f 91       	pop	r23
    3db0:	6f 91       	pop	r22
    3db2:	5f 91       	pop	r21
    3db4:	4f 91       	pop	r20
    3db6:	3f 91       	pop	r19
    3db8:	2f 91       	pop	r18
    3dba:	0f 90       	pop	r0
    3dbc:	0f be       	out	0x3f, r0	; 63
    3dbe:	0f 90       	pop	r0
    3dc0:	1f 90       	pop	r1
    3dc2:	18 95       	reti

00003dc4 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    3dc4:	df 93       	push	r29
    3dc6:	cf 93       	push	r28
    3dc8:	00 d0       	rcall	.+0      	; 0x3dca <UART_init+0x6>
    3dca:	00 d0       	rcall	.+0      	; 0x3dcc <UART_init+0x8>
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    3dd0:	9c 83       	std	Y+4, r25	; 0x04
    3dd2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3dd4:	1a 82       	std	Y+2, r1	; 0x02
    3dd6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    3dd8:	eb e2       	ldi	r30, 0x2B	; 43
    3dda:	f0 e0       	ldi	r31, 0x00	; 0
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	80 83       	st	Z, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 not used for 8-bit data mode
		 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3de0:	ea e2       	ldi	r30, 0x2A	; 42
    3de2:	f0 e0       	ldi	r31, 0x00	; 0
    3de4:	88 e1       	ldi	r24, 0x18	; 24
    3de6:	80 83       	st	Z, r24
	UCSRB |= (1<<3|((Config_Ptr -> bit_data)>>2));
    3de8:	aa e2       	ldi	r26, 0x2A	; 42
    3dea:	b0 e0       	ldi	r27, 0x00	; 0
    3dec:	ea e2       	ldi	r30, 0x2A	; 42
    3dee:	f0 e0       	ldi	r31, 0x00	; 0
    3df0:	90 81       	ld	r25, Z
    3df2:	eb 81       	ldd	r30, Y+3	; 0x03
    3df4:	fc 81       	ldd	r31, Y+4	; 0x04
    3df6:	80 81       	ld	r24, Z
    3df8:	86 95       	lsr	r24
    3dfa:	86 95       	lsr	r24
    3dfc:	89 2b       	or	r24, r25
    3dfe:	88 60       	ori	r24, 0x08	; 8
    3e00:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC =((1<<1)|((Config_Ptr -> bit_data)))|((1<<5)|((Config_Ptr -> parity)))|((1<<3)|((Config_Ptr -> stop_bit)));
    3e02:	a0 e4       	ldi	r26, 0x40	; 64
    3e04:	b0 e0       	ldi	r27, 0x00	; 0
    3e06:	eb 81       	ldd	r30, Y+3	; 0x03
    3e08:	fc 81       	ldd	r31, Y+4	; 0x04
    3e0a:	90 81       	ld	r25, Z
    3e0c:	eb 81       	ldd	r30, Y+3	; 0x03
    3e0e:	fc 81       	ldd	r31, Y+4	; 0x04
    3e10:	81 81       	ldd	r24, Z+1	; 0x01
    3e12:	98 2b       	or	r25, r24
    3e14:	eb 81       	ldd	r30, Y+3	; 0x03
    3e16:	fc 81       	ldd	r31, Y+4	; 0x04
    3e18:	82 81       	ldd	r24, Z+2	; 0x02
    3e1a:	89 2b       	or	r24, r25
    3e1c:	8a 62       	ori	r24, 0x2A	; 42
    3e1e:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr -> baud_rate) * 8UL))) - 1);
    3e20:	eb 81       	ldd	r30, Y+3	; 0x03
    3e22:	fc 81       	ldd	r31, Y+4	; 0x04
    3e24:	83 81       	ldd	r24, Z+3	; 0x03
    3e26:	94 81       	ldd	r25, Z+4	; 0x04
    3e28:	a5 81       	ldd	r26, Z+5	; 0x05
    3e2a:	b6 81       	ldd	r27, Z+6	; 0x06
    3e2c:	88 0f       	add	r24, r24
    3e2e:	99 1f       	adc	r25, r25
    3e30:	aa 1f       	adc	r26, r26
    3e32:	bb 1f       	adc	r27, r27
    3e34:	88 0f       	add	r24, r24
    3e36:	99 1f       	adc	r25, r25
    3e38:	aa 1f       	adc	r26, r26
    3e3a:	bb 1f       	adc	r27, r27
    3e3c:	88 0f       	add	r24, r24
    3e3e:	99 1f       	adc	r25, r25
    3e40:	aa 1f       	adc	r26, r26
    3e42:	bb 1f       	adc	r27, r27
    3e44:	9c 01       	movw	r18, r24
    3e46:	ad 01       	movw	r20, r26
    3e48:	80 e0       	ldi	r24, 0x00	; 0
    3e4a:	92 e1       	ldi	r25, 0x12	; 18
    3e4c:	aa e7       	ldi	r26, 0x7A	; 122
    3e4e:	b0 e0       	ldi	r27, 0x00	; 0
    3e50:	bc 01       	movw	r22, r24
    3e52:	cd 01       	movw	r24, r26
    3e54:	0e 94 d5 1f 	call	0x3faa	; 0x3faa <__udivmodsi4>
    3e58:	da 01       	movw	r26, r20
    3e5a:	c9 01       	movw	r24, r18
    3e5c:	01 97       	sbiw	r24, 0x01	; 1
    3e5e:	9a 83       	std	Y+2, r25	; 0x02
    3e60:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3e62:	e0 e4       	ldi	r30, 0x40	; 64
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	9a 81       	ldd	r25, Y+2	; 0x02
    3e6a:	89 2f       	mov	r24, r25
    3e6c:	99 27       	eor	r25, r25
    3e6e:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3e70:	e9 e2       	ldi	r30, 0x29	; 41
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	80 83       	st	Z, r24

}
    3e78:	0f 90       	pop	r0
    3e7a:	0f 90       	pop	r0
    3e7c:	0f 90       	pop	r0
    3e7e:	0f 90       	pop	r0
    3e80:	cf 91       	pop	r28
    3e82:	df 91       	pop	r29
    3e84:	08 95       	ret

00003e86 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3e86:	df 93       	push	r29
    3e88:	cf 93       	push	r28
    3e8a:	0f 92       	push	r0
    3e8c:	cd b7       	in	r28, 0x3d	; 61
    3e8e:	de b7       	in	r29, 0x3e	; 62
    3e90:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3e92:	eb e2       	ldi	r30, 0x2B	; 43
    3e94:	f0 e0       	ldi	r31, 0x00	; 0
    3e96:	80 81       	ld	r24, Z
    3e98:	88 2f       	mov	r24, r24
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	80 72       	andi	r24, 0x20	; 32
    3e9e:	90 70       	andi	r25, 0x00	; 0
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	b9 f3       	breq	.-18     	; 0x3e92 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3ea4:	ec e2       	ldi	r30, 0x2C	; 44
    3ea6:	f0 e0       	ldi	r31, 0x00	; 0
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3eac:	0f 90       	pop	r0
    3eae:	cf 91       	pop	r28
    3eb0:	df 91       	pop	r29
    3eb2:	08 95       	ret

00003eb4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3eb4:	df 93       	push	r29
    3eb6:	cf 93       	push	r28
    3eb8:	cd b7       	in	r28, 0x3d	; 61
    3eba:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3ebc:	eb e2       	ldi	r30, 0x2B	; 43
    3ebe:	f0 e0       	ldi	r31, 0x00	; 0
    3ec0:	80 81       	ld	r24, Z
    3ec2:	88 23       	and	r24, r24
    3ec4:	dc f7       	brge	.-10     	; 0x3ebc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3ec6:	ec e2       	ldi	r30, 0x2C	; 44
    3ec8:	f0 e0       	ldi	r31, 0x00	; 0
    3eca:	80 81       	ld	r24, Z
}
    3ecc:	cf 91       	pop	r28
    3ece:	df 91       	pop	r29
    3ed0:	08 95       	ret

00003ed2 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3ed2:	df 93       	push	r29
    3ed4:	cf 93       	push	r28
    3ed6:	00 d0       	rcall	.+0      	; 0x3ed8 <UART_sendString+0x6>
    3ed8:	0f 92       	push	r0
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	9b 83       	std	Y+3, r25	; 0x03
    3ee0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3ee2:	19 82       	std	Y+1, r1	; 0x01
    3ee4:	0e c0       	rjmp	.+28     	; 0x3f02 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3ee6:	89 81       	ldd	r24, Y+1	; 0x01
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	8a 81       	ldd	r24, Y+2	; 0x02
    3eee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	e2 0f       	add	r30, r18
    3ef4:	f3 1f       	adc	r31, r19
    3ef6:	80 81       	ld	r24, Z
    3ef8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <UART_sendByte>
		i++;
    3efc:	89 81       	ldd	r24, Y+1	; 0x01
    3efe:	8f 5f       	subi	r24, 0xFF	; 255
    3f00:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3f02:	89 81       	ldd	r24, Y+1	; 0x01
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8a 81       	ldd	r24, Y+2	; 0x02
    3f0a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e2 0f       	add	r30, r18
    3f10:	f3 1f       	adc	r31, r19
    3f12:	80 81       	ld	r24, Z
    3f14:	88 23       	and	r24, r24
    3f16:	39 f7       	brne	.-50     	; 0x3ee6 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3f18:	0f 90       	pop	r0
    3f1a:	0f 90       	pop	r0
    3f1c:	0f 90       	pop	r0
    3f1e:	cf 91       	pop	r28
    3f20:	df 91       	pop	r29
    3f22:	08 95       	ret

00003f24 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	df 93       	push	r29
    3f2a:	cf 93       	push	r28
    3f2c:	00 d0       	rcall	.+0      	; 0x3f2e <UART_receiveString+0xa>
    3f2e:	0f 92       	push	r0
    3f30:	cd b7       	in	r28, 0x3d	; 61
    3f32:	de b7       	in	r29, 0x3e	; 62
    3f34:	9b 83       	std	Y+3, r25	; 0x03
    3f36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3f38:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3f3a:	89 81       	ldd	r24, Y+1	; 0x01
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	8a 81       	ldd	r24, Y+2	; 0x02
    3f42:	9b 81       	ldd	r25, Y+3	; 0x03
    3f44:	8c 01       	movw	r16, r24
    3f46:	02 0f       	add	r16, r18
    3f48:	13 1f       	adc	r17, r19
    3f4a:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    3f4e:	f8 01       	movw	r30, r16
    3f50:	80 83       	st	Z, r24
    3f52:	0f c0       	rjmp	.+30     	; 0x3f72 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3f54:	89 81       	ldd	r24, Y+1	; 0x01
    3f56:	8f 5f       	subi	r24, 0xFF	; 255
    3f58:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3f5a:	89 81       	ldd	r24, Y+1	; 0x01
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	8a 81       	ldd	r24, Y+2	; 0x02
    3f62:	9b 81       	ldd	r25, Y+3	; 0x03
    3f64:	8c 01       	movw	r16, r24
    3f66:	02 0f       	add	r16, r18
    3f68:	13 1f       	adc	r17, r19
    3f6a:	0e 94 5a 1f 	call	0x3eb4	; 0x3eb4 <UART_recieveByte>
    3f6e:	f8 01       	movw	r30, r16
    3f70:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3f72:	89 81       	ldd	r24, Y+1	; 0x01
    3f74:	28 2f       	mov	r18, r24
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7c:	fc 01       	movw	r30, r24
    3f7e:	e2 0f       	add	r30, r18
    3f80:	f3 1f       	adc	r31, r19
    3f82:	80 81       	ld	r24, Z
    3f84:	83 32       	cpi	r24, 0x23	; 35
    3f86:	31 f7       	brne	.-52     	; 0x3f54 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3f88:	89 81       	ldd	r24, Y+1	; 0x01
    3f8a:	28 2f       	mov	r18, r24
    3f8c:	30 e0       	ldi	r19, 0x00	; 0
    3f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f90:	9b 81       	ldd	r25, Y+3	; 0x03
    3f92:	fc 01       	movw	r30, r24
    3f94:	e2 0f       	add	r30, r18
    3f96:	f3 1f       	adc	r31, r19
    3f98:	10 82       	st	Z, r1
}
    3f9a:	0f 90       	pop	r0
    3f9c:	0f 90       	pop	r0
    3f9e:	0f 90       	pop	r0
    3fa0:	cf 91       	pop	r28
    3fa2:	df 91       	pop	r29
    3fa4:	1f 91       	pop	r17
    3fa6:	0f 91       	pop	r16
    3fa8:	08 95       	ret

00003faa <__udivmodsi4>:
    3faa:	a1 e2       	ldi	r26, 0x21	; 33
    3fac:	1a 2e       	mov	r1, r26
    3fae:	aa 1b       	sub	r26, r26
    3fb0:	bb 1b       	sub	r27, r27
    3fb2:	fd 01       	movw	r30, r26
    3fb4:	0d c0       	rjmp	.+26     	; 0x3fd0 <__udivmodsi4_ep>

00003fb6 <__udivmodsi4_loop>:
    3fb6:	aa 1f       	adc	r26, r26
    3fb8:	bb 1f       	adc	r27, r27
    3fba:	ee 1f       	adc	r30, r30
    3fbc:	ff 1f       	adc	r31, r31
    3fbe:	a2 17       	cp	r26, r18
    3fc0:	b3 07       	cpc	r27, r19
    3fc2:	e4 07       	cpc	r30, r20
    3fc4:	f5 07       	cpc	r31, r21
    3fc6:	20 f0       	brcs	.+8      	; 0x3fd0 <__udivmodsi4_ep>
    3fc8:	a2 1b       	sub	r26, r18
    3fca:	b3 0b       	sbc	r27, r19
    3fcc:	e4 0b       	sbc	r30, r20
    3fce:	f5 0b       	sbc	r31, r21

00003fd0 <__udivmodsi4_ep>:
    3fd0:	66 1f       	adc	r22, r22
    3fd2:	77 1f       	adc	r23, r23
    3fd4:	88 1f       	adc	r24, r24
    3fd6:	99 1f       	adc	r25, r25
    3fd8:	1a 94       	dec	r1
    3fda:	69 f7       	brne	.-38     	; 0x3fb6 <__udivmodsi4_loop>
    3fdc:	60 95       	com	r22
    3fde:	70 95       	com	r23
    3fe0:	80 95       	com	r24
    3fe2:	90 95       	com	r25
    3fe4:	9b 01       	movw	r18, r22
    3fe6:	ac 01       	movw	r20, r24
    3fe8:	bd 01       	movw	r22, r26
    3fea:	cf 01       	movw	r24, r30
    3fec:	08 95       	ret

00003fee <__prologue_saves__>:
    3fee:	2f 92       	push	r2
    3ff0:	3f 92       	push	r3
    3ff2:	4f 92       	push	r4
    3ff4:	5f 92       	push	r5
    3ff6:	6f 92       	push	r6
    3ff8:	7f 92       	push	r7
    3ffa:	8f 92       	push	r8
    3ffc:	9f 92       	push	r9
    3ffe:	af 92       	push	r10
    4000:	bf 92       	push	r11
    4002:	cf 92       	push	r12
    4004:	df 92       	push	r13
    4006:	ef 92       	push	r14
    4008:	ff 92       	push	r15
    400a:	0f 93       	push	r16
    400c:	1f 93       	push	r17
    400e:	cf 93       	push	r28
    4010:	df 93       	push	r29
    4012:	cd b7       	in	r28, 0x3d	; 61
    4014:	de b7       	in	r29, 0x3e	; 62
    4016:	ca 1b       	sub	r28, r26
    4018:	db 0b       	sbc	r29, r27
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	09 94       	ijmp

00004026 <__epilogue_restores__>:
    4026:	2a 88       	ldd	r2, Y+18	; 0x12
    4028:	39 88       	ldd	r3, Y+17	; 0x11
    402a:	48 88       	ldd	r4, Y+16	; 0x10
    402c:	5f 84       	ldd	r5, Y+15	; 0x0f
    402e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4030:	7d 84       	ldd	r7, Y+13	; 0x0d
    4032:	8c 84       	ldd	r8, Y+12	; 0x0c
    4034:	9b 84       	ldd	r9, Y+11	; 0x0b
    4036:	aa 84       	ldd	r10, Y+10	; 0x0a
    4038:	b9 84       	ldd	r11, Y+9	; 0x09
    403a:	c8 84       	ldd	r12, Y+8	; 0x08
    403c:	df 80       	ldd	r13, Y+7	; 0x07
    403e:	ee 80       	ldd	r14, Y+6	; 0x06
    4040:	fd 80       	ldd	r15, Y+5	; 0x05
    4042:	0c 81       	ldd	r16, Y+4	; 0x04
    4044:	1b 81       	ldd	r17, Y+3	; 0x03
    4046:	aa 81       	ldd	r26, Y+2	; 0x02
    4048:	b9 81       	ldd	r27, Y+1	; 0x01
    404a:	ce 0f       	add	r28, r30
    404c:	d1 1d       	adc	r29, r1
    404e:	0f b6       	in	r0, 0x3f	; 63
    4050:	f8 94       	cli
    4052:	de bf       	out	0x3e, r29	; 62
    4054:	0f be       	out	0x3f, r0	; 63
    4056:	cd bf       	out	0x3d, r28	; 61
    4058:	ed 01       	movw	r28, r26
    405a:	08 95       	ret

0000405c <itoa>:
    405c:	fb 01       	movw	r30, r22
    405e:	9f 01       	movw	r18, r30
    4060:	e8 94       	clt
    4062:	42 30       	cpi	r20, 0x02	; 2
    4064:	c4 f0       	brlt	.+48     	; 0x4096 <itoa+0x3a>
    4066:	45 32       	cpi	r20, 0x25	; 37
    4068:	b4 f4       	brge	.+44     	; 0x4096 <itoa+0x3a>
    406a:	4a 30       	cpi	r20, 0x0A	; 10
    406c:	29 f4       	brne	.+10     	; 0x4078 <itoa+0x1c>
    406e:	97 fb       	bst	r25, 7
    4070:	1e f4       	brtc	.+6      	; 0x4078 <itoa+0x1c>
    4072:	90 95       	com	r25
    4074:	81 95       	neg	r24
    4076:	9f 4f       	sbci	r25, 0xFF	; 255
    4078:	64 2f       	mov	r22, r20
    407a:	77 27       	eor	r23, r23
    407c:	0e 94 5f 20 	call	0x40be	; 0x40be <__udivmodhi4>
    4080:	80 5d       	subi	r24, 0xD0	; 208
    4082:	8a 33       	cpi	r24, 0x3A	; 58
    4084:	0c f0       	brlt	.+2      	; 0x4088 <itoa+0x2c>
    4086:	89 5d       	subi	r24, 0xD9	; 217
    4088:	81 93       	st	Z+, r24
    408a:	cb 01       	movw	r24, r22
    408c:	00 97       	sbiw	r24, 0x00	; 0
    408e:	a1 f7       	brne	.-24     	; 0x4078 <itoa+0x1c>
    4090:	16 f4       	brtc	.+4      	; 0x4096 <itoa+0x3a>
    4092:	5d e2       	ldi	r21, 0x2D	; 45
    4094:	51 93       	st	Z+, r21
    4096:	10 82       	st	Z, r1
    4098:	c9 01       	movw	r24, r18
    409a:	0c 94 4f 20 	jmp	0x409e	; 0x409e <strrev>

0000409e <strrev>:
    409e:	dc 01       	movw	r26, r24
    40a0:	fc 01       	movw	r30, r24
    40a2:	67 2f       	mov	r22, r23
    40a4:	71 91       	ld	r23, Z+
    40a6:	77 23       	and	r23, r23
    40a8:	e1 f7       	brne	.-8      	; 0x40a2 <strrev+0x4>
    40aa:	32 97       	sbiw	r30, 0x02	; 2
    40ac:	04 c0       	rjmp	.+8      	; 0x40b6 <strrev+0x18>
    40ae:	7c 91       	ld	r23, X
    40b0:	6d 93       	st	X+, r22
    40b2:	70 83       	st	Z, r23
    40b4:	62 91       	ld	r22, -Z
    40b6:	ae 17       	cp	r26, r30
    40b8:	bf 07       	cpc	r27, r31
    40ba:	c8 f3       	brcs	.-14     	; 0x40ae <strrev+0x10>
    40bc:	08 95       	ret

000040be <__udivmodhi4>:
    40be:	aa 1b       	sub	r26, r26
    40c0:	bb 1b       	sub	r27, r27
    40c2:	51 e1       	ldi	r21, 0x11	; 17
    40c4:	07 c0       	rjmp	.+14     	; 0x40d4 <__udivmodhi4_ep>

000040c6 <__udivmodhi4_loop>:
    40c6:	aa 1f       	adc	r26, r26
    40c8:	bb 1f       	adc	r27, r27
    40ca:	a6 17       	cp	r26, r22
    40cc:	b7 07       	cpc	r27, r23
    40ce:	10 f0       	brcs	.+4      	; 0x40d4 <__udivmodhi4_ep>
    40d0:	a6 1b       	sub	r26, r22
    40d2:	b7 0b       	sbc	r27, r23

000040d4 <__udivmodhi4_ep>:
    40d4:	88 1f       	adc	r24, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	5a 95       	dec	r21
    40da:	a9 f7       	brne	.-22     	; 0x40c6 <__udivmodhi4_loop>
    40dc:	80 95       	com	r24
    40de:	90 95       	com	r25
    40e0:	bc 01       	movw	r22, r24
    40e2:	cd 01       	movw	r24, r26
    40e4:	08 95       	ret

000040e6 <_exit>:
    40e6:	f8 94       	cli

000040e8 <__stop_program>:
    40e8:	ff cf       	rjmp	.-2      	; 0x40e8 <__stop_program>
