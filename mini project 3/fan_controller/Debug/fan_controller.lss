
fan_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00002440  000024d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080018e  0080018e  00002602  2**0
                  ALLOC
  3 .stab         00001e84  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e0c  00000000  00000000  00004488  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00005294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00005434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00005626  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007a31  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00008db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00009f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a150  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a446  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e4       	ldi	r30, 0x40	; 64
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6b 07 	call	0xed6	; 0xed6 <main>
      8a:	0c 94 1e 12 	jmp	0x243c	; 0x243c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e8       	ldi	r26, 0x83	; 131
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a2 11 	jmp	0x2344	; 0x2344 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e8       	ldi	r24, 0x83	; 131
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 be 11 	jmp	0x237c	; 0x237c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e8       	ldi	r22, 0x83	; 131
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ae 11 	jmp	0x235c	; 0x235c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b2 11 	jmp	0x2364	; 0x2364 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ce 11 	jmp	0x239c	; 0x239c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c6 11 	jmp	0x238c	; 0x238c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 57       	subi	r30, 0x75	; 117
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_init>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <ADC_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	9a 83       	std	Y+2, r25	; 0x02
     e3a:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = ((Config_Ptr->ref_volt)<<6);
     e3c:	a7 e2       	ldi	r26, 0x27	; 39
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	e9 81       	ldd	r30, Y+1	; 0x01
     e42:	fa 81       	ldd	r31, Y+2	; 0x02
     e44:	80 81       	ld	r24, Z
     e46:	82 95       	swap	r24
     e48:	88 0f       	add	r24, r24
     e4a:	88 0f       	add	r24, r24
     e4c:	80 7c       	andi	r24, 0xC0	; 192
     e4e:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (Config_Ptr->prescaler);
     e50:	a6 e2       	ldi	r26, 0x26	; 38
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e9 81       	ldd	r30, Y+1	; 0x01
     e56:	fa 81       	ldd	r31, Y+2	; 0x02
     e58:	81 81       	ldd	r24, Z+1	; 0x01
     e5a:	80 68       	ori	r24, 0x80	; 128
     e5c:	8c 93       	st	X, r24
}
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	0f 92       	push	r0
     e6e:	cd b7       	in	r28, 0x3d	; 61
     e70:	de b7       	in	r29, 0x3e	; 62
     e72:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
     e74:	89 81       	ldd	r24, Y+1	; 0x01
     e76:	87 70       	andi	r24, 0x07	; 7
     e78:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
     e7a:	a7 e2       	ldi	r26, 0x27	; 39
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e7 e2       	ldi	r30, 0x27	; 39
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 7e       	andi	r24, 0xE0	; 224
     e86:	8c 93       	st	X, r24
	ADMUX = ADMUX | channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
     e88:	a7 e2       	ldi	r26, 0x27	; 39
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	e7 e2       	ldi	r30, 0x27	; 39
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	90 81       	ld	r25, Z
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	89 2b       	or	r24, r25
     e96:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 64       	ori	r24, 0x40	; 64
     ea4:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
     ea6:	e6 e2       	ldi	r30, 0x26	; 38
     ea8:	f0 e0       	ldi	r31, 0x00	; 0
     eaa:	80 81       	ld	r24, Z
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	80 71       	andi	r24, 0x10	; 16
     eb2:	90 70       	andi	r25, 0x00	; 0
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	b9 f3       	breq	.-18     	; 0xea6 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
     eb8:	a6 e2       	ldi	r26, 0x26	; 38
     eba:	b0 e0       	ldi	r27, 0x00	; 0
     ebc:	e6 e2       	ldi	r30, 0x26	; 38
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	80 81       	ld	r24, Z
     ec2:	80 61       	ori	r24, 0x10	; 16
     ec4:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
     ec6:	e4 e2       	ldi	r30, 0x24	; 36
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	80 81       	ld	r24, Z
     ecc:	91 81       	ldd	r25, Z+1	; 0x01
}
     ece:	0f 90       	pop	r0
     ed0:	cf 91       	pop	r28
     ed2:	df 91       	pop	r29
     ed4:	08 95       	ret

00000ed6 <main>:

uint8 g_roomtemp=0;
ADC_ConfigType  ADC_Configrations={F_CPU_8,Internal_reference_voltage_256mV};


int main(void){
     ed6:	df 93       	push	r29
     ed8:	cf 93       	push	r28
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
     ede:	0e 94 a0 0b 	call	0x1740	; 0x1740 <LCD_init>
	DcMotor_Init();
     ee2:	0e 94 10 11 	call	0x2220	; 0x2220 <DcMotor_Init>
	ADC_init(&ADC_Configrations);
     ee6:	8b e8       	ldi	r24, 0x8B	; 139
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_init>



	while(1){
		g_roomtemp=LM35_getTemperature();
     eee:	0e 94 cb 10 	call	0x2196	; 0x2196 <LM35_getTemperature>
     ef2:	80 93 8e 01 	sts	0x018E, r24

		if(g_roomtemp<30)
     ef6:	80 91 8e 01 	lds	r24, 0x018E
     efa:	8e 31       	cpi	r24, 0x1E	; 30
     efc:	18 f5       	brcc	.+70     	; 0xf44 <main+0x6e>
		{
			DcMotor_Rotate(STOP,0);
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	0e 94 2b 11 	call	0x2256	; 0x2256 <DcMotor_Rotate>
				LCD_moveCursor(0,2);
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	62 e0       	ldi	r22, 0x02	; 2
     f0a:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
				LCD_displayString("FAN is= OFF");
     f0e:	80 e6       	ldi	r24, 0x60	; 96
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
				LCD_moveCursor(1,2);
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
				LCD_displayString("TEMP = ");
     f1e:	8c e6       	ldi	r24, 0x6C	; 108
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
				LCD_intgerToString(g_roomtemp);
     f26:	80 91 8e 01 	lds	r24, 0x018E
     f2a:	88 2f       	mov	r24, r24
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_intgerToString>
				LCD_displayString("C");
     f32:	84 e7       	ldi	r24, 0x74	; 116
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
				LCD_displayString(" ");
     f3a:	86 e7       	ldi	r24, 0x76	; 118
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
     f42:	d5 cf       	rjmp	.-86     	; 0xeee <main+0x18>
		}
		else if(g_roomtemp>=120)
     f44:	80 91 8e 01 	lds	r24, 0x018E
     f48:	88 37       	cpi	r24, 0x78	; 120
     f4a:	38 f1       	brcs	.+78     	; 0xf9a <main+0xc4>
		{
			DcMotor_Rotate(CW,255);
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	6f ef       	ldi	r22, 0xFF	; 255
     f50:	0e 94 2b 11 	call	0x2256	; 0x2256 <DcMotor_Rotate>
			LCD_moveCursor(0,2);
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	62 e0       	ldi	r22, 0x02	; 2
     f58:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("FAN is= ON");
     f5c:	88 e7       	ldi	r24, 0x78	; 120
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
     f64:	86 e7       	ldi	r24, 0x76	; 118
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_moveCursor(1,2);
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	62 e0       	ldi	r22, 0x02	; 2
     f70:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("TEMP = ");
     f74:	8c e6       	ldi	r24, 0x6C	; 108
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_intgerToString(g_roomtemp);
     f7c:	80 91 8e 01 	lds	r24, 0x018E
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_intgerToString>
			LCD_displayString("C");
     f88:	84 e7       	ldi	r24, 0x74	; 116
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
     f90:	86 e7       	ldi	r24, 0x76	; 118
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
     f98:	aa cf       	rjmp	.-172    	; 0xeee <main+0x18>
		}
		else if(g_roomtemp>=90)
     f9a:	80 91 8e 01 	lds	r24, 0x018E
     f9e:	8a 35       	cpi	r24, 0x5A	; 90
     fa0:	38 f1       	brcs	.+78     	; 0xff0 <main+0x11a>
		{
			DcMotor_Rotate(CW,192);
     fa2:	81 e0       	ldi	r24, 0x01	; 1
     fa4:	60 ec       	ldi	r22, 0xC0	; 192
     fa6:	0e 94 2b 11 	call	0x2256	; 0x2256 <DcMotor_Rotate>
			LCD_moveCursor(0,2);
     faa:	80 e0       	ldi	r24, 0x00	; 0
     fac:	62 e0       	ldi	r22, 0x02	; 2
     fae:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("FAN is= ON");
     fb2:	88 e7       	ldi	r24, 0x78	; 120
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
     fba:	86 e7       	ldi	r24, 0x76	; 118
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_moveCursor(1,2);
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	62 e0       	ldi	r22, 0x02	; 2
     fc6:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
		    LCD_displayString("TEMP = ");
     fca:	8c e6       	ldi	r24, 0x6C	; 108
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_intgerToString(g_roomtemp);
     fd2:	80 91 8e 01 	lds	r24, 0x018E
     fd6:	88 2f       	mov	r24, r24
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_intgerToString>
		    LCD_displayString("C");
     fde:	84 e7       	ldi	r24, 0x74	; 116
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
		    LCD_displayString(" ");
     fe6:	86 e7       	ldi	r24, 0x76	; 118
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
     fee:	7f cf       	rjmp	.-258    	; 0xeee <main+0x18>
		}
		else if(g_roomtemp>=60)
     ff0:	80 91 8e 01 	lds	r24, 0x018E
     ff4:	8c 33       	cpi	r24, 0x3C	; 60
     ff6:	38 f1       	brcs	.+78     	; 0x1046 <main+0x170>
		{
			DcMotor_Rotate(CW,128);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	60 e8       	ldi	r22, 0x80	; 128
     ffc:	0e 94 2b 11 	call	0x2256	; 0x2256 <DcMotor_Rotate>
			LCD_moveCursor(0,2);
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	62 e0       	ldi	r22, 0x02	; 2
    1004:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("FAN is= ON");
    1008:	88 e7       	ldi	r24, 0x78	; 120
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
    1010:	86 e7       	ldi	r24, 0x76	; 118
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_moveCursor(1,2);
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	62 e0       	ldi	r22, 0x02	; 2
    101c:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("TEMP = ");
    1020:	8c e6       	ldi	r24, 0x6C	; 108
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_intgerToString(g_roomtemp);
    1028:	80 91 8e 01 	lds	r24, 0x018E
    102c:	88 2f       	mov	r24, r24
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_intgerToString>
			LCD_displayString("C");
    1034:	84 e7       	ldi	r24, 0x74	; 116
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
    103c:	86 e7       	ldi	r24, 0x76	; 118
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
    1044:	54 cf       	rjmp	.-344    	; 0xeee <main+0x18>
		}
		else if(g_roomtemp>=30)
    1046:	80 91 8e 01 	lds	r24, 0x018E
    104a:	8e 31       	cpi	r24, 0x1E	; 30
    104c:	08 f4       	brcc	.+2      	; 0x1050 <main+0x17a>
    104e:	4f cf       	rjmp	.-354    	; 0xeee <main+0x18>
		{
			DcMotor_Rotate(CW,64);
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	60 e4       	ldi	r22, 0x40	; 64
    1054:	0e 94 2b 11 	call	0x2256	; 0x2256 <DcMotor_Rotate>
			LCD_moveCursor(0,2);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	62 e0       	ldi	r22, 0x02	; 2
    105c:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("FAN is= ON");
    1060:	88 e7       	ldi	r24, 0x78	; 120
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
    1068:	86 e7       	ldi	r24, 0x76	; 118
    106a:	90 e0       	ldi	r25, 0x00	; 0
    106c:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_moveCursor(1,2);
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	62 e0       	ldi	r22, 0x02	; 2
    1074:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
			LCD_displayString("TEMP = ");
    1078:	8c e6       	ldi	r24, 0x6C	; 108
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_intgerToString(g_roomtemp);
    1080:	80 91 8e 01 	lds	r24, 0x018E
    1084:	88 2f       	mov	r24, r24
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 9e 10 	call	0x213c	; 0x213c <LCD_intgerToString>
			LCD_displayString("C");
    108c:	84 e7       	ldi	r24, 0x74	; 116
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
			LCD_displayString(" ");
    1094:	86 e7       	ldi	r24, 0x76	; 118
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
    109c:	28 cf       	rjmp	.-432    	; 0xeee <main+0x18>

0000109e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    109e:	df 93       	push	r29
    10a0:	cf 93       	push	r28
    10a2:	00 d0       	rcall	.+0      	; 0x10a4 <GPIO_setupPinDirection+0x6>
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <GPIO_setupPinDirection+0x8>
    10a6:	0f 92       	push	r0
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	6a 83       	std	Y+2, r22	; 0x02
    10b0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10b2:	8a 81       	ldd	r24, Y+2	; 0x02
    10b4:	88 30       	cpi	r24, 0x08	; 8
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <GPIO_setupPinDirection+0x1c>
    10b8:	d5 c0       	rjmp	.+426    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	84 30       	cpi	r24, 0x04	; 4
    10be:	08 f0       	brcs	.+2      	; 0x10c2 <GPIO_setupPinDirection+0x24>
    10c0:	d1 c0       	rjmp	.+418    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	3d 83       	std	Y+5, r19	; 0x05
    10ca:	2c 83       	std	Y+4, r18	; 0x04
    10cc:	8c 81       	ldd	r24, Y+4	; 0x04
    10ce:	9d 81       	ldd	r25, Y+5	; 0x05
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	09 f4       	brne	.+2      	; 0x10d8 <GPIO_setupPinDirection+0x3a>
    10d6:	43 c0       	rjmp	.+134    	; 0x115e <GPIO_setupPinDirection+0xc0>
    10d8:	2c 81       	ldd	r18, Y+4	; 0x04
    10da:	3d 81       	ldd	r19, Y+5	; 0x05
    10dc:	22 30       	cpi	r18, 0x02	; 2
    10de:	31 05       	cpc	r19, r1
    10e0:	2c f4       	brge	.+10     	; 0x10ec <GPIO_setupPinDirection+0x4e>
    10e2:	8c 81       	ldd	r24, Y+4	; 0x04
    10e4:	9d 81       	ldd	r25, Y+5	; 0x05
    10e6:	00 97       	sbiw	r24, 0x00	; 0
    10e8:	71 f0       	breq	.+28     	; 0x1106 <GPIO_setupPinDirection+0x68>
    10ea:	bc c0       	rjmp	.+376    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
    10ec:	2c 81       	ldd	r18, Y+4	; 0x04
    10ee:	3d 81       	ldd	r19, Y+5	; 0x05
    10f0:	22 30       	cpi	r18, 0x02	; 2
    10f2:	31 05       	cpc	r19, r1
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <GPIO_setupPinDirection+0x5a>
    10f6:	5f c0       	rjmp	.+190    	; 0x11b6 <GPIO_setupPinDirection+0x118>
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <GPIO_setupPinDirection+0x66>
    1102:	85 c0       	rjmp	.+266    	; 0x120e <GPIO_setupPinDirection+0x170>
    1104:	af c0       	rjmp	.+350    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	a1 f4       	brne	.+40     	; 0x1134 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    110c:	aa e3       	ldi	r26, 0x3A	; 58
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	ea e3       	ldi	r30, 0x3A	; 58
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <GPIO_setupPinDirection+0x8c>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <GPIO_setupPinDirection+0x88>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	98 c0       	rjmp	.+304    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1134:	aa e3       	ldi	r26, 0x3A	; 58
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ea e3       	ldi	r30, 0x3A	; 58
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_setupPinDirection+0xb4>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_setupPinDirection+0xb0>
    1156:	80 95       	com	r24
    1158:	84 23       	and	r24, r20
    115a:	8c 93       	st	X, r24
    115c:	83 c0       	rjmp	.+262    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    115e:	8b 81       	ldd	r24, Y+3	; 0x03
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	a1 f4       	brne	.+40     	; 0x118c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1164:	a7 e3       	ldi	r26, 0x37	; 55
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e7 e3       	ldi	r30, 0x37	; 55
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	80 81       	ld	r24, Z
    116e:	48 2f       	mov	r20, r24
    1170:	8a 81       	ldd	r24, Y+2	; 0x02
    1172:	28 2f       	mov	r18, r24
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	02 2e       	mov	r0, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_setupPinDirection+0xe4>
    117e:	88 0f       	add	r24, r24
    1180:	99 1f       	adc	r25, r25
    1182:	0a 94       	dec	r0
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_setupPinDirection+0xe0>
    1186:	84 2b       	or	r24, r20
    1188:	8c 93       	st	X, r24
    118a:	6c c0       	rjmp	.+216    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    118c:	a7 e3       	ldi	r26, 0x37	; 55
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	e7 e3       	ldi	r30, 0x37	; 55
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	48 2f       	mov	r20, r24
    1198:	8a 81       	ldd	r24, Y+2	; 0x02
    119a:	28 2f       	mov	r18, r24
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	81 e0       	ldi	r24, 0x01	; 1
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	02 2e       	mov	r0, r18
    11a4:	02 c0       	rjmp	.+4      	; 0x11aa <GPIO_setupPinDirection+0x10c>
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	0a 94       	dec	r0
    11ac:	e2 f7       	brpl	.-8      	; 0x11a6 <GPIO_setupPinDirection+0x108>
    11ae:	80 95       	com	r24
    11b0:	84 23       	and	r24, r20
    11b2:	8c 93       	st	X, r24
    11b4:	57 c0       	rjmp	.+174    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a1 f4       	brne	.+40     	; 0x11e4 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11bc:	a4 e3       	ldi	r26, 0x34	; 52
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e4 e3       	ldi	r30, 0x34	; 52
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	48 2f       	mov	r20, r24
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	81 e0       	ldi	r24, 0x01	; 1
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	02 2e       	mov	r0, r18
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <GPIO_setupPinDirection+0x13c>
    11d6:	88 0f       	add	r24, r24
    11d8:	99 1f       	adc	r25, r25
    11da:	0a 94       	dec	r0
    11dc:	e2 f7       	brpl	.-8      	; 0x11d6 <GPIO_setupPinDirection+0x138>
    11de:	84 2b       	or	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	40 c0       	rjmp	.+128    	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    11e4:	a4 e3       	ldi	r26, 0x34	; 52
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e4 e3       	ldi	r30, 0x34	; 52
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	48 2f       	mov	r20, r24
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	02 2e       	mov	r0, r18
    11fc:	02 c0       	rjmp	.+4      	; 0x1202 <GPIO_setupPinDirection+0x164>
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	0a 94       	dec	r0
    1204:	e2 f7       	brpl	.-8      	; 0x11fe <GPIO_setupPinDirection+0x160>
    1206:	80 95       	com	r24
    1208:	84 23       	and	r24, r20
    120a:	8c 93       	st	X, r24
    120c:	2b c0       	rjmp	.+86     	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	81 30       	cpi	r24, 0x01	; 1
    1212:	a1 f4       	brne	.+40     	; 0x123c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1214:	a1 e3       	ldi	r26, 0x31	; 49
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	e1 e3       	ldi	r30, 0x31	; 49
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	48 2f       	mov	r20, r24
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	28 2f       	mov	r18, r24
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	02 2e       	mov	r0, r18
    122c:	02 c0       	rjmp	.+4      	; 0x1232 <GPIO_setupPinDirection+0x194>
    122e:	88 0f       	add	r24, r24
    1230:	99 1f       	adc	r25, r25
    1232:	0a 94       	dec	r0
    1234:	e2 f7       	brpl	.-8      	; 0x122e <GPIO_setupPinDirection+0x190>
    1236:	84 2b       	or	r24, r20
    1238:	8c 93       	st	X, r24
    123a:	14 c0       	rjmp	.+40     	; 0x1264 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    123c:	a1 e3       	ldi	r26, 0x31	; 49
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	e1 e3       	ldi	r30, 0x31	; 49
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8a 81       	ldd	r24, Y+2	; 0x02
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 2e       	mov	r0, r18
    1254:	02 c0       	rjmp	.+4      	; 0x125a <GPIO_setupPinDirection+0x1bc>
    1256:	88 0f       	add	r24, r24
    1258:	99 1f       	adc	r25, r25
    125a:	0a 94       	dec	r0
    125c:	e2 f7       	brpl	.-8      	; 0x1256 <GPIO_setupPinDirection+0x1b8>
    125e:	80 95       	com	r24
    1260:	84 23       	and	r24, r20
    1262:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1264:	0f 90       	pop	r0
    1266:	0f 90       	pop	r0
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	cf 91       	pop	r28
    1270:	df 91       	pop	r29
    1272:	08 95       	ret

00001274 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1274:	df 93       	push	r29
    1276:	cf 93       	push	r28
    1278:	00 d0       	rcall	.+0      	; 0x127a <GPIO_writePin+0x6>
    127a:	00 d0       	rcall	.+0      	; 0x127c <GPIO_writePin+0x8>
    127c:	0f 92       	push	r0
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	6a 83       	std	Y+2, r22	; 0x02
    1286:	4b 83       	std	Y+3, r20	; 0x03
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1288:	8a 81       	ldd	r24, Y+2	; 0x02
    128a:	88 30       	cpi	r24, 0x08	; 8
    128c:	08 f0       	brcs	.+2      	; 0x1290 <GPIO_writePin+0x1c>
    128e:	e4 c0       	rjmp	.+456    	; 0x1458 <GPIO_writePin+0x1e4>
    1290:	89 81       	ldd	r24, Y+1	; 0x01
    1292:	84 30       	cpi	r24, 0x04	; 4
    1294:	08 f0       	brcs	.+2      	; 0x1298 <GPIO_writePin+0x24>
    1296:	e0 c0       	rjmp	.+448    	; 0x1458 <GPIO_writePin+0x1e4>
		/* Do Nothing */
	}
	else
	{
		/* write pin as required */
		switch(port_num)
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	28 2f       	mov	r18, r24
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	3d 83       	std	Y+5, r19	; 0x05
    12a0:	2c 83       	std	Y+4, r18	; 0x04
    12a2:	8c 81       	ldd	r24, Y+4	; 0x04
    12a4:	9d 81       	ldd	r25, Y+5	; 0x05
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	91 05       	cpc	r25, r1
    12aa:	09 f4       	brne	.+2      	; 0x12ae <GPIO_writePin+0x3a>
    12ac:	47 c0       	rjmp	.+142    	; 0x133c <GPIO_writePin+0xc8>
    12ae:	2c 81       	ldd	r18, Y+4	; 0x04
    12b0:	3d 81       	ldd	r19, Y+5	; 0x05
    12b2:	22 30       	cpi	r18, 0x02	; 2
    12b4:	31 05       	cpc	r19, r1
    12b6:	2c f4       	brge	.+10     	; 0x12c2 <GPIO_writePin+0x4e>
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	71 f0       	breq	.+28     	; 0x12dc <GPIO_writePin+0x68>
    12c0:	cb c0       	rjmp	.+406    	; 0x1458 <GPIO_writePin+0x1e4>
    12c2:	2c 81       	ldd	r18, Y+4	; 0x04
    12c4:	3d 81       	ldd	r19, Y+5	; 0x05
    12c6:	22 30       	cpi	r18, 0x02	; 2
    12c8:	31 05       	cpc	r19, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <GPIO_writePin+0x5a>
    12cc:	67 c0       	rjmp	.+206    	; 0x139c <GPIO_writePin+0x128>
    12ce:	8c 81       	ldd	r24, Y+4	; 0x04
    12d0:	9d 81       	ldd	r25, Y+5	; 0x05
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	09 f4       	brne	.+2      	; 0x12da <GPIO_writePin+0x66>
    12d8:	91 c0       	rjmp	.+290    	; 0x13fc <GPIO_writePin+0x188>
    12da:	be c0       	rjmp	.+380    	; 0x1458 <GPIO_writePin+0x1e4>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH )
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	81 30       	cpi	r24, 0x01	; 1
    12e0:	a1 f4       	brne	.+40     	; 0x130a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    12e2:	ab e3       	ldi	r26, 0x3B	; 59
    12e4:	b0 e0       	ldi	r27, 0x00	; 0
    12e6:	eb e3       	ldi	r30, 0x3B	; 59
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	48 2f       	mov	r20, r24
    12ee:	8a 81       	ldd	r24, Y+2	; 0x02
    12f0:	28 2f       	mov	r18, r24
    12f2:	30 e0       	ldi	r19, 0x00	; 0
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	02 2e       	mov	r0, r18
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <GPIO_writePin+0x8c>
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	0a 94       	dec	r0
    1302:	e2 f7       	brpl	.-8      	; 0x12fc <GPIO_writePin+0x88>
    1304:	84 2b       	or	r24, r20
    1306:	8c 93       	st	X, r24
    1308:	a7 c0       	rjmp	.+334    	; 0x1458 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	88 23       	and	r24, r24
    130e:	09 f0       	breq	.+2      	; 0x1312 <GPIO_writePin+0x9e>
    1310:	a3 c0       	rjmp	.+326    	; 0x1458 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTA,pin_num);
    1312:	ab e3       	ldi	r26, 0x3B	; 59
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	eb e3       	ldi	r30, 0x3B	; 59
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <GPIO_writePin+0xbc>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <GPIO_writePin+0xb8>
    1334:	80 95       	com	r24
    1336:	84 23       	and	r24, r20
    1338:	8c 93       	st	X, r24
    133a:	8e c0       	rjmp	.+284    	; 0x1458 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH )
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	81 30       	cpi	r24, 0x01	; 1
    1340:	a1 f4       	brne	.+40     	; 0x136a <GPIO_writePin+0xf6>
			{
				SET_BIT(PORTB,pin_num);
    1342:	a8 e3       	ldi	r26, 0x38	; 56
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e8 e3       	ldi	r30, 0x38	; 56
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	48 2f       	mov	r20, r24
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	28 2f       	mov	r18, r24
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	02 2e       	mov	r0, r18
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <GPIO_writePin+0xec>
    135c:	88 0f       	add	r24, r24
    135e:	99 1f       	adc	r25, r25
    1360:	0a 94       	dec	r0
    1362:	e2 f7       	brpl	.-8      	; 0x135c <GPIO_writePin+0xe8>
    1364:	84 2b       	or	r24, r20
    1366:	8c 93       	st	X, r24
    1368:	77 c0       	rjmp	.+238    	; 0x1458 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	88 23       	and	r24, r24
    136e:	09 f0       	breq	.+2      	; 0x1372 <GPIO_writePin+0xfe>
    1370:	73 c0       	rjmp	.+230    	; 0x1458 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTB,pin_num);
    1372:	a8 e3       	ldi	r26, 0x38	; 56
    1374:	b0 e0       	ldi	r27, 0x00	; 0
    1376:	e8 e3       	ldi	r30, 0x38	; 56
    1378:	f0 e0       	ldi	r31, 0x00	; 0
    137a:	80 81       	ld	r24, Z
    137c:	48 2f       	mov	r20, r24
    137e:	8a 81       	ldd	r24, Y+2	; 0x02
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	02 2e       	mov	r0, r18
    138a:	02 c0       	rjmp	.+4      	; 0x1390 <GPIO_writePin+0x11c>
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	0a 94       	dec	r0
    1392:	e2 f7       	brpl	.-8      	; 0x138c <GPIO_writePin+0x118>
    1394:	80 95       	com	r24
    1396:	84 23       	and	r24, r20
    1398:	8c 93       	st	X, r24
    139a:	5e c0       	rjmp	.+188    	; 0x1458 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH )
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	a1 f4       	brne	.+40     	; 0x13ca <GPIO_writePin+0x156>
			{
				SET_BIT(PORTC,pin_num);
    13a2:	a5 e3       	ldi	r26, 0x35	; 53
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	e5 e3       	ldi	r30, 0x35	; 53
    13a8:	f0 e0       	ldi	r31, 0x00	; 0
    13aa:	80 81       	ld	r24, Z
    13ac:	48 2f       	mov	r20, r24
    13ae:	8a 81       	ldd	r24, Y+2	; 0x02
    13b0:	28 2f       	mov	r18, r24
    13b2:	30 e0       	ldi	r19, 0x00	; 0
    13b4:	81 e0       	ldi	r24, 0x01	; 1
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	02 2e       	mov	r0, r18
    13ba:	02 c0       	rjmp	.+4      	; 0x13c0 <GPIO_writePin+0x14c>
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	0a 94       	dec	r0
    13c2:	e2 f7       	brpl	.-8      	; 0x13bc <GPIO_writePin+0x148>
    13c4:	84 2b       	or	r24, r20
    13c6:	8c 93       	st	X, r24
    13c8:	47 c0       	rjmp	.+142    	; 0x1458 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	88 23       	and	r24, r24
    13ce:	09 f0       	breq	.+2      	; 0x13d2 <GPIO_writePin+0x15e>
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTC,pin_num);
    13d2:	a5 e3       	ldi	r26, 0x35	; 53
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e5 e3       	ldi	r30, 0x35	; 53
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <GPIO_writePin+0x17c>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <GPIO_writePin+0x178>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	2e c0       	rjmp	.+92     	; 0x1458 <GPIO_writePin+0x1e4>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH )
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	81 30       	cpi	r24, 0x01	; 1
    1400:	a1 f4       	brne	.+40     	; 0x142a <GPIO_writePin+0x1b6>
			{
				SET_BIT(PORTD,pin_num);
    1402:	a2 e3       	ldi	r26, 0x32	; 50
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e2 e3       	ldi	r30, 0x32	; 50
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	48 2f       	mov	r20, r24
    140e:	8a 81       	ldd	r24, Y+2	; 0x02
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	02 2e       	mov	r0, r18
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <GPIO_writePin+0x1ac>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	0a 94       	dec	r0
    1422:	e2 f7       	brpl	.-8      	; 0x141c <GPIO_writePin+0x1a8>
    1424:	84 2b       	or	r24, r20
    1426:	8c 93       	st	X, r24
    1428:	17 c0       	rjmp	.+46     	; 0x1458 <GPIO_writePin+0x1e4>
			}
			else if(value == LOGIC_LOW)
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	88 23       	and	r24, r24
    142e:	a1 f4       	brne	.+40     	; 0x1458 <GPIO_writePin+0x1e4>
			{
				CLEAR_BIT(PORTD,pin_num);
    1430:	a2 e3       	ldi	r26, 0x32	; 50
    1432:	b0 e0       	ldi	r27, 0x00	; 0
    1434:	e2 e3       	ldi	r30, 0x32	; 50
    1436:	f0 e0       	ldi	r31, 0x00	; 0
    1438:	80 81       	ld	r24, Z
    143a:	48 2f       	mov	r20, r24
    143c:	8a 81       	ldd	r24, Y+2	; 0x02
    143e:	28 2f       	mov	r18, r24
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 2e       	mov	r0, r18
    1448:	02 c0       	rjmp	.+4      	; 0x144e <GPIO_writePin+0x1da>
    144a:	88 0f       	add	r24, r24
    144c:	99 1f       	adc	r25, r25
    144e:	0a 94       	dec	r0
    1450:	e2 f7       	brpl	.-8      	; 0x144a <GPIO_writePin+0x1d6>
    1452:	80 95       	com	r24
    1454:	84 23       	and	r24, r20
    1456:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	00 d0       	rcall	.+0      	; 0x146e <GPIO_readPin+0x6>
    146e:	00 d0       	rcall	.+0      	; 0x1470 <GPIO_readPin+0x8>
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	89 83       	std	Y+1, r24	; 0x01
    1478:	6a 83       	std	Y+2, r22	; 0x02
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    147a:	8a 81       	ldd	r24, Y+2	; 0x02
    147c:	88 30       	cpi	r24, 0x08	; 8
    147e:	18 f4       	brcc	.+6      	; 0x1486 <GPIO_readPin+0x1e>
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	84 30       	cpi	r24, 0x04	; 4
    1484:	10 f0       	brcs	.+4      	; 0x148a <GPIO_readPin+0x22>
	{
		/* Do Nothing */
		return LOGIC_LOW;
    1486:	1d 82       	std	Y+5, r1	; 0x05
    1488:	82 c0       	rjmp	.+260    	; 0x158e <GPIO_readPin+0x126>
	}
	else
	{
		/* read pin as required */
		switch(port_num)
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	3c 83       	std	Y+4, r19	; 0x04
    1492:	2b 83       	std	Y+3, r18	; 0x03
    1494:	4b 81       	ldd	r20, Y+3	; 0x03
    1496:	5c 81       	ldd	r21, Y+4	; 0x04
    1498:	41 30       	cpi	r20, 0x01	; 1
    149a:	51 05       	cpc	r21, r1
    149c:	79 f1       	breq	.+94     	; 0x14fc <GPIO_readPin+0x94>
    149e:	8b 81       	ldd	r24, Y+3	; 0x03
    14a0:	9c 81       	ldd	r25, Y+4	; 0x04
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	91 05       	cpc	r25, r1
    14a6:	34 f4       	brge	.+12     	; 0x14b4 <GPIO_readPin+0x4c>
    14a8:	2b 81       	ldd	r18, Y+3	; 0x03
    14aa:	3c 81       	ldd	r19, Y+4	; 0x04
    14ac:	21 15       	cp	r18, r1
    14ae:	31 05       	cpc	r19, r1
    14b0:	69 f0       	breq	.+26     	; 0x14cc <GPIO_readPin+0x64>
    14b2:	6c c0       	rjmp	.+216    	; 0x158c <GPIO_readPin+0x124>
    14b4:	4b 81       	ldd	r20, Y+3	; 0x03
    14b6:	5c 81       	ldd	r21, Y+4	; 0x04
    14b8:	42 30       	cpi	r20, 0x02	; 2
    14ba:	51 05       	cpc	r21, r1
    14bc:	b9 f1       	breq	.+110    	; 0x152c <GPIO_readPin+0xc4>
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	83 30       	cpi	r24, 0x03	; 3
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <GPIO_readPin+0x62>
    14c8:	49 c0       	rjmp	.+146    	; 0x155c <GPIO_readPin+0xf4>
    14ca:	60 c0       	rjmp	.+192    	; 0x158c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num) )
    14cc:	e9 e3       	ldi	r30, 0x39	; 57
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	8a 81       	ldd	r24, Y+2	; 0x02
    14d8:	88 2f       	mov	r24, r24
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	a9 01       	movw	r20, r18
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <GPIO_readPin+0x7c>
    14e0:	55 95       	asr	r21
    14e2:	47 95       	ror	r20
    14e4:	8a 95       	dec	r24
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <GPIO_readPin+0x78>
    14e8:	ca 01       	movw	r24, r20
    14ea:	81 70       	andi	r24, 0x01	; 1
    14ec:	90 70       	andi	r25, 0x00	; 0
    14ee:	88 23       	and	r24, r24
    14f0:	19 f0       	breq	.+6      	; 0x14f8 <GPIO_readPin+0x90>
			{
				return LOGIC_HIGH;
    14f2:	51 e0       	ldi	r21, 0x01	; 1
    14f4:	5d 83       	std	Y+5, r21	; 0x05
    14f6:	4b c0       	rjmp	.+150    	; 0x158e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    14f8:	1d 82       	std	Y+5, r1	; 0x05
    14fa:	49 c0       	rjmp	.+146    	; 0x158e <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num) )
    14fc:	e6 e3       	ldi	r30, 0x36	; 54
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	88 2f       	mov	r24, r24
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	a9 01       	movw	r20, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_readPin+0xac>
    1510:	55 95       	asr	r21
    1512:	47 95       	ror	r20
    1514:	8a 95       	dec	r24
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_readPin+0xa8>
    1518:	ca 01       	movw	r24, r20
    151a:	81 70       	andi	r24, 0x01	; 1
    151c:	90 70       	andi	r25, 0x00	; 0
    151e:	88 23       	and	r24, r24
    1520:	19 f0       	breq	.+6      	; 0x1528 <GPIO_readPin+0xc0>
			{
				return LOGIC_HIGH;
    1522:	51 e0       	ldi	r21, 0x01	; 1
    1524:	5d 83       	std	Y+5, r21	; 0x05
    1526:	33 c0       	rjmp	.+102    	; 0x158e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1528:	1d 82       	std	Y+5, r1	; 0x05
    152a:	31 c0       	rjmp	.+98     	; 0x158e <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num) )
    152c:	e3 e3       	ldi	r30, 0x33	; 51
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_readPin+0xdc>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_readPin+0xd8>
    1548:	ca 01       	movw	r24, r20
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	90 70       	andi	r25, 0x00	; 0
    154e:	88 23       	and	r24, r24
    1550:	19 f0       	breq	.+6      	; 0x1558 <GPIO_readPin+0xf0>
			{
				return LOGIC_HIGH;
    1552:	51 e0       	ldi	r21, 0x01	; 1
    1554:	5d 83       	std	Y+5, r21	; 0x05
    1556:	1b c0       	rjmp	.+54     	; 0x158e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1558:	1d 82       	std	Y+5, r1	; 0x05
    155a:	19 c0       	rjmp	.+50     	; 0x158e <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num) )
    155c:	e0 e3       	ldi	r30, 0x30	; 48
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	80 81       	ld	r24, Z
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	8a 81       	ldd	r24, Y+2	; 0x02
    1568:	88 2f       	mov	r24, r24
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	a9 01       	movw	r20, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_readPin+0x10c>
    1570:	55 95       	asr	r21
    1572:	47 95       	ror	r20
    1574:	8a 95       	dec	r24
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_readPin+0x108>
    1578:	ca 01       	movw	r24, r20
    157a:	81 70       	andi	r24, 0x01	; 1
    157c:	90 70       	andi	r25, 0x00	; 0
    157e:	88 23       	and	r24, r24
    1580:	19 f0       	breq	.+6      	; 0x1588 <GPIO_readPin+0x120>
			{
				return LOGIC_HIGH;
    1582:	51 e0       	ldi	r21, 0x01	; 1
    1584:	5d 83       	std	Y+5, r21	; 0x05
    1586:	03 c0       	rjmp	.+6      	; 0x158e <GPIO_readPin+0x126>
			}
			else
			{
				return LOGIC_LOW;
    1588:	1d 82       	std	Y+5, r1	; 0x05
    158a:	01 c0       	rjmp	.+2      	; 0x158e <GPIO_readPin+0x126>
			}
			break;
		}
		return LOGIC_LOW;
    158c:	1d 82       	std	Y+5, r1	; 0x05
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
	}

}
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	0f 90       	pop	r0
    1598:	0f 90       	pop	r0
    159a:	cf 91       	pop	r28
    159c:	df 91       	pop	r29
    159e:	08 95       	ret

000015a0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15a0:	df 93       	push	r29
    15a2:	cf 93       	push	r28
    15a4:	00 d0       	rcall	.+0      	; 0x15a6 <GPIO_setupPortDirection+0x6>
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <GPIO_setupPortDirection+0x8>
    15a8:	cd b7       	in	r28, 0x3d	; 61
    15aa:	de b7       	in	r29, 0x3e	; 62
    15ac:	89 83       	std	Y+1, r24	; 0x01
    15ae:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	90 f5       	brcc	.+100    	; 0x161a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15b6:	89 81       	ldd	r24, Y+1	; 0x01
    15b8:	28 2f       	mov	r18, r24
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	3c 83       	std	Y+4, r19	; 0x04
    15be:	2b 83       	std	Y+3, r18	; 0x03
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	91 05       	cpc	r25, r1
    15c8:	d1 f0       	breq	.+52     	; 0x15fe <GPIO_setupPortDirection+0x5e>
    15ca:	2b 81       	ldd	r18, Y+3	; 0x03
    15cc:	3c 81       	ldd	r19, Y+4	; 0x04
    15ce:	22 30       	cpi	r18, 0x02	; 2
    15d0:	31 05       	cpc	r19, r1
    15d2:	2c f4       	brge	.+10     	; 0x15de <GPIO_setupPortDirection+0x3e>
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	9c 81       	ldd	r25, Y+4	; 0x04
    15d8:	00 97       	sbiw	r24, 0x00	; 0
    15da:	61 f0       	breq	.+24     	; 0x15f4 <GPIO_setupPortDirection+0x54>
    15dc:	1e c0       	rjmp	.+60     	; 0x161a <GPIO_setupPortDirection+0x7a>
    15de:	2b 81       	ldd	r18, Y+3	; 0x03
    15e0:	3c 81       	ldd	r19, Y+4	; 0x04
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	31 05       	cpc	r19, r1
    15e6:	81 f0       	breq	.+32     	; 0x1608 <GPIO_setupPortDirection+0x68>
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	81 f0       	breq	.+32     	; 0x1612 <GPIO_setupPortDirection+0x72>
    15f2:	13 c0       	rjmp	.+38     	; 0x161a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    15f4:	ea e3       	ldi	r30, 0x3A	; 58
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	80 83       	st	Z, r24
    15fc:	0e c0       	rjmp	.+28     	; 0x161a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    15fe:	e7 e3       	ldi	r30, 0x37	; 55
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	80 83       	st	Z, r24
    1606:	09 c0       	rjmp	.+18     	; 0x161a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1608:	e4 e3       	ldi	r30, 0x34	; 52
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	8a 81       	ldd	r24, Y+2	; 0x02
    160e:	80 83       	st	Z, r24
    1610:	04 c0       	rjmp	.+8      	; 0x161a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1612:	e1 e3       	ldi	r30, 0x31	; 49
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	8a 81       	ldd	r24, Y+2	; 0x02
    1618:	80 83       	st	Z, r24
			break;
		}
	}
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	0f 90       	pop	r0
    1622:	cf 91       	pop	r28
    1624:	df 91       	pop	r29
    1626:	08 95       	ret

00001628 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1628:	df 93       	push	r29
    162a:	cf 93       	push	r28
    162c:	00 d0       	rcall	.+0      	; 0x162e <GPIO_writePort+0x6>
    162e:	00 d0       	rcall	.+0      	; 0x1630 <GPIO_writePort+0x8>
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1638:	89 81       	ldd	r24, Y+1	; 0x01
    163a:	84 30       	cpi	r24, 0x04	; 4
    163c:	90 f5       	brcc	.+100    	; 0x16a2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* write the port value as required */
		switch(port_num)
    163e:	89 81       	ldd	r24, Y+1	; 0x01
    1640:	28 2f       	mov	r18, r24
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	3c 83       	std	Y+4, r19	; 0x04
    1646:	2b 83       	std	Y+3, r18	; 0x03
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	9c 81       	ldd	r25, Y+4	; 0x04
    164c:	81 30       	cpi	r24, 0x01	; 1
    164e:	91 05       	cpc	r25, r1
    1650:	d1 f0       	breq	.+52     	; 0x1686 <GPIO_writePort+0x5e>
    1652:	2b 81       	ldd	r18, Y+3	; 0x03
    1654:	3c 81       	ldd	r19, Y+4	; 0x04
    1656:	22 30       	cpi	r18, 0x02	; 2
    1658:	31 05       	cpc	r19, r1
    165a:	2c f4       	brge	.+10     	; 0x1666 <GPIO_writePort+0x3e>
    165c:	8b 81       	ldd	r24, Y+3	; 0x03
    165e:	9c 81       	ldd	r25, Y+4	; 0x04
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f0       	breq	.+24     	; 0x167c <GPIO_writePort+0x54>
    1664:	1e c0       	rjmp	.+60     	; 0x16a2 <GPIO_writePort+0x7a>
    1666:	2b 81       	ldd	r18, Y+3	; 0x03
    1668:	3c 81       	ldd	r19, Y+4	; 0x04
    166a:	22 30       	cpi	r18, 0x02	; 2
    166c:	31 05       	cpc	r19, r1
    166e:	81 f0       	breq	.+32     	; 0x1690 <GPIO_writePort+0x68>
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	83 30       	cpi	r24, 0x03	; 3
    1676:	91 05       	cpc	r25, r1
    1678:	81 f0       	breq	.+32     	; 0x169a <GPIO_writePort+0x72>
    167a:	13 c0       	rjmp	.+38     	; 0x16a2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    167c:	eb e3       	ldi	r30, 0x3B	; 59
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	80 83       	st	Z, r24
    1684:	0e c0       	rjmp	.+28     	; 0x16a2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1686:	e8 e3       	ldi	r30, 0x38	; 56
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	80 83       	st	Z, r24
    168e:	09 c0       	rjmp	.+18     	; 0x16a2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1690:	e5 e3       	ldi	r30, 0x35	; 53
    1692:	f0 e0       	ldi	r31, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	80 83       	st	Z, r24
    1698:	04 c0       	rjmp	.+8      	; 0x16a2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    169a:	e2 e3       	ldi	r30, 0x32	; 50
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	80 83       	st	Z, r24
			break;
		}
	}

}
    16a2:	0f 90       	pop	r0
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <GPIO_readPort+0x6>
    16b6:	00 d0       	rcall	.+0      	; 0x16b8 <GPIO_readPort+0x8>
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	89 83       	std	Y+1, r24	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16be:	89 81       	ldd	r24, Y+1	; 0x01
    16c0:	84 30       	cpi	r24, 0x04	; 4
    16c2:	10 f0       	brcs	.+4      	; 0x16c8 <GPIO_readPort+0x18>
	{
		/* Do Nothing */
		return LOGIC_LOW;
    16c4:	1c 82       	std	Y+4, r1	; 0x04
    16c6:	34 c0       	rjmp	.+104    	; 0x1730 <GPIO_readPort+0x80>
	}
	else
	{
		/* read the port value as required */
		switch(port_num)
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	3b 83       	std	Y+3, r19	; 0x03
    16d0:	2a 83       	std	Y+2, r18	; 0x02
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	9b 81       	ldd	r25, Y+3	; 0x03
    16d6:	81 30       	cpi	r24, 0x01	; 1
    16d8:	91 05       	cpc	r25, r1
    16da:	d1 f0       	breq	.+52     	; 0x1710 <GPIO_readPort+0x60>
    16dc:	2a 81       	ldd	r18, Y+2	; 0x02
    16de:	3b 81       	ldd	r19, Y+3	; 0x03
    16e0:	22 30       	cpi	r18, 0x02	; 2
    16e2:	31 05       	cpc	r19, r1
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <GPIO_readPort+0x40>
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	61 f0       	breq	.+24     	; 0x1706 <GPIO_readPort+0x56>
    16ee:	1f c0       	rjmp	.+62     	; 0x172e <GPIO_readPort+0x7e>
    16f0:	2a 81       	ldd	r18, Y+2	; 0x02
    16f2:	3b 81       	ldd	r19, Y+3	; 0x03
    16f4:	22 30       	cpi	r18, 0x02	; 2
    16f6:	31 05       	cpc	r19, r1
    16f8:	81 f0       	breq	.+32     	; 0x171a <GPIO_readPort+0x6a>
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	9b 81       	ldd	r25, Y+3	; 0x03
    16fe:	83 30       	cpi	r24, 0x03	; 3
    1700:	91 05       	cpc	r25, r1
    1702:	81 f0       	breq	.+32     	; 0x1724 <GPIO_readPort+0x74>
    1704:	14 c0       	rjmp	.+40     	; 0x172e <GPIO_readPort+0x7e>
		{
		case PORTA_ID:
			return PINA;
    1706:	e9 e3       	ldi	r30, 0x39	; 57
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	90 81       	ld	r25, Z
    170c:	9c 83       	std	Y+4, r25	; 0x04
    170e:	10 c0       	rjmp	.+32     	; 0x1730 <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			return PINB;
    1710:	e6 e3       	ldi	r30, 0x36	; 54
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	20 81       	ld	r18, Z
    1716:	2c 83       	std	Y+4, r18	; 0x04
    1718:	0b c0       	rjmp	.+22     	; 0x1730 <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			return PINC;
    171a:	e3 e3       	ldi	r30, 0x33	; 51
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	30 81       	ld	r19, Z
    1720:	3c 83       	std	Y+4, r19	; 0x04
    1722:	06 c0       	rjmp	.+12     	; 0x1730 <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			return PIND;
    1724:	e0 e3       	ldi	r30, 0x30	; 48
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8c 83       	std	Y+4, r24	; 0x04
    172c:	01 c0       	rjmp	.+2      	; 0x1730 <GPIO_readPort+0x80>
			break;
		}
		return LOGIC_LOW;
    172e:	1c 82       	std	Y+4, r1	; 0x04
    1730:	8c 81       	ldd	r24, Y+4	; 0x04
	}
}
    1732:	0f 90       	pop	r0
    1734:	0f 90       	pop	r0
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	cf 91       	pop	r28
    173c:	df 91       	pop	r29
    173e:	08 95       	ret

00001740 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1740:	df 93       	push	r29
    1742:	cf 93       	push	r28
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
    1748:	2e 97       	sbiw	r28, 0x0e	; 14
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	de bf       	out	0x3e, r29	; 62
    1750:	0f be       	out	0x3f, r0	; 63
    1752:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1754:	83 e0       	ldi	r24, 0x03	; 3
    1756:	60 e0       	ldi	r22, 0x00	; 0
    1758:	41 e0       	ldi	r20, 0x01	; 1
    175a:	0e 94 4f 08 	call	0x109e	; 0x109e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    175e:	83 e0       	ldi	r24, 0x03	; 3
    1760:	62 e0       	ldi	r22, 0x02	; 2
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 4f 08 	call	0x109e	; 0x109e <GPIO_setupPinDirection>
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 ea       	ldi	r26, 0xA0	; 160
    176e:	b1 e4       	ldi	r27, 0x41	; 65
    1770:	8b 87       	std	Y+11, r24	; 0x0b
    1772:	9c 87       	std	Y+12, r25	; 0x0c
    1774:	ad 87       	std	Y+13, r26	; 0x0d
    1776:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1778:	6b 85       	ldd	r22, Y+11	; 0x0b
    177a:	7c 85       	ldd	r23, Y+12	; 0x0c
    177c:	8d 85       	ldd	r24, Y+13	; 0x0d
    177e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a e7       	ldi	r20, 0x7A	; 122
    1786:	53 e4       	ldi	r21, 0x43	; 67
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	8f 83       	std	Y+7, r24	; 0x07
    1792:	98 87       	std	Y+8, r25	; 0x08
    1794:	a9 87       	std	Y+9, r26	; 0x09
    1796:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	40 e8       	ldi	r20, 0x80	; 128
    17a6:	5f e3       	ldi	r21, 0x3F	; 63
    17a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17ac:	88 23       	and	r24, r24
    17ae:	2c f4       	brge	.+10     	; 0x17ba <LCD_init+0x7a>
		__ticks = 1;
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	9e 83       	std	Y+6, r25	; 0x06
    17b6:	8d 83       	std	Y+5, r24	; 0x05
    17b8:	3f c0       	rjmp	.+126    	; 0x1838 <LCD_init+0xf8>
	else if (__tmp > 65535)
    17ba:	6f 81       	ldd	r22, Y+7	; 0x07
    17bc:	78 85       	ldd	r23, Y+8	; 0x08
    17be:	89 85       	ldd	r24, Y+9	; 0x09
    17c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	3f ef       	ldi	r19, 0xFF	; 255
    17c6:	4f e7       	ldi	r20, 0x7F	; 127
    17c8:	57 e4       	ldi	r21, 0x47	; 71
    17ca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17ce:	18 16       	cp	r1, r24
    17d0:	4c f5       	brge	.+82     	; 0x1824 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e0       	ldi	r19, 0x00	; 0
    17de:	40 e2       	ldi	r20, 0x20	; 32
    17e0:	51 e4       	ldi	r21, 0x41	; 65
    17e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e6:	dc 01       	movw	r26, r24
    17e8:	cb 01       	movw	r24, r22
    17ea:	bc 01       	movw	r22, r24
    17ec:	cd 01       	movw	r24, r26
    17ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	9e 83       	std	Y+6, r25	; 0x06
    17f8:	8d 83       	std	Y+5, r24	; 0x05
    17fa:	0f c0       	rjmp	.+30     	; 0x181a <LCD_init+0xda>
    17fc:	89 e1       	ldi	r24, 0x19	; 25
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	9c 81       	ldd	r25, Y+4	; 0x04
    1808:	01 97       	sbiw	r24, 0x01	; 1
    180a:	f1 f7       	brne	.-4      	; 0x1808 <LCD_init+0xc8>
    180c:	9c 83       	std	Y+4, r25	; 0x04
    180e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	9e 83       	std	Y+6, r25	; 0x06
    1818:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    181a:	8d 81       	ldd	r24, Y+5	; 0x05
    181c:	9e 81       	ldd	r25, Y+6	; 0x06
    181e:	00 97       	sbiw	r24, 0x00	; 0
    1820:	69 f7       	brne	.-38     	; 0x17fc <LCD_init+0xbc>
    1822:	14 c0       	rjmp	.+40     	; 0x184c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1824:	6f 81       	ldd	r22, Y+7	; 0x07
    1826:	78 85       	ldd	r23, Y+8	; 0x08
    1828:	89 85       	ldd	r24, Y+9	; 0x09
    182a:	9a 85       	ldd	r25, Y+10	; 0x0a
    182c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1830:	dc 01       	movw	r26, r24
    1832:	cb 01       	movw	r24, r22
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	8d 81       	ldd	r24, Y+5	; 0x05
    183a:	9e 81       	ldd	r25, Y+6	; 0x06
    183c:	9a 83       	std	Y+2, r25	; 0x02
    183e:	89 83       	std	Y+1, r24	; 0x01
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	9a 81       	ldd	r25, Y+2	; 0x02
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	f1 f7       	brne	.-4      	; 0x1844 <LCD_init+0x104>
    1848:	9a 83       	std	Y+2, r25	; 0x02
    184a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    184c:	82 e0       	ldi	r24, 0x02	; 2
    184e:	6f ef       	ldi	r22, 0xFF	; 255
    1850:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1854:	88 e3       	ldi	r24, 0x38	; 56
    1856:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    185a:	8c e0       	ldi	r24, 0x0C	; 12
    185c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1860:	81 e0       	ldi	r24, 0x01	; 1
    1862:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_sendCommand>
}
    1866:	2e 96       	adiw	r28, 0x0e	; 14
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	e9 97       	sbiw	r28, 0x39	; 57
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    188e:	83 e0       	ldi	r24, 0x03	; 3
    1890:	60 e0       	ldi	r22, 0x00	; 0
    1892:	40 e0       	ldi	r20, 0x00	; 0
    1894:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a0 e8       	ldi	r26, 0x80	; 128
    189e:	bf e3       	ldi	r27, 0x3F	; 63
    18a0:	8d ab       	std	Y+53, r24	; 0x35
    18a2:	9e ab       	std	Y+54, r25	; 0x36
    18a4:	af ab       	std	Y+55, r26	; 0x37
    18a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18a8:	6d a9       	ldd	r22, Y+53	; 0x35
    18aa:	7e a9       	ldd	r23, Y+54	; 0x36
    18ac:	8f a9       	ldd	r24, Y+55	; 0x37
    18ae:	98 ad       	ldd	r25, Y+56	; 0x38
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	4a e7       	ldi	r20, 0x7A	; 122
    18b6:	53 e4       	ldi	r21, 0x43	; 67
    18b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18bc:	dc 01       	movw	r26, r24
    18be:	cb 01       	movw	r24, r22
    18c0:	89 ab       	std	Y+49, r24	; 0x31
    18c2:	9a ab       	std	Y+50, r25	; 0x32
    18c4:	ab ab       	std	Y+51, r26	; 0x33
    18c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18c8:	69 a9       	ldd	r22, Y+49	; 0x31
    18ca:	7a a9       	ldd	r23, Y+50	; 0x32
    18cc:	8b a9       	ldd	r24, Y+51	; 0x33
    18ce:	9c a9       	ldd	r25, Y+52	; 0x34
    18d0:	20 e0       	ldi	r18, 0x00	; 0
    18d2:	30 e0       	ldi	r19, 0x00	; 0
    18d4:	40 e8       	ldi	r20, 0x80	; 128
    18d6:	5f e3       	ldi	r21, 0x3F	; 63
    18d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18dc:	88 23       	and	r24, r24
    18de:	2c f4       	brge	.+10     	; 0x18ea <LCD_sendCommand+0x72>
		__ticks = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	98 ab       	std	Y+48, r25	; 0x30
    18e6:	8f a7       	std	Y+47, r24	; 0x2f
    18e8:	3f c0       	rjmp	.+126    	; 0x1968 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    18ea:	69 a9       	ldd	r22, Y+49	; 0x31
    18ec:	7a a9       	ldd	r23, Y+50	; 0x32
    18ee:	8b a9       	ldd	r24, Y+51	; 0x33
    18f0:	9c a9       	ldd	r25, Y+52	; 0x34
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	3f ef       	ldi	r19, 0xFF	; 255
    18f6:	4f e7       	ldi	r20, 0x7F	; 127
    18f8:	57 e4       	ldi	r21, 0x47	; 71
    18fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fe:	18 16       	cp	r1, r24
    1900:	4c f5       	brge	.+82     	; 0x1954 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1902:	6d a9       	ldd	r22, Y+53	; 0x35
    1904:	7e a9       	ldd	r23, Y+54	; 0x36
    1906:	8f a9       	ldd	r24, Y+55	; 0x37
    1908:	98 ad       	ldd	r25, Y+56	; 0x38
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e2       	ldi	r20, 0x20	; 32
    1910:	51 e4       	ldi	r21, 0x41	; 65
    1912:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	bc 01       	movw	r22, r24
    191c:	cd 01       	movw	r24, r26
    191e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	98 ab       	std	Y+48, r25	; 0x30
    1928:	8f a7       	std	Y+47, r24	; 0x2f
    192a:	0f c0       	rjmp	.+30     	; 0x194a <LCD_sendCommand+0xd2>
    192c:	89 e1       	ldi	r24, 0x19	; 25
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	9e a7       	std	Y+46, r25	; 0x2e
    1932:	8d a7       	std	Y+45, r24	; 0x2d
    1934:	8d a5       	ldd	r24, Y+45	; 0x2d
    1936:	9e a5       	ldd	r25, Y+46	; 0x2e
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <LCD_sendCommand+0xc0>
    193c:	9e a7       	std	Y+46, r25	; 0x2e
    193e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1940:	8f a5       	ldd	r24, Y+47	; 0x2f
    1942:	98 a9       	ldd	r25, Y+48	; 0x30
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	98 ab       	std	Y+48, r25	; 0x30
    1948:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    194a:	8f a5       	ldd	r24, Y+47	; 0x2f
    194c:	98 a9       	ldd	r25, Y+48	; 0x30
    194e:	00 97       	sbiw	r24, 0x00	; 0
    1950:	69 f7       	brne	.-38     	; 0x192c <LCD_sendCommand+0xb4>
    1952:	14 c0       	rjmp	.+40     	; 0x197c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1954:	69 a9       	ldd	r22, Y+49	; 0x31
    1956:	7a a9       	ldd	r23, Y+50	; 0x32
    1958:	8b a9       	ldd	r24, Y+51	; 0x33
    195a:	9c a9       	ldd	r25, Y+52	; 0x34
    195c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	98 ab       	std	Y+48, r25	; 0x30
    1966:	8f a7       	std	Y+47, r24	; 0x2f
    1968:	8f a5       	ldd	r24, Y+47	; 0x2f
    196a:	98 a9       	ldd	r25, Y+48	; 0x30
    196c:	9c a7       	std	Y+44, r25	; 0x2c
    196e:	8b a7       	std	Y+43, r24	; 0x2b
    1970:	8b a5       	ldd	r24, Y+43	; 0x2b
    1972:	9c a5       	ldd	r25, Y+44	; 0x2c
    1974:	01 97       	sbiw	r24, 0x01	; 1
    1976:	f1 f7       	brne	.-4      	; 0x1974 <LCD_sendCommand+0xfc>
    1978:	9c a7       	std	Y+44, r25	; 0x2c
    197a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	62 e0       	ldi	r22, 0x02	; 2
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	a0 e8       	ldi	r26, 0x80	; 128
    198c:	bf e3       	ldi	r27, 0x3F	; 63
    198e:	8f a3       	std	Y+39, r24	; 0x27
    1990:	98 a7       	std	Y+40, r25	; 0x28
    1992:	a9 a7       	std	Y+41, r26	; 0x29
    1994:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1996:	6f a1       	ldd	r22, Y+39	; 0x27
    1998:	78 a5       	ldd	r23, Y+40	; 0x28
    199a:	89 a5       	ldd	r24, Y+41	; 0x29
    199c:	9a a5       	ldd	r25, Y+42	; 0x2a
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	4a e7       	ldi	r20, 0x7A	; 122
    19a4:	53 e4       	ldi	r21, 0x43	; 67
    19a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19aa:	dc 01       	movw	r26, r24
    19ac:	cb 01       	movw	r24, r22
    19ae:	8b a3       	std	Y+35, r24	; 0x23
    19b0:	9c a3       	std	Y+36, r25	; 0x24
    19b2:	ad a3       	std	Y+37, r26	; 0x25
    19b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19b6:	6b a1       	ldd	r22, Y+35	; 0x23
    19b8:	7c a1       	ldd	r23, Y+36	; 0x24
    19ba:	8d a1       	ldd	r24, Y+37	; 0x25
    19bc:	9e a1       	ldd	r25, Y+38	; 0x26
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    19ca:	88 23       	and	r24, r24
    19cc:	2c f4       	brge	.+10     	; 0x19d8 <LCD_sendCommand+0x160>
		__ticks = 1;
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	9a a3       	std	Y+34, r25	; 0x22
    19d4:	89 a3       	std	Y+33, r24	; 0x21
    19d6:	3f c0       	rjmp	.+126    	; 0x1a56 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    19d8:	6b a1       	ldd	r22, Y+35	; 0x23
    19da:	7c a1       	ldd	r23, Y+36	; 0x24
    19dc:	8d a1       	ldd	r24, Y+37	; 0x25
    19de:	9e a1       	ldd	r25, Y+38	; 0x26
    19e0:	20 e0       	ldi	r18, 0x00	; 0
    19e2:	3f ef       	ldi	r19, 0xFF	; 255
    19e4:	4f e7       	ldi	r20, 0x7F	; 127
    19e6:	57 e4       	ldi	r21, 0x47	; 71
    19e8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ec:	18 16       	cp	r1, r24
    19ee:	4c f5       	brge	.+82     	; 0x1a42 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19f0:	6f a1       	ldd	r22, Y+39	; 0x27
    19f2:	78 a5       	ldd	r23, Y+40	; 0x28
    19f4:	89 a5       	ldd	r24, Y+41	; 0x29
    19f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	40 e2       	ldi	r20, 0x20	; 32
    19fe:	51 e4       	ldi	r21, 0x41	; 65
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	bc 01       	movw	r22, r24
    1a0a:	cd 01       	movw	r24, r26
    1a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a10:	dc 01       	movw	r26, r24
    1a12:	cb 01       	movw	r24, r22
    1a14:	9a a3       	std	Y+34, r25	; 0x22
    1a16:	89 a3       	std	Y+33, r24	; 0x21
    1a18:	0f c0       	rjmp	.+30     	; 0x1a38 <LCD_sendCommand+0x1c0>
    1a1a:	89 e1       	ldi	r24, 0x19	; 25
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	98 a3       	std	Y+32, r25	; 0x20
    1a20:	8f 8f       	std	Y+31, r24	; 0x1f
    1a22:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a24:	98 a1       	ldd	r25, Y+32	; 0x20
    1a26:	01 97       	sbiw	r24, 0x01	; 1
    1a28:	f1 f7       	brne	.-4      	; 0x1a26 <LCD_sendCommand+0x1ae>
    1a2a:	98 a3       	std	Y+32, r25	; 0x20
    1a2c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1a30:	9a a1       	ldd	r25, Y+34	; 0x22
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	9a a3       	std	Y+34, r25	; 0x22
    1a36:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3c:	00 97       	sbiw	r24, 0x00	; 0
    1a3e:	69 f7       	brne	.-38     	; 0x1a1a <LCD_sendCommand+0x1a2>
    1a40:	14 c0       	rjmp	.+40     	; 0x1a6a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a42:	6b a1       	ldd	r22, Y+35	; 0x23
    1a44:	7c a1       	ldd	r23, Y+36	; 0x24
    1a46:	8d a1       	ldd	r24, Y+37	; 0x25
    1a48:	9e a1       	ldd	r25, Y+38	; 0x26
    1a4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a4e:	dc 01       	movw	r26, r24
    1a50:	cb 01       	movw	r24, r22
    1a52:	9a a3       	std	Y+34, r25	; 0x22
    1a54:	89 a3       	std	Y+33, r24	; 0x21
    1a56:	89 a1       	ldd	r24, Y+33	; 0x21
    1a58:	9a a1       	ldd	r25, Y+34	; 0x22
    1a5a:	9e 8f       	std	Y+30, r25	; 0x1e
    1a5c:	8d 8f       	std	Y+29, r24	; 0x1d
    1a5e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a60:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	f1 f7       	brne	.-4      	; 0x1a62 <LCD_sendCommand+0x1ea>
    1a66:	9e 8f       	std	Y+30, r25	; 0x1e
    1a68:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1a6a:	82 e0       	ldi	r24, 0x02	; 2
    1a6c:	69 ad       	ldd	r22, Y+57	; 0x39
    1a6e:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePort>
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	a0 e8       	ldi	r26, 0x80	; 128
    1a78:	bf e3       	ldi	r27, 0x3F	; 63
    1a7a:	89 8f       	std	Y+25, r24	; 0x19
    1a7c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a7e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a80:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a82:	69 8d       	ldd	r22, Y+25	; 0x19
    1a84:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a86:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a88:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	4a e7       	ldi	r20, 0x7A	; 122
    1a90:	53 e4       	ldi	r21, 0x43	; 67
    1a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a96:	dc 01       	movw	r26, r24
    1a98:	cb 01       	movw	r24, r22
    1a9a:	8d 8b       	std	Y+21, r24	; 0x15
    1a9c:	9e 8b       	std	Y+22, r25	; 0x16
    1a9e:	af 8b       	std	Y+23, r26	; 0x17
    1aa0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	30 e0       	ldi	r19, 0x00	; 0
    1aae:	40 e8       	ldi	r20, 0x80	; 128
    1ab0:	5f e3       	ldi	r21, 0x3F	; 63
    1ab2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab6:	88 23       	and	r24, r24
    1ab8:	2c f4       	brge	.+10     	; 0x1ac4 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	9c 8b       	std	Y+20, r25	; 0x14
    1ac0:	8b 8b       	std	Y+19, r24	; 0x13
    1ac2:	3f c0       	rjmp	.+126    	; 0x1b42 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1ac4:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac6:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac8:	8f 89       	ldd	r24, Y+23	; 0x17
    1aca:	98 8d       	ldd	r25, Y+24	; 0x18
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	3f ef       	ldi	r19, 0xFF	; 255
    1ad0:	4f e7       	ldi	r20, 0x7F	; 127
    1ad2:	57 e4       	ldi	r21, 0x47	; 71
    1ad4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ad8:	18 16       	cp	r1, r24
    1ada:	4c f5       	brge	.+82     	; 0x1b2e <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1adc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ade:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	40 e2       	ldi	r20, 0x20	; 32
    1aea:	51 e4       	ldi	r21, 0x41	; 65
    1aec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	bc 01       	movw	r22, r24
    1af6:	cd 01       	movw	r24, r26
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9c 8b       	std	Y+20, r25	; 0x14
    1b02:	8b 8b       	std	Y+19, r24	; 0x13
    1b04:	0f c0       	rjmp	.+30     	; 0x1b24 <LCD_sendCommand+0x2ac>
    1b06:	89 e1       	ldi	r24, 0x19	; 25
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	9a 8b       	std	Y+18, r25	; 0x12
    1b0c:	89 8b       	std	Y+17, r24	; 0x11
    1b0e:	89 89       	ldd	r24, Y+17	; 0x11
    1b10:	9a 89       	ldd	r25, Y+18	; 0x12
    1b12:	01 97       	sbiw	r24, 0x01	; 1
    1b14:	f1 f7       	brne	.-4      	; 0x1b12 <LCD_sendCommand+0x29a>
    1b16:	9a 8b       	std	Y+18, r25	; 0x12
    1b18:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b1e:	01 97       	sbiw	r24, 0x01	; 1
    1b20:	9c 8b       	std	Y+20, r25	; 0x14
    1b22:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b24:	8b 89       	ldd	r24, Y+19	; 0x13
    1b26:	9c 89       	ldd	r25, Y+20	; 0x14
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	69 f7       	brne	.-38     	; 0x1b06 <LCD_sendCommand+0x28e>
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b30:	7e 89       	ldd	r23, Y+22	; 0x16
    1b32:	8f 89       	ldd	r24, Y+23	; 0x17
    1b34:	98 8d       	ldd	r25, Y+24	; 0x18
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9c 8b       	std	Y+20, r25	; 0x14
    1b40:	8b 8b       	std	Y+19, r24	; 0x13
    1b42:	8b 89       	ldd	r24, Y+19	; 0x13
    1b44:	9c 89       	ldd	r25, Y+20	; 0x14
    1b46:	98 8b       	std	Y+16, r25	; 0x10
    1b48:	8f 87       	std	Y+15, r24	; 0x0f
    1b4a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b4c:	98 89       	ldd	r25, Y+16	; 0x10
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_sendCommand+0x2d6>
    1b52:	98 8b       	std	Y+16, r25	; 0x10
    1b54:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b56:	83 e0       	ldi	r24, 0x03	; 3
    1b58:	62 e0       	ldi	r22, 0x02	; 2
    1b5a:	40 e0       	ldi	r20, 0x00	; 0
    1b5c:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1b60:	80 e0       	ldi	r24, 0x00	; 0
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a0 e8       	ldi	r26, 0x80	; 128
    1b66:	bf e3       	ldi	r27, 0x3F	; 63
    1b68:	8b 87       	std	Y+11, r24	; 0x0b
    1b6a:	9c 87       	std	Y+12, r25	; 0x0c
    1b6c:	ad 87       	std	Y+13, r26	; 0x0d
    1b6e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b70:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b72:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b74:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b76:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a e7       	ldi	r20, 0x7A	; 122
    1b7e:	53 e4       	ldi	r21, 0x43	; 67
    1b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	8f 83       	std	Y+7, r24	; 0x07
    1b8a:	98 87       	std	Y+8, r25	; 0x08
    1b8c:	a9 87       	std	Y+9, r26	; 0x09
    1b8e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	40 e8       	ldi	r20, 0x80	; 128
    1b9e:	5f e3       	ldi	r21, 0x3F	; 63
    1ba0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ba4:	88 23       	and	r24, r24
    1ba6:	2c f4       	brge	.+10     	; 0x1bb2 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	9e 83       	std	Y+6, r25	; 0x06
    1bae:	8d 83       	std	Y+5, r24	; 0x05
    1bb0:	3f c0       	rjmp	.+126    	; 0x1c30 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1bb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb4:	78 85       	ldd	r23, Y+8	; 0x08
    1bb6:	89 85       	ldd	r24, Y+9	; 0x09
    1bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	3f ef       	ldi	r19, 0xFF	; 255
    1bbe:	4f e7       	ldi	r20, 0x7F	; 127
    1bc0:	57 e4       	ldi	r21, 0x47	; 71
    1bc2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bc6:	18 16       	cp	r1, r24
    1bc8:	4c f5       	brge	.+82     	; 0x1c1c <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	20 e0       	ldi	r18, 0x00	; 0
    1bd4:	30 e0       	ldi	r19, 0x00	; 0
    1bd6:	40 e2       	ldi	r20, 0x20	; 32
    1bd8:	51 e4       	ldi	r21, 0x41	; 65
    1bda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bde:	dc 01       	movw	r26, r24
    1be0:	cb 01       	movw	r24, r22
    1be2:	bc 01       	movw	r22, r24
    1be4:	cd 01       	movw	r24, r26
    1be6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bea:	dc 01       	movw	r26, r24
    1bec:	cb 01       	movw	r24, r22
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	0f c0       	rjmp	.+30     	; 0x1c12 <LCD_sendCommand+0x39a>
    1bf4:	89 e1       	ldi	r24, 0x19	; 25
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9c 83       	std	Y+4, r25	; 0x04
    1bfa:	8b 83       	std	Y+3, r24	; 0x03
    1bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfe:	9c 81       	ldd	r25, Y+4	; 0x04
    1c00:	01 97       	sbiw	r24, 0x01	; 1
    1c02:	f1 f7       	brne	.-4      	; 0x1c00 <LCD_sendCommand+0x388>
    1c04:	9c 83       	std	Y+4, r25	; 0x04
    1c06:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	9e 83       	std	Y+6, r25	; 0x06
    1c10:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	69 f7       	brne	.-38     	; 0x1bf4 <LCD_sendCommand+0x37c>
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c1e:	78 85       	ldd	r23, Y+8	; 0x08
    1c20:	89 85       	ldd	r24, Y+9	; 0x09
    1c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	8d 81       	ldd	r24, Y+5	; 0x05
    1c32:	9e 81       	ldd	r25, Y+6	; 0x06
    1c34:	9a 83       	std	Y+2, r25	; 0x02
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	f1 f7       	brne	.-4      	; 0x1c3c <LCD_sendCommand+0x3c4>
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1c44:	e9 96       	adiw	r28, 0x39	; 57
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
    1c5e:	e9 97       	sbiw	r28, 0x39	; 57
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	de bf       	out	0x3e, r29	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	cd bf       	out	0x3d, r28	; 61
    1c6a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	60 e0       	ldi	r22, 0x00	; 0
    1c70:	41 e0       	ldi	r20, 0x01	; 1
    1c72:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1c76:	80 e0       	ldi	r24, 0x00	; 0
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	a0 e8       	ldi	r26, 0x80	; 128
    1c7c:	bf e3       	ldi	r27, 0x3F	; 63
    1c7e:	8d ab       	std	Y+53, r24	; 0x35
    1c80:	9e ab       	std	Y+54, r25	; 0x36
    1c82:	af ab       	std	Y+55, r26	; 0x37
    1c84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c86:	6d a9       	ldd	r22, Y+53	; 0x35
    1c88:	7e a9       	ldd	r23, Y+54	; 0x36
    1c8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1c8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	4a e7       	ldi	r20, 0x7A	; 122
    1c94:	53 e4       	ldi	r21, 0x43	; 67
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	89 ab       	std	Y+49, r24	; 0x31
    1ca0:	9a ab       	std	Y+50, r25	; 0x32
    1ca2:	ab ab       	std	Y+51, r26	; 0x33
    1ca4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ca6:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca8:	7a a9       	ldd	r23, Y+50	; 0x32
    1caa:	8b a9       	ldd	r24, Y+51	; 0x33
    1cac:	9c a9       	ldd	r25, Y+52	; 0x34
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 e8       	ldi	r20, 0x80	; 128
    1cb4:	5f e3       	ldi	r21, 0x3F	; 63
    1cb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cba:	88 23       	and	r24, r24
    1cbc:	2c f4       	brge	.+10     	; 0x1cc8 <LCD_displayCharacter+0x72>
		__ticks = 1;
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	98 ab       	std	Y+48, r25	; 0x30
    1cc4:	8f a7       	std	Y+47, r24	; 0x2f
    1cc6:	3f c0       	rjmp	.+126    	; 0x1d46 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1cc8:	69 a9       	ldd	r22, Y+49	; 0x31
    1cca:	7a a9       	ldd	r23, Y+50	; 0x32
    1ccc:	8b a9       	ldd	r24, Y+51	; 0x33
    1cce:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	3f ef       	ldi	r19, 0xFF	; 255
    1cd4:	4f e7       	ldi	r20, 0x7F	; 127
    1cd6:	57 e4       	ldi	r21, 0x47	; 71
    1cd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cdc:	18 16       	cp	r1, r24
    1cde:	4c f5       	brge	.+82     	; 0x1d32 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ce0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ce2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ce4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ce6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e2       	ldi	r20, 0x20	; 32
    1cee:	51 e4       	ldi	r21, 0x41	; 65
    1cf0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	bc 01       	movw	r22, r24
    1cfa:	cd 01       	movw	r24, r26
    1cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	98 ab       	std	Y+48, r25	; 0x30
    1d06:	8f a7       	std	Y+47, r24	; 0x2f
    1d08:	0f c0       	rjmp	.+30     	; 0x1d28 <LCD_displayCharacter+0xd2>
    1d0a:	89 e1       	ldi	r24, 0x19	; 25
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	9e a7       	std	Y+46, r25	; 0x2e
    1d10:	8d a7       	std	Y+45, r24	; 0x2d
    1d12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_displayCharacter+0xc0>
    1d1a:	9e a7       	std	Y+46, r25	; 0x2e
    1d1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d20:	98 a9       	ldd	r25, Y+48	; 0x30
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1d2c:	00 97       	sbiw	r24, 0x00	; 0
    1d2e:	69 f7       	brne	.-38     	; 0x1d0a <LCD_displayCharacter+0xb4>
    1d30:	14 c0       	rjmp	.+40     	; 0x1d5a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d32:	69 a9       	ldd	r22, Y+49	; 0x31
    1d34:	7a a9       	ldd	r23, Y+50	; 0x32
    1d36:	8b a9       	ldd	r24, Y+51	; 0x33
    1d38:	9c a9       	ldd	r25, Y+52	; 0x34
    1d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d3e:	dc 01       	movw	r26, r24
    1d40:	cb 01       	movw	r24, r22
    1d42:	98 ab       	std	Y+48, r25	; 0x30
    1d44:	8f a7       	std	Y+47, r24	; 0x2f
    1d46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d48:	98 a9       	ldd	r25, Y+48	; 0x30
    1d4a:	9c a7       	std	Y+44, r25	; 0x2c
    1d4c:	8b a7       	std	Y+43, r24	; 0x2b
    1d4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <LCD_displayCharacter+0xfc>
    1d56:	9c a7       	std	Y+44, r25	; 0x2c
    1d58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d5a:	83 e0       	ldi	r24, 0x03	; 3
    1d5c:	62 e0       	ldi	r22, 0x02	; 2
    1d5e:	41 e0       	ldi	r20, 0x01	; 1
    1d60:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	8f a3       	std	Y+39, r24	; 0x27
    1d6e:	98 a7       	std	Y+40, r25	; 0x28
    1d70:	a9 a7       	std	Y+41, r26	; 0x29
    1d72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	6f a1       	ldd	r22, Y+39	; 0x27
    1d76:	78 a5       	ldd	r23, Y+40	; 0x28
    1d78:	89 a5       	ldd	r24, Y+41	; 0x29
    1d7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a e7       	ldi	r20, 0x7A	; 122
    1d82:	53 e4       	ldi	r21, 0x43	; 67
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8b a3       	std	Y+35, r24	; 0x23
    1d8e:	9c a3       	std	Y+36, r25	; 0x24
    1d90:	ad a3       	std	Y+37, r26	; 0x25
    1d92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d94:	6b a1       	ldd	r22, Y+35	; 0x23
    1d96:	7c a1       	ldd	r23, Y+36	; 0x24
    1d98:	8d a1       	ldd	r24, Y+37	; 0x25
    1d9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_displayCharacter+0x160>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9a a3       	std	Y+34, r25	; 0x22
    1db2:	89 a3       	std	Y+33, r24	; 0x21
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1db6:	6b a1       	ldd	r22, Y+35	; 0x23
    1db8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dba:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9a a3       	std	Y+34, r25	; 0x22
    1df4:	89 a3       	std	Y+33, r24	; 0x21
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_displayCharacter+0x1c0>
    1df8:	89 e1       	ldi	r24, 0x19	; 25
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	98 a3       	std	Y+32, r25	; 0x20
    1dfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e02:	98 a1       	ldd	r25, Y+32	; 0x20
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_displayCharacter+0x1ae>
    1e08:	98 a3       	std	Y+32, r25	; 0x20
    1e0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9a a3       	std	Y+34, r25	; 0x22
    1e14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	89 a1       	ldd	r24, Y+33	; 0x21
    1e18:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_displayCharacter+0x1a2>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6b a1       	ldd	r22, Y+35	; 0x23
    1e22:	7c a1       	ldd	r23, Y+36	; 0x24
    1e24:	8d a1       	ldd	r24, Y+37	; 0x25
    1e26:	9e a1       	ldd	r25, Y+38	; 0x26
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9a a3       	std	Y+34, r25	; 0x22
    1e32:	89 a3       	std	Y+33, r24	; 0x21
    1e34:	89 a1       	ldd	r24, Y+33	; 0x21
    1e36:	9a a1       	ldd	r25, Y+34	; 0x22
    1e38:	9e 8f       	std	Y+30, r25	; 0x1e
    1e3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1e3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayCharacter+0x1ea>
    1e44:	9e 8f       	std	Y+30, r25	; 0x1e
    1e46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	69 ad       	ldd	r22, Y+57	; 0x39
    1e4c:	0e 94 14 0b 	call	0x1628	; 0x1628 <GPIO_writePort>
    1e50:	80 e0       	ldi	r24, 0x00	; 0
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e8       	ldi	r26, 0x80	; 128
    1e56:	bf e3       	ldi	r27, 0x3F	; 63
    1e58:	89 8f       	std	Y+25, r24	; 0x19
    1e5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e60:	69 8d       	ldd	r22, Y+25	; 0x19
    1e62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	4a e7       	ldi	r20, 0x7A	; 122
    1e6e:	53 e4       	ldi	r21, 0x43	; 67
    1e70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	8d 8b       	std	Y+21, r24	; 0x15
    1e7a:	9e 8b       	std	Y+22, r25	; 0x16
    1e7c:	af 8b       	std	Y+23, r26	; 0x17
    1e7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e80:	6d 89       	ldd	r22, Y+21	; 0x15
    1e82:	7e 89       	ldd	r23, Y+22	; 0x16
    1e84:	8f 89       	ldd	r24, Y+23	; 0x17
    1e86:	98 8d       	ldd	r25, Y+24	; 0x18
    1e88:	20 e0       	ldi	r18, 0x00	; 0
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	40 e8       	ldi	r20, 0x80	; 128
    1e8e:	5f e3       	ldi	r21, 0x3F	; 63
    1e90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e94:	88 23       	and	r24, r24
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	9c 8b       	std	Y+20, r25	; 0x14
    1e9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ea0:	3f c0       	rjmp	.+126    	; 0x1f20 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1ea2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ea4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ea6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ea8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	3f ef       	ldi	r19, 0xFF	; 255
    1eae:	4f e7       	ldi	r20, 0x7F	; 127
    1eb0:	57 e4       	ldi	r21, 0x47	; 71
    1eb2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eb6:	18 16       	cp	r1, r24
    1eb8:	4c f5       	brge	.+82     	; 0x1f0c <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1eba:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ebe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	40 e2       	ldi	r20, 0x20	; 32
    1ec8:	51 e4       	ldi	r21, 0x41	; 65
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eda:	dc 01       	movw	r26, r24
    1edc:	cb 01       	movw	r24, r22
    1ede:	9c 8b       	std	Y+20, r25	; 0x14
    1ee0:	8b 8b       	std	Y+19, r24	; 0x13
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <LCD_displayCharacter+0x2ac>
    1ee4:	89 e1       	ldi	r24, 0x19	; 25
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	9a 8b       	std	Y+18, r25	; 0x12
    1eea:	89 8b       	std	Y+17, r24	; 0x11
    1eec:	89 89       	ldd	r24, Y+17	; 0x11
    1eee:	9a 89       	ldd	r25, Y+18	; 0x12
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <LCD_displayCharacter+0x29a>
    1ef4:	9a 8b       	std	Y+18, r25	; 0x12
    1ef6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ef8:	8b 89       	ldd	r24, Y+19	; 0x13
    1efa:	9c 89       	ldd	r25, Y+20	; 0x14
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	9c 8b       	std	Y+20, r25	; 0x14
    1f00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f02:	8b 89       	ldd	r24, Y+19	; 0x13
    1f04:	9c 89       	ldd	r25, Y+20	; 0x14
    1f06:	00 97       	sbiw	r24, 0x00	; 0
    1f08:	69 f7       	brne	.-38     	; 0x1ee4 <LCD_displayCharacter+0x28e>
    1f0a:	14 c0       	rjmp	.+40     	; 0x1f34 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1f10:	8f 89       	ldd	r24, Y+23	; 0x17
    1f12:	98 8d       	ldd	r25, Y+24	; 0x18
    1f14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	9c 8b       	std	Y+20, r25	; 0x14
    1f1e:	8b 8b       	std	Y+19, r24	; 0x13
    1f20:	8b 89       	ldd	r24, Y+19	; 0x13
    1f22:	9c 89       	ldd	r25, Y+20	; 0x14
    1f24:	98 8b       	std	Y+16, r25	; 0x10
    1f26:	8f 87       	std	Y+15, r24	; 0x0f
    1f28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f2a:	98 89       	ldd	r25, Y+16	; 0x10
    1f2c:	01 97       	sbiw	r24, 0x01	; 1
    1f2e:	f1 f7       	brne	.-4      	; 0x1f2c <LCD_displayCharacter+0x2d6>
    1f30:	98 8b       	std	Y+16, r25	; 0x10
    1f32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f34:	83 e0       	ldi	r24, 0x03	; 3
    1f36:	62 e0       	ldi	r22, 0x02	; 2
    1f38:	40 e0       	ldi	r20, 0x00	; 0
    1f3a:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	a0 e8       	ldi	r26, 0x80	; 128
    1f44:	bf e3       	ldi	r27, 0x3F	; 63
    1f46:	8b 87       	std	Y+11, r24	; 0x0b
    1f48:	9c 87       	std	Y+12, r25	; 0x0c
    1f4a:	ad 87       	std	Y+13, r26	; 0x0d
    1f4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f56:	20 e0       	ldi	r18, 0x00	; 0
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	4a e7       	ldi	r20, 0x7A	; 122
    1f5c:	53 e4       	ldi	r21, 0x43	; 67
    1f5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f62:	dc 01       	movw	r26, r24
    1f64:	cb 01       	movw	r24, r22
    1f66:	8f 83       	std	Y+7, r24	; 0x07
    1f68:	98 87       	std	Y+8, r25	; 0x08
    1f6a:	a9 87       	std	Y+9, r26	; 0x09
    1f6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f70:	78 85       	ldd	r23, Y+8	; 0x08
    1f72:	89 85       	ldd	r24, Y+9	; 0x09
    1f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	40 e8       	ldi	r20, 0x80	; 128
    1f7c:	5f e3       	ldi	r21, 0x3F	; 63
    1f7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f82:	88 23       	and	r24, r24
    1f84:	2c f4       	brge	.+10     	; 0x1f90 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9e 83       	std	Y+6, r25	; 0x06
    1f8c:	8d 83       	std	Y+5, r24	; 0x05
    1f8e:	3f c0       	rjmp	.+126    	; 0x200e <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1f90:	6f 81       	ldd	r22, Y+7	; 0x07
    1f92:	78 85       	ldd	r23, Y+8	; 0x08
    1f94:	89 85       	ldd	r24, Y+9	; 0x09
    1f96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f98:	20 e0       	ldi	r18, 0x00	; 0
    1f9a:	3f ef       	ldi	r19, 0xFF	; 255
    1f9c:	4f e7       	ldi	r20, 0x7F	; 127
    1f9e:	57 e4       	ldi	r21, 0x47	; 71
    1fa0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fa4:	18 16       	cp	r1, r24
    1fa6:	4c f5       	brge	.+82     	; 0x1ffa <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fa8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1faa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	40 e2       	ldi	r20, 0x20	; 32
    1fb6:	51 e4       	ldi	r21, 0x41	; 65
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	bc 01       	movw	r22, r24
    1fc2:	cd 01       	movw	r24, r26
    1fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fc8:	dc 01       	movw	r26, r24
    1fca:	cb 01       	movw	r24, r22
    1fcc:	9e 83       	std	Y+6, r25	; 0x06
    1fce:	8d 83       	std	Y+5, r24	; 0x05
    1fd0:	0f c0       	rjmp	.+30     	; 0x1ff0 <LCD_displayCharacter+0x39a>
    1fd2:	89 e1       	ldi	r24, 0x19	; 25
    1fd4:	90 e0       	ldi	r25, 0x00	; 0
    1fd6:	9c 83       	std	Y+4, r25	; 0x04
    1fd8:	8b 83       	std	Y+3, r24	; 0x03
    1fda:	8b 81       	ldd	r24, Y+3	; 0x03
    1fdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <LCD_displayCharacter+0x388>
    1fe2:	9c 83       	std	Y+4, r25	; 0x04
    1fe4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	9e 83       	std	Y+6, r25	; 0x06
    1fee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff4:	00 97       	sbiw	r24, 0x00	; 0
    1ff6:	69 f7       	brne	.-38     	; 0x1fd2 <LCD_displayCharacter+0x37c>
    1ff8:	14 c0       	rjmp	.+40     	; 0x2022 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffa:	6f 81       	ldd	r22, Y+7	; 0x07
    1ffc:	78 85       	ldd	r23, Y+8	; 0x08
    1ffe:	89 85       	ldd	r24, Y+9	; 0x09
    2000:	9a 85       	ldd	r25, Y+10	; 0x0a
    2002:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	9e 83       	std	Y+6, r25	; 0x06
    200c:	8d 83       	std	Y+5, r24	; 0x05
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	9e 81       	ldd	r25, Y+6	; 0x06
    2012:	9a 83       	std	Y+2, r25	; 0x02
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	89 81       	ldd	r24, Y+1	; 0x01
    2018:	9a 81       	ldd	r25, Y+2	; 0x02
    201a:	01 97       	sbiw	r24, 0x01	; 1
    201c:	f1 f7       	brne	.-4      	; 0x201a <LCD_displayCharacter+0x3c4>
    201e:	9a 83       	std	Y+2, r25	; 0x02
    2020:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2022:	e9 96       	adiw	r28, 0x39	; 57
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	de bf       	out	0x3e, r29	; 62
    202a:	0f be       	out	0x3f, r0	; 63
    202c:	cd bf       	out	0x3d, r28	; 61
    202e:	cf 91       	pop	r28
    2030:	df 91       	pop	r29
    2032:	08 95       	ret

00002034 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2034:	df 93       	push	r29
    2036:	cf 93       	push	r28
    2038:	00 d0       	rcall	.+0      	; 0x203a <LCD_displayString+0x6>
    203a:	0f 92       	push	r0
    203c:	cd b7       	in	r28, 0x3d	; 61
    203e:	de b7       	in	r29, 0x3e	; 62
    2040:	9b 83       	std	Y+3, r25	; 0x03
    2042:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2044:	19 82       	std	Y+1, r1	; 0x01
    2046:	0e c0       	rjmp	.+28     	; 0x2064 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2048:	89 81       	ldd	r24, Y+1	; 0x01
    204a:	28 2f       	mov	r18, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	9b 81       	ldd	r25, Y+3	; 0x03
    2052:	fc 01       	movw	r30, r24
    2054:	e2 0f       	add	r30, r18
    2056:	f3 1f       	adc	r31, r19
    2058:	80 81       	ld	r24, Z
    205a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LCD_displayCharacter>
		i++;
    205e:	89 81       	ldd	r24, Y+1	; 0x01
    2060:	8f 5f       	subi	r24, 0xFF	; 255
    2062:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	28 2f       	mov	r18, r24
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	fc 01       	movw	r30, r24
    2070:	e2 0f       	add	r30, r18
    2072:	f3 1f       	adc	r31, r19
    2074:	80 81       	ld	r24, Z
    2076:	88 23       	and	r24, r24
    2078:	39 f7       	brne	.-50     	; 0x2048 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    207a:	0f 90       	pop	r0
    207c:	0f 90       	pop	r0
    207e:	0f 90       	pop	r0
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	00 d0       	rcall	.+0      	; 0x208c <LCD_moveCursor+0x6>
    208c:	00 d0       	rcall	.+0      	; 0x208e <LCD_moveCursor+0x8>
    208e:	0f 92       	push	r0
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
    2094:	8a 83       	std	Y+2, r24	; 0x02
    2096:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	28 2f       	mov	r18, r24
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	3d 83       	std	Y+5, r19	; 0x05
    20a0:	2c 83       	std	Y+4, r18	; 0x04
    20a2:	8c 81       	ldd	r24, Y+4	; 0x04
    20a4:	9d 81       	ldd	r25, Y+5	; 0x05
    20a6:	81 30       	cpi	r24, 0x01	; 1
    20a8:	91 05       	cpc	r25, r1
    20aa:	c1 f0       	breq	.+48     	; 0x20dc <LCD_moveCursor+0x56>
    20ac:	2c 81       	ldd	r18, Y+4	; 0x04
    20ae:	3d 81       	ldd	r19, Y+5	; 0x05
    20b0:	22 30       	cpi	r18, 0x02	; 2
    20b2:	31 05       	cpc	r19, r1
    20b4:	2c f4       	brge	.+10     	; 0x20c0 <LCD_moveCursor+0x3a>
    20b6:	8c 81       	ldd	r24, Y+4	; 0x04
    20b8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	61 f0       	breq	.+24     	; 0x20d6 <LCD_moveCursor+0x50>
    20be:	19 c0       	rjmp	.+50     	; 0x20f2 <LCD_moveCursor+0x6c>
    20c0:	2c 81       	ldd	r18, Y+4	; 0x04
    20c2:	3d 81       	ldd	r19, Y+5	; 0x05
    20c4:	22 30       	cpi	r18, 0x02	; 2
    20c6:	31 05       	cpc	r19, r1
    20c8:	69 f0       	breq	.+26     	; 0x20e4 <LCD_moveCursor+0x5e>
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	83 30       	cpi	r24, 0x03	; 3
    20d0:	91 05       	cpc	r25, r1
    20d2:	61 f0       	breq	.+24     	; 0x20ec <LCD_moveCursor+0x66>
    20d4:	0e c0       	rjmp	.+28     	; 0x20f2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    20d6:	8b 81       	ldd	r24, Y+3	; 0x03
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	0b c0       	rjmp	.+22     	; 0x20f2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	80 5c       	subi	r24, 0xC0	; 192
    20e0:	89 83       	std	Y+1, r24	; 0x01
    20e2:	07 c0       	rjmp	.+14     	; 0x20f2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	80 5f       	subi	r24, 0xF0	; 240
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	03 c0       	rjmp	.+6      	; 0x20f2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	80 5b       	subi	r24, 0xB0	; 176
    20f0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	80 68       	ori	r24, 0x80	; 128
    20f6:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_sendCommand>
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <LCD_displayStringRowColumn+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <LCD_displayStringRowColumn+0x8>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	6a 83       	std	Y+2, r22	; 0x02
    211a:	5c 83       	std	Y+4, r21	; 0x04
    211c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    211e:	89 81       	ldd	r24, Y+1	; 0x01
    2120:	6a 81       	ldd	r22, Y+2	; 0x02
    2122:	0e 94 43 10 	call	0x2086	; 0x2086 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	cf 91       	pop	r28
    2138:	df 91       	pop	r29
    213a:	08 95       	ret

0000213c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    213c:	df 93       	push	r29
    213e:	cf 93       	push	r28
    2140:	cd b7       	in	r28, 0x3d	; 61
    2142:	de b7       	in	r29, 0x3e	; 62
    2144:	62 97       	sbiw	r28, 0x12	; 18
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	9a 8b       	std	Y+18, r25	; 0x12
    2152:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2154:	89 89       	ldd	r24, Y+17	; 0x11
    2156:	9a 89       	ldd	r25, Y+18	; 0x12
    2158:	9e 01       	movw	r18, r28
    215a:	2f 5f       	subi	r18, 0xFF	; 255
    215c:	3f 4f       	sbci	r19, 0xFF	; 255
    215e:	b9 01       	movw	r22, r18
    2160:	4a e0       	ldi	r20, 0x0A	; 10
    2162:	50 e0       	ldi	r21, 0x00	; 0
    2164:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <itoa>
   LCD_displayString(buff); /* Display the string */
    2168:	ce 01       	movw	r24, r28
    216a:	01 96       	adiw	r24, 0x01	; 1
    216c:	0e 94 1a 10 	call	0x2034	; 0x2034 <LCD_displayString>
}
    2170:	62 96       	adiw	r28, 0x12	; 18
    2172:	0f b6       	in	r0, 0x3f	; 63
    2174:	f8 94       	cli
    2176:	de bf       	out	0x3e, r29	; 62
    2178:	0f be       	out	0x3f, r0	; 63
    217a:	cd bf       	out	0x3d, r28	; 61
    217c:	cf 91       	pop	r28
    217e:	df 91       	pop	r29
    2180:	08 95       	ret

00002182 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2182:	df 93       	push	r29
    2184:	cf 93       	push	r28
    2186:	cd b7       	in	r28, 0x3d	; 61
    2188:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_sendCommand>
}
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <LM35_getTemperature>:
/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint8 LM35_getTemperature(void)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	00 d0       	rcall	.+0      	; 0x219c <LM35_getTemperature+0x6>
    219c:	0f 92       	push	r0
    219e:	cd b7       	in	r28, 0x3d	; 61
    21a0:	de b7       	in	r29, 0x3e	; 62
	uint8 temp_value = 0;
    21a2:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    21a4:	1a 82       	std	Y+2, r1	; 0x02
    21a6:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_readChannel(SENSOR_CHANNEL_ID);
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	0e 94 34 07 	call	0xe68	; 0xe68 <ADC_readChannel>
    21ae:	9a 83       	std	Y+2, r25	; 0x02
    21b0:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    21b2:	89 81       	ldd	r24, Y+1	; 0x01
    21b4:	9a 81       	ldd	r25, Y+2	; 0x02
    21b6:	cc 01       	movw	r24, r24
    21b8:	a0 e0       	ldi	r26, 0x00	; 0
    21ba:	b0 e0       	ldi	r27, 0x00	; 0
    21bc:	26 e9       	ldi	r18, 0x96	; 150
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	40 e0       	ldi	r20, 0x00	; 0
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	bc 01       	movw	r22, r24
    21c6:	cd 01       	movw	r24, r26
    21c8:	0e 94 83 11 	call	0x2306	; 0x2306 <__mulsi3>
    21cc:	dc 01       	movw	r26, r24
    21ce:	cb 01       	movw	r24, r22
    21d0:	bc 01       	movw	r22, r24
    21d2:	cd 01       	movw	r24, r26
    21d4:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	bc 01       	movw	r22, r24
    21de:	cd 01       	movw	r24, r26
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	37 ed       	ldi	r19, 0xD7	; 215
    21e4:	43 e2       	ldi	r20, 0x23	; 35
    21e6:	50 e4       	ldi	r21, 0x40	; 64
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 ed       	ldi	r19, 0xD0	; 208
    21f8:	4f eb       	ldi	r20, 0xBF	; 191
    21fa:	54 e4       	ldi	r21, 0x44	; 68
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2200:	dc 01       	movw	r26, r24
    2202:	cb 01       	movw	r24, r22
    2204:	bc 01       	movw	r22, r24
    2206:	cd 01       	movw	r24, r26
    2208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	08 95       	ret

00002220 <DcMotor_Init>:




void DcMotor_Init(void)
{
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	cd b7       	in	r28, 0x3d	; 61
    2226:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(IN1_PORT,IN1_PIN,PIN_OUTPUT);
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	60 e0       	ldi	r22, 0x00	; 0
    222c:	41 e0       	ldi	r20, 0x01	; 1
    222e:	0e 94 4f 08 	call	0x109e	; 0x109e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT,IN2_PIN,PIN_OUTPUT);
    2232:	81 e0       	ldi	r24, 0x01	; 1
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	41 e0       	ldi	r20, 0x01	; 1
    2238:	0e 94 4f 08 	call	0x109e	; 0x109e <GPIO_setupPinDirection>
	GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	60 e0       	ldi	r22, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
	GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
}
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <DcMotor_Rotate+0x6>
    225c:	0f 92       	push	r0
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
    2262:	8a 83       	std	Y+2, r24	; 0x02
    2264:	6b 83       	std	Y+3, r22	; 0x03
	uint8 state_check=state;
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	89 83       	std	Y+1, r24	; 0x01
	PWM_Timer0_Init(speed);
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	0e 94 67 11 	call	0x22ce	; 0x22ce <PWM_Timer0_Init>
	if(state_check==STOP)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	88 23       	and	r24, r24
    2274:	59 f4       	brne	.+22     	; 0x228c <DcMotor_Rotate+0x36>
	{
		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	61 e0       	ldi	r22, 0x01	; 1
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    228a:	1b c0       	rjmp	.+54     	; 0x22c2 <DcMotor_Rotate+0x6c>
	}
	else if(state_check==A_CW)
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	82 30       	cpi	r24, 0x02	; 2
    2290:	59 f4       	brne	.+22     	; 0x22a8 <DcMotor_Rotate+0x52>
	{
		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_HIGH);
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	60 e0       	ldi	r22, 0x00	; 0
    2296:	41 e0       	ldi	r20, 0x01	; 1
    2298:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_LOW);
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	61 e0       	ldi	r22, 0x01	; 1
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
    22a6:	0d c0       	rjmp	.+26     	; 0x22c2 <DcMotor_Rotate+0x6c>
	}
	else if(state_check==CW)
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	81 30       	cpi	r24, 0x01	; 1
    22ac:	51 f4       	brne	.+20     	; 0x22c2 <DcMotor_Rotate+0x6c>
	{

		GPIO_writePin(IN1_PORT,IN1_PIN,LOGIC_LOW);
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
		GPIO_writePin(IN2_PORT,IN2_PIN,LOGIC_HIGH);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	61 e0       	ldi	r22, 0x01	; 1
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 3a 09 	call	0x1274	; 0x1274 <GPIO_writePin>
	}

}
    22c2:	0f 90       	pop	r0
    22c4:	0f 90       	pop	r0
    22c6:	0f 90       	pop	r0
    22c8:	cf 91       	pop	r28
    22ca:	df 91       	pop	r29
    22cc:	08 95       	ret

000022ce <PWM_Timer0_Init>:
 *      Author: Kimo Store
 */
#include <avr/io.h>

void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
    22ce:	df 93       	push	r29
    22d0:	cf 93       	push	r28
    22d2:	0f 92       	push	r0
    22d4:	cd b7       	in	r28, 0x3d	; 61
    22d6:	de b7       	in	r29, 0x3e	; 62
    22d8:	89 83       	std	Y+1, r24	; 0x01

	TCNT0 = 0; //Set Timer Initial value
    22da:	e2 e5       	ldi	r30, 0x52	; 82
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	10 82       	st	Z, r1

	OCR0  = set_duty_cycle; // Set Compare Value
    22e0:	ec e5       	ldi	r30, 0x5C	; 92
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	89 81       	ldd	r24, Y+1	; 0x01
    22e6:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    22e8:	a7 e3       	ldi	r26, 0x37	; 55
    22ea:	b0 e0       	ldi	r27, 0x00	; 0
    22ec:	e7 e3       	ldi	r30, 0x37	; 55
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	88 60       	ori	r24, 0x08	; 8
    22f4:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    22f6:	e3 e5       	ldi	r30, 0x53	; 83
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	8a e6       	ldi	r24, 0x6A	; 106
    22fc:	80 83       	st	Z, r24
}
    22fe:	0f 90       	pop	r0
    2300:	cf 91       	pop	r28
    2302:	df 91       	pop	r29
    2304:	08 95       	ret

00002306 <__mulsi3>:
    2306:	62 9f       	mul	r22, r18
    2308:	d0 01       	movw	r26, r0
    230a:	73 9f       	mul	r23, r19
    230c:	f0 01       	movw	r30, r0
    230e:	82 9f       	mul	r24, r18
    2310:	e0 0d       	add	r30, r0
    2312:	f1 1d       	adc	r31, r1
    2314:	64 9f       	mul	r22, r20
    2316:	e0 0d       	add	r30, r0
    2318:	f1 1d       	adc	r31, r1
    231a:	92 9f       	mul	r25, r18
    231c:	f0 0d       	add	r31, r0
    231e:	83 9f       	mul	r24, r19
    2320:	f0 0d       	add	r31, r0
    2322:	74 9f       	mul	r23, r20
    2324:	f0 0d       	add	r31, r0
    2326:	65 9f       	mul	r22, r21
    2328:	f0 0d       	add	r31, r0
    232a:	99 27       	eor	r25, r25
    232c:	72 9f       	mul	r23, r18
    232e:	b0 0d       	add	r27, r0
    2330:	e1 1d       	adc	r30, r1
    2332:	f9 1f       	adc	r31, r25
    2334:	63 9f       	mul	r22, r19
    2336:	b0 0d       	add	r27, r0
    2338:	e1 1d       	adc	r30, r1
    233a:	f9 1f       	adc	r31, r25
    233c:	bd 01       	movw	r22, r26
    233e:	cf 01       	movw	r24, r30
    2340:	11 24       	eor	r1, r1
    2342:	08 95       	ret

00002344 <__prologue_saves__>:
    2344:	2f 92       	push	r2
    2346:	3f 92       	push	r3
    2348:	4f 92       	push	r4
    234a:	5f 92       	push	r5
    234c:	6f 92       	push	r6
    234e:	7f 92       	push	r7
    2350:	8f 92       	push	r8
    2352:	9f 92       	push	r9
    2354:	af 92       	push	r10
    2356:	bf 92       	push	r11
    2358:	cf 92       	push	r12
    235a:	df 92       	push	r13
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	cf 93       	push	r28
    2366:	df 93       	push	r29
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	ca 1b       	sub	r28, r26
    236e:	db 0b       	sbc	r29, r27
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	09 94       	ijmp

0000237c <__epilogue_restores__>:
    237c:	2a 88       	ldd	r2, Y+18	; 0x12
    237e:	39 88       	ldd	r3, Y+17	; 0x11
    2380:	48 88       	ldd	r4, Y+16	; 0x10
    2382:	5f 84       	ldd	r5, Y+15	; 0x0f
    2384:	6e 84       	ldd	r6, Y+14	; 0x0e
    2386:	7d 84       	ldd	r7, Y+13	; 0x0d
    2388:	8c 84       	ldd	r8, Y+12	; 0x0c
    238a:	9b 84       	ldd	r9, Y+11	; 0x0b
    238c:	aa 84       	ldd	r10, Y+10	; 0x0a
    238e:	b9 84       	ldd	r11, Y+9	; 0x09
    2390:	c8 84       	ldd	r12, Y+8	; 0x08
    2392:	df 80       	ldd	r13, Y+7	; 0x07
    2394:	ee 80       	ldd	r14, Y+6	; 0x06
    2396:	fd 80       	ldd	r15, Y+5	; 0x05
    2398:	0c 81       	ldd	r16, Y+4	; 0x04
    239a:	1b 81       	ldd	r17, Y+3	; 0x03
    239c:	aa 81       	ldd	r26, Y+2	; 0x02
    239e:	b9 81       	ldd	r27, Y+1	; 0x01
    23a0:	ce 0f       	add	r28, r30
    23a2:	d1 1d       	adc	r29, r1
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	de bf       	out	0x3e, r29	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	cd bf       	out	0x3d, r28	; 61
    23ae:	ed 01       	movw	r28, r26
    23b0:	08 95       	ret

000023b2 <itoa>:
    23b2:	fb 01       	movw	r30, r22
    23b4:	9f 01       	movw	r18, r30
    23b6:	e8 94       	clt
    23b8:	42 30       	cpi	r20, 0x02	; 2
    23ba:	c4 f0       	brlt	.+48     	; 0x23ec <itoa+0x3a>
    23bc:	45 32       	cpi	r20, 0x25	; 37
    23be:	b4 f4       	brge	.+44     	; 0x23ec <itoa+0x3a>
    23c0:	4a 30       	cpi	r20, 0x0A	; 10
    23c2:	29 f4       	brne	.+10     	; 0x23ce <itoa+0x1c>
    23c4:	97 fb       	bst	r25, 7
    23c6:	1e f4       	brtc	.+6      	; 0x23ce <itoa+0x1c>
    23c8:	90 95       	com	r25
    23ca:	81 95       	neg	r24
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	64 2f       	mov	r22, r20
    23d0:	77 27       	eor	r23, r23
    23d2:	0e 94 0a 12 	call	0x2414	; 0x2414 <__udivmodhi4>
    23d6:	80 5d       	subi	r24, 0xD0	; 208
    23d8:	8a 33       	cpi	r24, 0x3A	; 58
    23da:	0c f0       	brlt	.+2      	; 0x23de <itoa+0x2c>
    23dc:	89 5d       	subi	r24, 0xD9	; 217
    23de:	81 93       	st	Z+, r24
    23e0:	cb 01       	movw	r24, r22
    23e2:	00 97       	sbiw	r24, 0x00	; 0
    23e4:	a1 f7       	brne	.-24     	; 0x23ce <itoa+0x1c>
    23e6:	16 f4       	brtc	.+4      	; 0x23ec <itoa+0x3a>
    23e8:	5d e2       	ldi	r21, 0x2D	; 45
    23ea:	51 93       	st	Z+, r21
    23ec:	10 82       	st	Z, r1
    23ee:	c9 01       	movw	r24, r18
    23f0:	0c 94 fa 11 	jmp	0x23f4	; 0x23f4 <strrev>

000023f4 <strrev>:
    23f4:	dc 01       	movw	r26, r24
    23f6:	fc 01       	movw	r30, r24
    23f8:	67 2f       	mov	r22, r23
    23fa:	71 91       	ld	r23, Z+
    23fc:	77 23       	and	r23, r23
    23fe:	e1 f7       	brne	.-8      	; 0x23f8 <strrev+0x4>
    2400:	32 97       	sbiw	r30, 0x02	; 2
    2402:	04 c0       	rjmp	.+8      	; 0x240c <strrev+0x18>
    2404:	7c 91       	ld	r23, X
    2406:	6d 93       	st	X+, r22
    2408:	70 83       	st	Z, r23
    240a:	62 91       	ld	r22, -Z
    240c:	ae 17       	cp	r26, r30
    240e:	bf 07       	cpc	r27, r31
    2410:	c8 f3       	brcs	.-14     	; 0x2404 <strrev+0x10>
    2412:	08 95       	ret

00002414 <__udivmodhi4>:
    2414:	aa 1b       	sub	r26, r26
    2416:	bb 1b       	sub	r27, r27
    2418:	51 e1       	ldi	r21, 0x11	; 17
    241a:	07 c0       	rjmp	.+14     	; 0x242a <__udivmodhi4_ep>

0000241c <__udivmodhi4_loop>:
    241c:	aa 1f       	adc	r26, r26
    241e:	bb 1f       	adc	r27, r27
    2420:	a6 17       	cp	r26, r22
    2422:	b7 07       	cpc	r27, r23
    2424:	10 f0       	brcs	.+4      	; 0x242a <__udivmodhi4_ep>
    2426:	a6 1b       	sub	r26, r22
    2428:	b7 0b       	sbc	r27, r23

0000242a <__udivmodhi4_ep>:
    242a:	88 1f       	adc	r24, r24
    242c:	99 1f       	adc	r25, r25
    242e:	5a 95       	dec	r21
    2430:	a9 f7       	brne	.-22     	; 0x241c <__udivmodhi4_loop>
    2432:	80 95       	com	r24
    2434:	90 95       	com	r25
    2436:	bc 01       	movw	r22, r24
    2438:	cd 01       	movw	r24, r26
    243a:	08 95       	ret

0000243c <_exit>:
    243c:	f8 94       	cli

0000243e <__stop_program>:
    243e:	ff cf       	rjmp	.-2      	; 0x243e <__stop_program>
